<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank_lyan&#39;s Blog</title>
  <subtitle>progressive programing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanlee26.github.io/"/>
  <updated>2017-07-31T14:26:18.000Z</updated>
  <id>https://yanlee26.github.io/</id>
  
  <author>
    <name>Yan Li</name>
    <email>franklyan24@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>职业规划</title>
    <link href="https://yanlee26.github.io/2017/07/29/2017-07-27/"/>
    <id>https://yanlee26.github.io/2017/07/29/2017-07-27/</id>
    <published>2017-07-28T18:25:20.000Z</published>
    <updated>2017-07-31T14:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h1><pre><code>在前端领域，争取做到一专多能。保持匠人心态与精神，成为一个全栈且偏前端的软件工程师。
</code></pre><ul>
<li>在精通JS的基础上，旁通其它主流编程语言；</li>
<li>熟悉常见设计模式，实践上指导各种语言的灵活应用；</li>
<li>熟悉算法及数据结构，理论上提高编程深度及水平；</li>
<li>保持终身学习的习惯，不断更新自我，与时俱进，使自己保持在行业领域前沿；</li>
</ul>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><pre><code>在公司无可避免的要用公司架构的技术栈；但对自身而言，若要保持well-informed，务必发展自己的技术栈。
</code></pre><ul>
<li>坚持每三个月研读一本技术书籍的习惯，如函数式编程及设计模式等；</li>
<li>后端：node， python；</li>
<li>前端：react， vue ，ES6/7；</li>
<li>打包工具：webpack；</li>
</ul>
<h1 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h1><pre><code>继续保持积极进取的心态，培养及发展几个有益身心的业余爱好，做一个有趣的人，懂生活的人。
</code></pre><ul>
<li>坚持旅游，跑步，健身的习惯；</li>
<li>发展好对英语，经济，及科技领域知识的爱好及保持归零心态；</li>
<li>有机会多参与户外活动，多与真实世界交流；</li>
<li>保持爱读书的习惯；</li>
<li>保持作息有致，饮食规律；</li>
<li>做一些有价值的投资，健康方面或自我发展方面；</li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><blockquote>
<p>这世间，唯有梦想与好女孩不可辜负！</p>
</blockquote>
<pre><code>寻找并珍惜，生命中最珍贵的人。

                                          2017-07-28  浦东新区
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;职业规划&quot;&gt;&lt;a href=&quot;#职业规划&quot; class=&quot;headerlink&quot; title=&quot;职业规划&quot;&gt;&lt;/a&gt;职业规划&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;在前端领域，争取做到一专多能。保持匠人心态与精神，成为一个全栈且偏前端的软件工程师。
&lt;/code&gt;&lt;/pr
    
    </summary>
    
      <category term="综合" scheme="https://yanlee26.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>react学习---Learning React.js is easier than you think</title>
    <link href="https://yanlee26.github.io/2017/01/24/react/"/>
    <id>https://yanlee26.github.io/2017/01/24/react/</id>
    <published>2017-01-23T23:15:24.000Z</published>
    <updated>2017-08-20T02:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文：<a href="https://edgecoders.com/learning-react-js-is-easier-than-you-think-fbd6dc4d935a" target="_blank" rel="external">Learning React.js is easier than you think</a></li>
<li>原文作者：<a href="https://edgecoders.com/@samerbuna" target="_blank" rel="external">Samer Buna</a></li>
</ul>
</blockquote>
<h1 id="学习-React-js-比你想象的要简单"><a href="#学习-React-js-比你想象的要简单" class="headerlink" title="学习 React.js 比你想象的要简单"></a>学习 React.js 比你想象的要简单</h1><h2 id="通过-Medium-中的一篇文章来学习-React-js-的基本原理"><a href="#通过-Medium-中的一篇文章来学习-React-js-的基本原理" class="headerlink" title="通过 Medium 中的一篇文章来学习 React.js 的基本原理"></a>通过 Medium 中的一篇文章来学习 React.js 的基本原理</h2><p><img src="https://cdn-images-1.medium.com/max/1600/1*YsPpBr_PgtyTR6CFDmKU9g.png" alt=""></p>
<p>你有没有注意到在 React 的 logo 中隐藏着一个六角星？只是顺便提下…<br>去年我写了一本简短的关于学习 React.js 的书，有 100 页左右。今年，我要挑战自己 —— 将其总结成一篇文章，并向 Medium 投稿。</p>
<p>这篇文章不是讲什么是 React 或者 <a href="https://medium.freecodecamp.org/yes-react-is-taking-over-front-end-development-the-question-is-why-40837af8ab76" target="_blank" rel="external">你该怎样学习 React</a>。这是在面向那些已经熟悉了 JavaScript 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model" target="_blank" rel="external">DOM API</a> 的人的 React.js 基本原理介绍</p>
<p>*本文采用嵌入式 jsComplete 代码段，所以为了方便阅读，你需要一个合适的屏幕宽度</p>
<p>下面所有的代码都仅供参考。它们也纯粹是为了表达概念而提供的例子。它们中的大多数有更好的实践方式。</p>
<p>您可以编辑和执行下面的任何代码段。使用 <strong>Ctrl+Enter</strong> 执行代码。每一段的右下角有一个点击后可以在 <a href="https://jscomplete.com/repl" target="_blank" rel="external">jsComplete/repl</a> 进行全屏模式编辑或运行代码的链接。</p>
<hr>
<h4 id="1-React-就是一切皆组件"><a href="#1-React-就是一切皆组件" class="headerlink" title="1 React 就是一切皆组件"></a>1 React 就是一切皆组件</h4><p>React 是围绕可重用组件的概念设计的。你定义小组件并将它们组合在一起形成更大的组件。</p>
<p>无论大小，所有组件都是可重用的，甚至在不同的项目中也是如此。</p>
<p>React 组件最简单的形式，就是一个普通的 JavaScript 函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Button (props) &#123;</div><div class="line">  // 这里返回一个 DOM 元素，例如：</div><div class="line">  return &lt;button type=&quot;submit&quot;&gt;&#123;props.label&#125;&lt;/button&gt;;</div><div class="line">&#125;</div><div class="line">// 将按钮组件呈现给浏览器</div><div class="line">ReactDOM.render(&lt;Button label=&quot;Save&quot; /&gt;, mountNode)</div></pre></td></tr></table></figure>
<center>例 1：编辑上面的代码并按 Ctrl+Enter 键执行</center>&gt;<br>（译者注：译文暂时没有这个功能，请访问原文使用此功能，下同）<br><br>&gt; 括号中的 button 标签将稍后解释。现在不要担心它们。<code>ReactDOM</code> 也将稍后解释，但如果你想测试这个例子和所有接下来的例子，上述 <code>render</code> 函数是你所需的。（React 将要接管和控制的是 <code>ReactDOM.render</code> 的第 2 个参数即目标 DOM 元素）。在 jsComplete REPL 中，你可以使用特殊的变量 <code>mountNode</code>。<br><br>例 1 的注意事项：<br><br>- 组件名称首字母大写，<code>Button</code>。必须要这样做是因为我们将处理 HTML 元素和 React 元素的混合。小写名称是为 HTML 元素保留的。事实上，将 React 组件命名为 “button” 然后你就会发现 ReactDOM 会忽略这个函数，仅仅是将其作为一个普通的空 HTML 按钮来渲染。<br><br>- 每个组件都接收一个属性列表，就像 HTML 元素一样。在 React 中，这个列表被称为<strong>属性</strong>。虽然你可以将一个函数随意命名。<br><br>- 在上面 Button 函数组件的返回输出中，我们奇怪地写了段看上去像 HTML 的代码。这实际上既不是 JavaScript 也不是 HTML，老实说，这甚至不是 React.js。然而它非常流行，以至于成为 React 应用程序中的默认值。这就是所谓的 <a href="https://facebook.github.io/jsx/" target="_blank" rel="external"><strong>JSX</strong></a>，这是一个JavaScript 的扩展。JSX 也是一个<strong>折中方案</strong>！继续尝试并在上面的函数中返回其他 HTML 元素，看看它们是如何被支持的（例如，返回一个文本输入元素）。<br><br>#### 2 JSX 输出的是什么？<br><br>上面的例 1 可以用没有 JSX 的纯 React.js 编写，如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Button (props) &#123;</div><div class="line">  return React.createElement(</div><div class="line">    &quot;button&quot;,</div><div class="line">    &#123; type: &quot;submit&quot; &#125;,</div><div class="line">    props.label</div><div class="line">  );</div><div class="line">&#125;</div><div class="line">// 要使用 Button，你可以这么做</div><div class="line">ReactDOM.render(</div><div class="line">  React.createElement(Button, &#123; label: &quot;Save&quot; &#125;),</div><div class="line">  mountNode</div><div class="line">);</div></pre></td></tr></table></figure><br><br><center>例 2：不使用 JSX 编写 React 组件</center>

<p>在 React 顶级 API 中，<code>createElement</code> 函数是主函数。这是你需要学习的 7 个 API 中的 1 个。React 的 API 就是这么小。</p>
<p>就像 DOM 自身有一个 document.createElement 函数来创建一个由标签名指定的元素一样，React 的 <code>createElement</code> 函数是一个高级函数，有和 <code>document.createElement</code> 同样的功能，但它也可以用于创建一个表示 React 组件的元素。当我们使用上面例 2 中的按钮组件时，我们使用的是后者。</p>
<p>不像 <code>document.createElement</code>，React 的 <code>createElement</code> 在接收第二个参数后，接收一个动态参数，它表示所创建元素的子元素。所以 <code>createElement</code> 实际上创建了一个<strong>树</strong>。</p>
<p>这里就是这样的一个例子（底层实现,函数化组件）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const InputForm = React.createElement(</div><div class="line">  &quot;form&quot;,</div><div class="line">  &#123; target: &quot;_blank&quot;, action: &quot;https://google.com/search&quot; &#125;,</div><div class="line">  React.createElement(&quot;div&quot;, null, &quot;Enter input and click Search&quot;),</div><div class="line">  React.createElement(&quot;input&quot;, &#123; className: &quot;big-input&quot; &#125;),</div><div class="line">  React.createElement(Button, &#123; label: &quot;Search&quot; &#125;)</div><div class="line">);</div><div class="line"></div><div class="line">// InputForm 使用 Button 组件，所以我们需要这样做：</div><div class="line">function Button (props) &#123;</div><div class="line">  return React.createElement(</div><div class="line">    &quot;button&quot;,</div><div class="line">    &#123; type: &quot;submit&quot; &#125;,</div><div class="line">    props.label</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 然后我们可以通过 .render 方法直接使用 InputForm</div><div class="line">ReactDOM.render(InputForm, mountNode);</div></pre></td></tr></table></figure>
<center>例 3：React 创建元素的 API</center>

<p>上面例子中的一些事情值得注意：</p>
<ul>
<li><code>InputForm</code> 不是一个 React 组件；它仅仅是一个 React <strong>元素</strong>。这就是为什么我们可以在 <code>ReactDOM.render</code> 中直接使用它并且可以在调用时不使用 <code>&lt;InputForm /&gt;</code> 的原因。</li>
<li>React.createElement 函数在前两个参数后接收了多个参数。从第3个参数开始的参数列表构成了创建元素的子项列表。</li>
<li>我们可以嵌套 <code>React.createElement</code> 调用，因为它是 JavaScript。</li>
<li>当这个元素不需要属性时，React.createElement 的第二个参数可以为空或者是一个空对象。</li>
<li>我们可以在 React 组件中混合 HTML 元素。你可以将 HTML 元素作为内置的 React 组件。</li>
<li>React 的 API 试图和 DOM API 一样，这就是为什么我们在 input 元素中使用 <code>className</code> 代替 <code>class</code> 的原因。我们都希望如果 React 的 API 成为 DOM API 本身的一部分，因为，你知道，它要好得多。</li>
</ul>
<p>上述的代码是当你引入 React 库的时候浏览器是怎样理解的。浏览器不会处理任何 JSX 业务。然而，我们更喜欢看到和使用 HTML，而不是那些 <code>createElement</code> 调用（想象一下只使用 <code>document.createElement</code> 构建一个网站！）。这就是 JSX 存在的原因。取代上述调用 <code>React.createElement</code> 的方式，我们可以使用一个非常简单类似于 HTML 的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const InputForm =</div><div class="line">  &lt;form target=&quot;_blank&quot; action=&quot;https://google.com/search&quot;&gt;</div><div class="line">    &lt;div&gt;Enter input and click Search&lt;/div&gt;</div><div class="line">    &lt;input className=&quot;big-input&quot; name=&quot;q&quot; /&gt;</div><div class="line">    &lt;Button label=&quot;Search&quot; /&gt;</div><div class="line">  &lt;/form&gt;;</div><div class="line"></div><div class="line">// InputForm “仍然”使用 Button 组件，所以我们也需要这样。</div><div class="line">// JXS 或者普通的表单都会这样做</div><div class="line">function Button (props) &#123;</div><div class="line">  // 这里返回一个 DOM 元素。例如：</div><div class="line">  return &lt;button type=&quot;submit&quot;&gt;&#123;props.label&#125;&lt;/button&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 然后我们可以直接通过 .render 使用 InputForm</div><div class="line">ReactDOM.render(InputForm, mountNode);</div></pre></td></tr></table></figure>
<center>例 4：为什么在 React 中 JSX 受欢迎（和例 3 相比）</center>  

<p>注意上面的几件事：</p>
<ul>
<li>这不是 HTML 代码。比如，我们仍然可以使用 <code>className</code> 代替 <code>class</code>。</li>
<li>我们仍在考虑怎样让上述的 JavaScript 看起来像是 HTML。看一下我在最后是怎样添加的。</li>
</ul>
<p>我们在上面（例 4）中写的就是 JSX。然而，我们要将编译后的版本（例 3）给浏览器。要做到这一点，我们需要使用一个预处理器将 JSX 版本转换为 <code>React.createElement</code> 版本。</p>
<p>这就是 JSX。这是一种折中的方案，允许我们用类似 HTML 的语法来编写我们的 React 组件，这是一个很好的方法。</p>
<blockquote>
<p>“Flux” 在头部作为韵脚来使用，但它也是一个非常受欢迎的 <a href="https://facebook.github.io/flux/" target="_blank" rel="external">应用架构application architecture</a>，由 Facebook 推广。最出名的是 Redux，Flux 和 React 非常合适。</p>
</blockquote>
<p>JSX，可以单独使用，不仅仅适用于 React。</p>
<h4 id="3-你可以在-JavaScript-的任何地方使用-JSX"><a href="#3-你可以在-JavaScript-的任何地方使用-JSX" class="headerlink" title="3 你可以在 JavaScript 的任何地方使用 JSX"></a>3 你可以在 JavaScript 的任何地方使用 JSX</h4><p>在 JSX 中，你可以在一对花括号内使用任何 JavaScript 表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const RandomValue = () =&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &#123; Math.floor(Math.random() * 100) &#125;</div><div class="line">  &lt;/div&gt;;</div><div class="line">// 使用：</div><div class="line">ReactDOM.render(&lt;RandomValue /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 5：在 JSX 中使用 JavaScript 表达式</center>

<p>任何 JavaScript 表达式可以直接放在花括号中。这相当于在 JavaScript 中插入 <code>${}</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="external">模板 template literals</a>。</p>
<p>这是 JSX 内唯一的约束：只有表达式。例如，你不能使用 <code>if</code> 语句，但三元表达式是可以的。</p>
<p>JavaScript 变量也是表达式，所以当组件接受属性列表时（不包括 <code>RandomValue</code> 组件，<code>props</code> 是可选择的），你可以在花括号里使用这些属性。我们在上述（例 1）的 <code>Button</code> 组件是这样使用的。</p>
<p>JavaScript 对象也是表达式。有些时候我们在花括号中使用 JavaScript 对象，这看起来像是使用了两个花括号，但是在花括号中确实只有一个对象。其中一个用例就是将 CSS 样式对象传递给响应中的特殊样式属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const ErrorDisplay = (&#123;message&#125;) =&gt;</div><div class="line">  &lt;div style=&#123; &#123; color: &apos;red&apos;, backgroundColor: &apos;yellow&apos; &#125; &#125;&gt;</div><div class="line">    &#123;message&#125;</div><div class="line">  &lt;/div&gt;;</div><div class="line"></div><div class="line">// 使用</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;ErrorDisplay</div><div class="line">    message=&quot;These aren&apos;t the droids you&apos;re looking for&quot;</div><div class="line">  /&gt;,</div><div class="line">  mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<center>例 6：一个对象传递特殊的 React 样式参数</center>

<p>注意我<strong>解构(destructured )</strong>的只是在属性参数之外的信息。这只是 JavaScript。还要注意上面的样式属性是一个特殊的属性（同样，它不是 HTML，它更接近 DOM API）。我们使用一个对象作为样式属性的值并且这个对象定义样式就像我们使用 JavaScript 那样（我们可以这样做）。</p>
<p>你可以在 JSX 中使用 React 元素。因为这也是一个表达式（记住，一个 React 元素只是一个函数调用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const MaybeError = (&#123;errorMessage&#125;) =&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &#123;errorMessage &amp;&amp; &lt;ErrorDisplay message=&#123;errorMessage&#125; /&gt;&#125;</div><div class="line">  &lt;/div&gt;;</div><div class="line"></div><div class="line">// MaybeError 组件使用 ErrorDisplay 组件</div><div class="line">const ErrorDisplay = (&#123;message&#125;) =&gt;</div><div class="line">  &lt;div style=&#123; &#123; color: &apos;red&apos;, backgroundColor: &apos;yellow&apos; &#125; &#125;&gt;</div><div class="line">    &#123;message&#125;</div><div class="line">  &lt;/div&gt;;</div><div class="line"></div><div class="line">// 现在我们使用 MaybeError 组件：</div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MaybeError</div><div class="line">    errorMessage=&#123;Math.random() &gt; 0.5 ? &apos;Not good&apos; : &apos;&apos;&#125;</div><div class="line">  /&gt;,</div><div class="line">  mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<center>例 7：一个 React 元素是一个可以通过 {} 使用的表达式</center>

<p>上述 <code>MaybeError</code> 组件只会在有 <code>errorMessage</code> 传入或者另外有一个空的 <code>div</code> 才会显示 <code>ErrorDisplay</code> 组件。React 认为 <code>{true}</code>、 <code>{false}</code><br><code>{undefined}</code> 和 <code>{null}</code> 是有效元素，不呈现任何内容。</p>
<p>我们也可以在 JSX 中使用所有的 JavaScript 的集合方法（<code>map</code>、<code>reduce</code> 、<code>filter</code>、 <code>concat</code> 等）。因为他们返回的也是表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const Doubler = (&#123;value=[1, 2, 3]&#125;) =&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &#123;value.map(e =&gt; e * 2)&#125;</div><div class="line">  &lt;/div&gt;;</div><div class="line"></div><div class="line">// 使用下面内容 </div><div class="line">ReactDOM.render(&lt;Doubler /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 8：在 {} 中使用数组</center>

<p>请注意我是如何给出上述 <code>value</code> 属性的默认值的，因为这全部都只是 JavaScript。注意我只是在 div 中输出一个数组表达式。React 是完全可以的。它只会在文本节点(text node)中放置每一个加倍的值。</p>
<h4 id="4-你可以使用-JavaScript-类写-React-组件"><a href="#4-你可以使用-JavaScript-类写-React-组件" class="headerlink" title="4 你可以使用 JavaScript 类写 React 组件"></a>4 你可以使用 JavaScript 类写 React 组件</h4><p>简单的函数组件非常适合简单的需求，但是有的时候我们需要的更多。React 也支持通过使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">JavaScript 类</a>来创建组件。这里 <code>Button</code> 组件（在例 1 中）就是使用类的语法编写的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;button&gt;&#123;this.props.label&#125;&lt;/button&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用（相同的语法）</div><div class="line">ReactDOM.render(&lt;Button label=&quot;Save&quot; /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 9：使用 JavaScript 类创建组件</center>

<p>类的语法是非常简单的：定义一个扩展的 <code>React.Component</code> 类（另一个你需要学习的 React 的顶级 API）。该类定义了一个单一的实例函数 —— <code>render()</code>，并使函数返回虚拟 DOM 对象。每一次我们使用基于类的 <code>Button</code> 组件（例如，通过 <code>&lt;Button ... /&gt;</code>）,React 将从这个基于类的组件(class-based component)中实例化对象，并在 DOM 树中使用该对象。</p>
<p>这就是为什么上面的例子中我们可以在 JSX 中使用 <code>this.props.label</code> 渲染输出的原因，因为每一个组件都有一个特殊的称为 <code>props</code> 的 <strong>实例(instance)</strong> 属性，这让所有的值传递给该组件时被实例化。</p>
<p>由于我们有一个与组件的单个使用相关联的(associated with)实例，所以我们可以按照自己的意愿定制(customize)该实例。例如，我们可以通过使用常规 JavaScript 构造函数来构造它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.id = Date.now();</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;button id=&#123;this.id&#125;&gt;&#123;this.props.label&#125;&lt;/button&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用</div><div class="line">ReactDOM.render(&lt;Button label=&quot;Save&quot; /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 10：自定义组件实例</center>

<p>我们也可以定义类的原型并且在任何我们希望的地方使用，包括在返回的 JSX 输出的内部：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  clickCounter = 0;</div><div class="line"></div><div class="line">  handleClick = () =&gt; &#123;</div><div class="line">    console.log(`Clicked: $&#123;++this.clickCounter&#125;`);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;button id=&#123;this.id&#125; onClick=&#123;this.handleClick&#125;&gt;</div><div class="line">        &#123;this.props.label&#125;</div><div class="line">      &lt;/button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用</div><div class="line">ReactDOM.render(&lt;Button label=&quot;Save&quot; /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 11：使用类的属性（通过单击保存按钮进行测试）</center>

<p>注意上述例 11 中的几件事情</p>
<ul>
<li><code>handleClick</code> 函数使用 JavaScript 新提出的 <a href="https://github.com/tc39/proposal-class-fields" target="_blank" rel="external">class-field syntax</a> 语法。这仍然是 stage-2，但是这是访问组件安装实例（感谢箭头函数）最好的选择（因为很多原因）。然而，你需要使用类似 Babel 的编译器解码为 stage-2（或者仅仅是类字段语法）来让上述代码工作。 jsComplete REPL 有预编译(pre-configured)功能。</li>
<li>我们利用同样的类领域（class-field）语法也定义了<code>clickCounter</code>实例变量，这允许我们跳过一个class constructor的一并调用。</li>
<li>当我们特殊化<code>handleClick</code>函数以作为react属性值，我们并没调用它。我们仅仅传递给<code>handleClick</code>函数的<em>引用(reference )</em>。在那个层次调用函数是使用react的常见错误之一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 错误：</div><div class="line">onClick=&#123;this.handleClick()&#125;</div><div class="line"></div><div class="line">// 正确：</div><div class="line">onClick=&#123;this.handleClick&#125;</div></pre></td></tr></table></figure>
<h4 id="5-React-中的事件：两个重要的区别"><a href="#5-React-中的事件：两个重要的区别" class="headerlink" title="5 React 中的事件：两个重要的区别"></a>5 React 中的事件：两个重要的区别</h4><p>当处理 React 元素中的事件时，我们与 DOM API 的处理方式有两个非常重要的区别：</p>
<ul>
<li>所有 React 元素属性（包括事件）都使用 <strong>camelCase</strong> 命名，而不是 <strong>lowercase</strong>。例如是 <code>onClick</code> 而不是 <code>onclick</code>。</li>
<li>我们将实际的 JavaScript 函数引用(reference)传递给事件处理程序，而不是字符串。例如是 <code>onClick={handleClick}</code> 而不是 <code>onClick=&quot;handleClick&quot;</code>。</li>
</ul>
<p>React 用自己的对象包装 DOM 对象事件以优化事件处理的性能，但是在事件处理程序内部，我们仍然可以访问 DOM 对象上所有可以访问的方法。React 将经过包装的事件对象传递给每个调用函数。例如，为了防止表单提交默认提交操作，你可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Form extends React.Component &#123;</div><div class="line">  handleSubmit = (event) =&gt; &#123;</div><div class="line">    event.preventDefault();</div><div class="line">    console.log(&apos;Form submitted&apos;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</div><div class="line">        &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</div><div class="line">      &lt;/form&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用</div><div class="line">ReactDOM.render(&lt;Form /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 12：使用包装过的对象???</center>

<h4 id="6-每一个-React-组件都有一个故事：第-1-部分"><a href="#6-每一个-React-组件都有一个故事：第-1-部分" class="headerlink" title="6 每一个 React 组件都有一个故事：第 1 部分"></a>6 每一个 React 组件都有一个故事：第 1 部分</h4><p>以下仅适用于类组件（扩展 <code>React.Component</code>）。函数组件有一个稍微不同的故事。</p>
<ol>
<li>首先，我们定义了一个模板来创建组件中的元素。</li>
<li>然后，我们在某处使用 React。例如，在 <code>render</code> 内部调用其他的组件，或者直接使用 <code>ReactDOM.render</code>。</li>
<li>然后，React 实例化一个对象然后给它设置 <strong>props</strong> 然后我们可以通过 <code>this.props</code> 访问。这些属性都是我们在第 2 步传入的。</li>
<li>因为这些全部都是 JavaScript，<code>constructor</code> 方法将会被调用（如果定义的话）。这是我们称之为的第一个：<strong>组件生命周期方法</strong>。</li>
<li>接下来 React 计算渲染之后的输出方法（虚拟 DOM 节点）。</li>
<li>因为这是 React 第一次渲染元素，React 将会与浏览器连通（代表我们使用 DOM API）来显示元素。这整个过程称为 <strong>mounting</strong>。</li>
<li>接下来 React 调用另一个生命周期函数，称为 <code>componentDidMount</code>。我们可以这样使用这个方法，例如：在 DOM 上做一些我们现在知道的在浏览器中存在的东西。在此生命周期方法之前，我们使用的 DOM 都是虚拟的。</li>
<li>一些组件的故事到此结束，其他组件得到卸载浏览器 DOM 中的各种原因。在后一种情况发生时，会调用另一个生命周期的方法，<code>componentWillUnmount</code>。</li>
<li>任何 mounted 的元素的 <strong>状态</strong>都可能会改变。该元素的父级可能会重新渲染。无论哪种情况，mounted 的元素都可能接收到不同的属性集。React 的魔力就是这儿，我们实际上需要的正是 React 的这一点！在这一点之前，说实话，我们并不需要 React。</li>
<li>组价的故事还在继续，但是在此之前，我们需要理解我所说的这种 <strong>状态</strong>。</li>
</ol>
<h4 id="7-React-组件可以具有私有状态"><a href="#7-React-组件可以具有私有状态" class="headerlink" title="7 React 组件可以具有私有状态"></a>7 React 组件可以具有私有状态</h4><p>以下只适用于类组件。我有没有提到有人叫表象而已(presentational-only)的组件 <strong>dumb</strong>？</p>
<p>状态类是任何 React 类组件中的一个特殊字段。React 检测（monitors ）每一个组件状态的变化，但是为了 React 更加有效，我们必须通过 React 的另一个 API 改变状态字段，这就是我们要学习的另一个 API —— <code>this.setState</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class CounterButton extends React.Component &#123;</div><div class="line">  state = &#123;</div><div class="line">    clickCounter: 0,</div><div class="line">    currentTimestamp: new Date(),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  handleClick = () =&gt; &#123;</div><div class="line">    this.setState((prevState) =&gt; &#123;</div><div class="line">     return &#123; clickCounter: prevState.clickCounter + 1 &#125;;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">   setInterval(() =&gt; &#123;</div><div class="line">     this.setState(&#123; currentTimestamp: new Date() &#125;)</div><div class="line">    &#125;, 1000);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;Click&lt;/button&gt;</div><div class="line">        &lt;p&gt;Clicked: &#123;this.state.clickCounter&#125;&lt;/p&gt;</div><div class="line">        &lt;p&gt;Time: &#123;this.state.currentTimestamp.toLocaleString()&#125;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 使用</div><div class="line">ReactDOM.render(&lt;CounterButton /&gt;, mountNode);</div></pre></td></tr></table></figure>
<center>例 13：setState 的 API</center>

<p>这可能是最重要的一个例子因为这将是你完全理解 React 基础知识的方式。这个例子之后，还有一些小事情需要学习，但从那时起主要是你和你的 JavaScript 技能。</p>
<p>让我们来看一下例 13，从类开始，总共有两个，一个是一个初始化的有初始值为 <code>0</code> 的 <code>clickCounter</code> 对象和一个从 <code>new Date()</code> 开始的 <code>currentTimestamp</code>。</p>
<p>另一个类是 <code>handleClick</code> 函数，在渲染方法中我们给按钮元素传入 <code>onClick</code> 事件。通过使用 <code>setState</code> 的 <code>handleClick</code> 方法修改了组件的实例状态。要注意到这一点。</p>
<p>另一个我们修改状态的地方是在一个内部的定时器，开始在内部的 <code>componentDidMount</code> 生命周期方法。它每秒钟调用一次并且执行另一个函数调用 <code>this.setState</code>。</p>
<p>在渲染方法中，我们使用具有正常读语法的状态上的两个属性（没有专门的 API）。</p>
<p>现在，注意我们更新状态使用两种不同的方式： </p>
<ol>
<li>通过传入一个函数然后返回一个对象。我们在 <code>handleClick</code> 函数内部这样做。</li>
<li>通过传入一个正则对象，我们在在区间回调(interval callback)中这样做。</li>
</ol>
<p>这两种方式都是可以接受的，但是当你同时读写状态时，第一种方法是首选的（我们这样做）。在区间回调中，我们只向状态写入而不读它。当有问题时，总是使用第一个函数作为参数语法。伴随着竞争条件这更安全，因为 <code>setstate</code> 实际上是一个异步方法。</p>
<p>我们应该怎样更新状态呢？我们返回一个有我们想要更新的的值的对象。注意，在调用 <code>setState</code> 时，我们全部都从状态中传入一个属性或者全都不。这完全是可以的因为 <code>setState</code> 实际上 <strong>合并</strong> 了你通过它（返回值的函数参数）与现有的状态，所以，没有指定一个属性在调用 <code>setState</code> 时意味着我们不希望改变属性（但不删除它）。</p>
<h4 id="8-React-will-react"><a href="#8-React-will-react" class="headerlink" title="8 React will react"></a>8 React will react</h4><p>React 的名字是从状态改变的 <strong>反应</strong>中得来的（虽然没有反应，但也是在一个时间表中）。这里有一个笑话，React 应该被命名为 <strong>Schedule</strong>！</p>
<p>然而，当任何组件的状态被更新时，我们用肉眼观察到的是:对该更新的反应，并自动反映了浏览器 DOM 中的更新（如果需要的话）。</p>
<p>将渲染函数的输入视为两种：</p>
<ul>
<li>通过父元素传入的属性</li>
<li>以及可以随时更新的内部私有状态</li>
</ul>
<p>当渲染函数的输入改变时，输出可能也会改变。</p>
<p>React 保存了渲染的历史记录，当它看到一个渲染与前一个不同时，它将计算它们之间的差异，并将其有效地转换为在 DOM 中执行的实际 DOM 操作。(React keeps a record of the history of renders and when it sees that one render is different than the previous one, it’ll compute the difference between them and efficiently translate it into actual DOM operations that get executed in the DOM.)</p>
<h4 id="9-React-是你的代理"><a href="#9-React-是你的代理" class="headerlink" title="9 React 是你的代理"></a>9 React 是你的代理</h4><p>您可以将 React 看作是我们用来与浏览器通信的代理。以上面的当前时间戳显示为例。取代每一秒我们都需要手动去浏览器调用 DOM API 操作来查找和更新 <code>p#timestamp</code> 元素，我们仅仅改变组件的状态属性，React 做的工作代表我们与浏览器的通信。我相信这就是为什么 React 这么受欢迎的真正原因；我们只是不喜欢和浏览器先生谈话（以及它所说的 DOM 语言的很多方言），并且 React 自愿代理，免费的！</p>
<h4 id="10-每一个-React-组件都有一个故事：第-2-部分"><a href="#10-每一个-React-组件都有一个故事：第-2-部分" class="headerlink" title="10 每一个 React 组件都有一个故事：第 2 部分"></a>10 每一个 React 组件都有一个故事：第 2 部分</h4><p>现在我们知道了一个组件的状态，当该状态发生变化的时候，我们来了解一下关于这个过程的最后几个概念。</p>
<ol>
<li>当组件的状态被更新时，或者它的父进程决定更改它传递给组件的属性时，组件可能需要重新渲染。</li>
<li>如果后者发生，React 会调用另一个生命周期方法：<code>componentWillReceiveProps</code>。</li>
<li>如果状态对象或传递的属性改变了，React 有一个重要的决定要做：组件是否应该在 DOM 中更新？这就是为什么它调用另一个重要的生命周期方法 <code>shouldComponentUpdate</code> 的原因 。此方法是一个实际问题，因此，如果需要自行定制或优化渲染过程，则必须通过返回 true 或 false 来回答这个问题。</li>
<li>如果没有自定义 <code>shouldComponentUpdate</code>，React 的默认事件在大多数情况下都能处理的很好。</li>
<li>首先，这个时候会调用另一生命周期的方法：<code>componentWillUpdate</code>。然后，React 将计算新渲染过的输出，并将其与最后渲染的输出进行对比。</li>
<li>如果渲染过的输出和之前的相同，React 不进行处理（不需要和浏览器先生对话）。</li>
<li>如果有不同的地方，React 将不同传达给浏览器，像我们之前看到的那样。</li>
<li>在任何情况下，一旦一个更新程序发生了，无论以何种方式（即使有相同的输出），React 会调用最后的生命周期方法：<code>componentDidUpdate</code>。</li>
</ol>
<p>生命周期方法是逃生舱口。如果你没有做什么特别的事情，你可以在没有它们的情况下创建完整的应用程序。它们非常方便地分析应用程序中正在发生的事情，并进一步优化 React 更新的性能。</p>
<hr>
<p>信不信由你，通过上面所学的知识（或部分知识），你可以开始创建一些有趣的 React 应用程序。如果你渴望更多，看看我的 <a href="https://www.pluralsight.com/courses/react-js-getting-started?aid=701j0000001heIoAAI&amp;promo=&amp;oid=&amp;utm_source=google&amp;utm_medium=ppc&amp;utm_campaign=US_Dynamic&amp;utm_content=&amp;utm_term=&amp;gclid=CNOAj_2-j9UCFUpNfgod4V0Fdg" target="_blank" rel="external"><strong>Pluralsight 的 React.js 入门课程</strong></a>。</p>
<p><strong>感谢阅读。如果您觉得这篇文章有帮助，请点击原文中的 💚。请关注我的更多关于 React.js 和 JavaScript 的文章</strong>。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文：&lt;a href=&quot;https://edgecoders.com/learning-react-js-is-easier-than-you-think-fbd6dc4d935a&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="react" scheme="https://yanlee26.github.io/categories/react/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Becoming a Great Web Front-end Developer</title>
    <link href="https://yanlee26.github.io/2017/01/04/front-end-career/"/>
    <id>https://yanlee26.github.io/2017/01/04/front-end-career/</id>
    <published>2017-01-03T19:28:20.000Z</published>
    <updated>2017-07-31T14:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成就一名卓越的前端开发者"><a href="#成就一名卓越的前端开发者" class="headerlink" title="成就一名卓越的前端开发者"></a><center>成就一名卓越的前端开发者</center></h1><blockquote>
<p>本文记录了两位工程师为web开发者们所提出的多条建议，其中一位推荐了多种实用的工具与技术，而另一位则对于如何克服浏览器开发时所面临的挑战提出了诸多建议。<br>Rebecca Murphey是来自于Bazaarvoice的一位软件工程师。今年早些时候，她发布了一篇博客文章<a href="http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015" target="_blank" rel="external">“前端（JS）开发者的基本素质之2015版”</a>，为JavaScript开发者在进行客户端web开发时使用的工具与开发方式提出了一些建议。她在文章的总结中写道：</p>
</blockquote>
<h3 id="1-学习ECMAScript-2015"><a href="#1-学习ECMAScript-2015" class="headerlink" title="1. 学习ECMAScript 2015"></a>1. 学习ECMAScript 2015</h3><p>推荐的参考资料有：<a href="https://www.infoq.com/news/2015/06/ecmascript-2015-es6" target="_blank" rel="external">《Understanding ES6》</a>、ES6 Rocks以及BabelJS。我们在此还要加上一条，即Axel Rauschmayer的著作<a href="http://www.infoq.com/cn/news/2015/07/exploring-es6" target="_blank" rel="external">《探索ES6》</a>。考虑到在当前这个时间点上似乎还没有必要了解ECMAScript 2015的所有细节，Murphey建议开发者更深入地了解如何使用异步调用、回调以及promise。</p>
<h3 id="2-使用模块"><a href="#2-使用模块" class="headerlink" title="2.使用模块"></a>2.使用模块</h3><p>Murphey相信，模块毫无疑问应当作为客户端web应用程序的构建块。她最近在使用webpack以实现模块化的效果，但她希望让每个人都能够使用ECMAScript标准模块的那一天能够早日到来。</p>
<h3 id="3-测试你的代码"><a href="#3-测试你的代码" class="headerlink" title="3.测试你的代码"></a>3.测试你的代码</h3><p>在Murphey看来，为你的代码编写测试，并且保证代码的可测试性是至关重要的。<br>虽然她对于Intern“非常中意”，但出于习惯，她还是坚持使用Mocha。关于这一方面，<br>她也强烈推荐Michael Feathers的著作<a href="http://philipwalton.com/articles/how-to-become-a-great-front-end-engineer/" target="_blank" rel="external">《修改代码的艺术》</a>。</p>
<h3 id="4-实现流程自动化"><a href="#4-实现流程自动化" class="headerlink" title="4.实现流程自动化"></a>4.实现流程自动化</h3><p>Murphey曾经尝试使用Grunt与Gulp，但她最终还是选择了Yeoman。因为在“使用不熟悉的技术开始一个全新的项目”，或是对第三方JavaScript应用的开发进行标准化时，Yeoman的表现“非常出色”。Murphey也提到了Broccoli，认为它将来或许能够取代Grunt和Yeoman。</p>
<h3 id="5-编写高质量的代码"><a href="#5-编写高质量的代码" class="headerlink" title="5.编写高质量的代码"></a>5.编写高质量的代码</h3><p>她的建议是，对“违反了项目中经过良好定义的风格指南”的代码进行重构，还应当使用lint工具，例如JSCS或ESLint。</p>
<h3 id="6-使用Git"><a href="#6-使用Git" class="headerlink" title="6.使用Git"></a>6.使用Git</h3><p>Murphey建议在Git中使用特性分支，因此得以“通过交互式rebase，在与他人分享提交时对提交进行清理，并且尽可能地在较小的单元上进行工作，以减少冲突的发生机率”。此外还应当通过ghooks在push操作与commit操作前运行钩子操作。</p>
<h3 id="7-在服务端生成HTML"><a href="#7-在服务端生成HTML" class="headerlink" title="7.在服务端生成HTML"></a>7.在服务端生成HTML</h3><p>出于性能方面的考虑，Murphey推荐在大型项目中尽可能在服务端生成HTML。“预先生成这些文件，将其作为静态文件保存，以加快处理请求的速度。随后在客户端的相应事件中可通过客户端代码操作这些HTML文件，并在客户端模板中修改。”</p>
<h3 id="8-拥抱Node"><a href="#8-拥抱Node" class="headerlink" title="8. 拥抱Node"></a>8. 拥抱Node</h3><p>Murphey建议web开发者熟练掌握Node.js的相关知识，至少要了解如何初始化一个Node项目、如何搭建一台Express服务器、以及如何使用request模块转发请求。<br>Philip Walton是来自Google的一位软件工程师，他最近撰写了一篇博客文章<a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052" target="_blank" rel="external">Working-Effectively-Legacy-Michael-Feathers</a>。这篇文章的观点另辟蹊径，他并没有向读者推荐任何工具或框架，而是专注于如何处理这一领域中的某些挑战。在他看来，优秀员工与真正杰出的人才的差别不在于他们的知识量，而在于他们的思考方式。他是这样描述开发者的智慧的：</p>
<h3 id="9-真正理解背后的过程"><a href="#9-真正理解背后的过程" class="headerlink" title="9.真正理解背后的过程"></a>9.真正理解背后的过程</h3><p>对于Walton来说，仅仅编写出可以运行的代码算不得优秀。他见过许多编写CSS与JavaScript的人，他们 “只求找到能够运行的代码，然后就继续下一步工作了。”很多时候，开发者并不了解某段代码运行的机制。Walton建议开发者进行深入钻研：</p>
<blockquote>
<p>要充分理解代码的工作原理或许会很耗时间，但我向你保证，从长远来说，这种方式最终将节省你大量的时间。一旦你充分理解你所参与的系统是如何运作的，你就无需不断地进行猜测与检验这些费时的工作了。<br>预先了解浏览器将产生的改动。Web开发者应当持续了解有哪些浏览器的改动会破坏现有的代码。以下代码在IE10中必然会导致整个JavaScript框架的方法出错：<br>var isIE6 = !isIE7 &amp;&amp; !isIE8 &amp;&amp; !isIE9;</p>
</blockquote>
<h3 id="10仔细阅读规范"><a href="#10仔细阅读规范" class="headerlink" title="10仔细阅读规范"></a>10仔细阅读规范</h3><p>Walton指出，虽然阅读规范是一项艰辛的任务，但一旦出现浏览器对某个页面的渲染不同的情况，这一任务就是不可避免的了。他为此特别举例说明：</p>
<blockquote>
<p>最近我遇到这样一个例子，与可伸缩（flex）元素的默认最小尺寸有关。根据规范所说，可伸缩元素的min-width与min-height的初始值是auto，而不是0，这就意味着在默认情况下，这些元素不可能收缩到比其中的内容尺寸还小。而在过去8个月中，Firefox是唯一一个正确地实现了这一特性的浏览器。<br>如果你遇到了这个跨浏览器的不一致性问题，并且注意到你的网站在Chrome、IE、Opera和Safari上的展现完全相同，只在Firefox上有所差别，那你很可能会认为是Firefox的问题。实际上，我曾多次发现这一情况，在我的Flexbugs项目中，有许多由用户报告的bug其实都是由这种不一致性所导致的。而如果我按照用户所提议的那些临时方案来改变实现方式，那么在两周前所发布的Chrome 44中又会产生问题。由于这些临时方案选择了违背规范的方式，它们在无形中起到了提倡不正确行为的负面作用。</p>
</blockquote>
<h3 id="11-代码审查"><a href="#11-代码审查" class="headerlink" title="11.代码审查"></a>11.代码审查</h3><p>Walton表示，从阅读他人的代码中可以学到很多知识，它可以拓宽你的思路，了解“新的工作方法”，同时也有助于你在团队中的工作。实际上，这一点确实相当必要，因为“作为一位工程师来说，你的时间大部分都是在一个现有的代码库中添加或修改代码”，而不是从头开始编写全新的代码。</p>
<h3 id="12-与更聪明的人一起工作"><a href="#12-与更聪明的人一起工作" class="headerlink" title="12.与更聪明的人一起工作"></a>12.与更聪明的人一起工作</h3><p>Walton“强烈”建议你至少在职业生涯的初期阶段要尽量在某个团队中进行工作，向更有经验的团队成员学习，并让他们审查你的代码。如果之后选择了自由职业者这条职业路线，那么Walton建议你参与开源项目，这同样可以感受到在团队中工作的益处。</p>
<h3 id="13-重复发明轮子"><a href="#13-重复发明轮子" class="headerlink" title="13.重复发明轮子"></a>13.重复发明轮子</h3><p>Walton相信，虽然“重复发明轮子对于业务来说是有害的”，但它对于学习很有好处。在有些情况下，他建议你自己编写代码，而不是依赖于第三方的代码，因为这一过程将让你学到许多东西。当然这也要看情况而定。</p>
<h3 id="14-将你的经验记录下来"><a href="#14-将你的经验记录下来" class="headerlink" title="14.将你的经验记录下来"></a>14.将你的经验记录下来</h3><p>Walton的最后一条建议是将你所学到的东西用文字记录下来：“按我的经验来看，写作、演讲以及开发demo，这些方法能够迫使我对知识点进行充分的挖掘，并做到从内到外的完全理解。哪怕你写的东西完全没人看，但写作的过程本身就已经值得你付出的努力了。”</p>
<p><a href="https://www.infoq.com/news/2015/08/great-front-end-developer" target="_blank" rel="external">参考链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;成就一名卓越的前端开发者&quot;&gt;&lt;a href=&quot;#成就一名卓越的前端开发者&quot; class=&quot;headerlink&quot; title=&quot;成就一名卓越的前端开发者&quot;&gt;&lt;/a&gt;&lt;center&gt;成就一名卓越的前端开发者&lt;/center&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="技术译文" scheme="https://yanlee26.github.io/categories/%E6%8A%80%E6%9C%AF%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>three学习总结</title>
    <link href="https://yanlee26.github.io/2016/12/24/three/"/>
    <id>https://yanlee26.github.io/2016/12/24/three/</id>
    <published>2016-12-23T23:45:24.000Z</published>
    <updated>2017-07-31T14:25:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><ul>
<li><p>Creating the scene</p>
<blockquote>
<p>想让three展现任何东西，需要三样东西：A scene, a camera, and a renderer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var scene = new THREE.Scene();</div><div class="line">var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );</div><div class="line">//renderer</div><div class="line">var renderer = new THREE.WebGLRenderer();</div><div class="line">renderer.setSize( window.innerWidth, window.innerHeight );</div><div class="line">document.body.appendChild( renderer.domElement );</div><div class="line">//cube</div><div class="line">var geometry = new THREE.BoxGeometry( 1, 1, 1 );</div><div class="line">var material = new THREE.MeshBasicMaterial( &#123; color: 0x00ff00 &#125; );</div><div class="line">var cube = new THREE.Mesh( geometry, material );</div><div class="line">scene.add( cube );</div><div class="line"></div><div class="line">camera.position.z = 5;</div><div class="line">//rendering the scene</div><div class="line">function render() &#123;</div><div class="line">	requestAnimationFrame( render );</div><div class="line">	renderer.render( scene, camera );</div><div class="line">	//Animating the cube</div><div class="line">    cube.rotation.x += 0.1;</div><div class="line">    cube.rotation.y += 0.1;</div><div class="line">    renderer.render(scene, camera);</div><div class="line">&#125;</div><div class="line">render();</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>Detecting WebGL and Browser compatibility</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (Detector.webgl) &#123;</div><div class="line">    init();</div><div class="line">    animate();</div><div class="line">&#125; else &#123;</div><div class="line">    var warning = Detector.getWebGLErrorMessage();</div><div class="line">    document.getElementById(&apos;container&apos;).appendChild(warning);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Drawing lines</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var renderer = new THREE.WebGLRenderer();</div><div class="line">renderer.setSize(window.innerWidth, window.innerHeight);</div><div class="line">document.body.appendChild(renderer.domElement);</div><div class="line"></div><div class="line">var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);</div><div class="line">camera.position.set(0, 0, 100);</div><div class="line">camera.lookAt(new THREE.Vector3(0, 0, 0));</div><div class="line"></div><div class="line">var scene = new THREE.Scene();</div><div class="line">//create a blue LineBasicMaterial</div><div class="line">var material = new THREE.LineBasicMaterial(&#123; color: 0x0000ff &#125;);</div><div class="line">var geometry = new THREE.Geometry();</div><div class="line">geometry.vertices.push(new THREE.Vector3(-10, 0, 0));</div><div class="line">geometry.vertices.push(new THREE.Vector3(0, 10, 0));</div><div class="line">geometry.vertices.push(new THREE.Vector3(10, 0, 0));</div><div class="line"></div><div class="line">var line = new THREE.Line(geometry, material);</div><div class="line">scene.add(line);</div><div class="line">renderer.render(scene, camera);</div></pre></td></tr></table></figure>
</li>
<li><p>Creating Text:很多时候three.js应用程序要用到文字，有以下几种方式可选</p>
<ul>
<li>DOM+CSS</li>
<li>Draw text to canvas and use as a Texture: 在canvas上绘制文本作为质地</li>
<li>Create a model in your favourite 3D application and export to three.js：在3D app中构建并暴露给three</li>
<li>Procedural Text Geometry：文本程序的几何<h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2></li>
</ul>
</li>
<li><p>How to update things</p>
<blockquote>
<p>所有对象若被添加到scene上则默认自动更新它们的矩阵;且可继承</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var object = new THREE.Object3D;</div><div class="line">scene.add( object )</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>Matrix transformations:矩阵变换</p>
<blockquote>
<p>Three利用矩阵3D变换—translations(position),rotations,and scaling。每个3D实例都有一个<br>存储了其位置，旋转及缩放的矩阵。</p>
<h2 id="Building-tools"><a href="#Building-tools" class="headerlink" title="Building tools"></a>Building tools</h2><p>Node环境用通过npm引入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install three --save-dev</div><div class="line">//文件中引入</div><div class="line">var THREE = require(&apos;three&apos;);</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="AnimationAction"><a href="#AnimationAction" class="headerlink" title="AnimationAction"></a>AnimationAction</h3><h3 id="Cameras"><a href="#Cameras" class="headerlink" title="Cameras"></a>Cameras</h3><h3 id="Lights"><a href="#Lights" class="headerlink" title="Lights"></a>Lights</h3><h3 id="Lights-Shadows"><a href="#Lights-Shadows" class="headerlink" title="Lights/Shadows"></a>Lights/Shadows</h3><h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><h3 id="Materials"><a href="#Materials" class="headerlink" title="Materials"></a>Materials</h3><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><h3 id="Renderers"><a href="#Renderers" class="headerlink" title="Renderers"></a>Renderers</h3><h3 id="Renderers-Shaders"><a href="#Renderers-Shaders" class="headerlink" title="Renderers/Shaders"></a>Renderers/Shaders</h3><h3 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating 
    
    </summary>
    
      <category term="three" scheme="https://yanlee26.github.io/categories/three/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>vue(2.0)全家桶 总结及源码分析</title>
    <link href="https://yanlee26.github.io/2016/12/24/vue/"/>
    <id>https://yanlee26.github.io/2016/12/24/vue/</id>
    <published>2016-12-23T19:41:24.000Z</published>
    <updated>2017-08-23T23:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Essentials"><a href="#Essentials" class="headerlink" title="Essentials"></a>Essentials</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><blockquote>
<p>Vue does not support IE8 and below</p>
</blockquote>
<ul>
<li><p>Direct <figure class="highlight plain"><figcaption><span>```Include</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- CDN:[ https://unpkg.com/vue]( https://unpkg.com/vue)</div><div class="line"></div><div class="line">- NPM </div><div class="line"></div><div class="line">``` </div><div class="line">$ npm install vue</div></pre></td></tr></table></figure></p>
</li>
<li><p>CLI </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ npm install --global vue-cli</div><div class="line"># create a new project using the &quot;webpack&quot; template</div><div class="line">$ vue init webpack my-project</div><div class="line"># install dependencies and go!</div><div class="line">$ cd my-project</div><div class="line">$ npm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<h3 id="Runtime-Compiler-vs-Runtime-only"><a href="#Runtime-Compiler-vs-Runtime-only" class="headerlink" title="Runtime+Compiler vs. Runtime-only"></a>Runtime+Compiler vs. Runtime-only</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// this requires the compiler</div><div class="line">new Vue(&#123;</div><div class="line">  template: `&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;`</div><div class="line">&#125;)</div><div class="line">// this does not</div><div class="line">new Vue(&#123;</div><div class="line">  render (h) &#123;</div><div class="line">    return h(&apos;div&apos;, this.hi)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Development-vs-Production-Mode"><a href="#Development-vs-Production-Mode" class="headerlink" title="Development vs. Production Mode"></a>Development vs. Production Mode</h3><blockquote>
<p>开发/生产模式对于UMD构建是硬编码的：未缩小的文件用于开发，缩小的文件用于生产。<br>  CommonJS和ES Module构建是针对捆绑包的，因此我们不为它们提供缩减版本。 你将负责自己最终捆绑。<br>  CommonJS和ES Module构建还保存process.env.NODE_ENV的原始检查以确定它们应该运行的模式。<br>  您应该使用适当的bundler配置来替换这些环境变量，以便控制Vue将运行的模式。替换process.env .NODE_ENV与字符串字面值也允许像UglifyJS这样的缩略器完全删除仅开发的代码块，减少最终文件大小。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Using Webpack DefinePlugin</div><div class="line"> var webpack = require(&apos;webpack&apos;)</div><div class="line"> module.exports = &#123;</div><div class="line">   // ...</div><div class="line">   plugins: [</div><div class="line">     // ...</div><div class="line">     new webpack.DefinePlugin(&#123;</div><div class="line">       &apos;process.env&apos;: &#123;</div><div class="line">         NODE_ENV: JSON.stringify(&apos;production&apos;)</div><div class="line">       &#125;</div><div class="line">     &#125;)</div><div class="line">   ]</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What’s-Vue-js-Vue-is-a-progressive-framework-for-building-user-interfaces"><a href="#What’s-Vue-js-Vue-is-a-progressive-framework-for-building-user-interfaces" class="headerlink" title="What’s Vue.js:Vue is a progressive framework for building user interfaces."></a>What’s Vue.js:Vue is a progressive framework for building user interfaces.</h3><h3 id="Declarative-Rendering-声明式渲染"><a href="#Declarative-Rendering-声明式渲染" class="headerlink" title="Declarative Rendering 声明式渲染"></a>Declarative Rendering 声明式渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">//js</div><div class="line">var app = new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue!&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Conditionals-and-Loops"><a href="#Conditionals-and-Loops" class="headerlink" title="Conditionals and Loops"></a>Conditionals and Loops</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;div id=&quot;app-3&quot;&gt;</div><div class="line">  &lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;app-4&quot;&gt;</div><div class="line">  &lt;ol&gt;</div><div class="line">    &lt;li v-for=&quot;todo in todos&quot;&gt;</div><div class="line">      &#123;&#123; todo.text &#125;&#125;</div><div class="line">    &lt;/li&gt;</div><div class="line">  &lt;/ol&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//js</div><div class="line">var app3 = new Vue(&#123;</div><div class="line">  el: &apos;#app-3&apos;,</div><div class="line">  data: &#123;</div><div class="line">    seen: true</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">var app4 = new Vue(&#123;</div><div class="line">  el: &apos;#app-4&apos;,</div><div class="line">  data: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; text: &apos;Learn JavaScript&apos; &#125;,</div><div class="line">      &#123; text: &apos;Learn Vue&apos; &#125;,</div><div class="line">      &#123; text: &apos;Build something awesome&apos; &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Handling-User-Input"><a href="#Handling-User-Input" class="headerlink" title="Handling User Input"></a>Handling User Input</h3><blockquote>
<p>To let users interact with your app, we can use the v-on directive to attach event<br>listeners that invoke methods on our Vue instances:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app-5&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;app-6&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;input v-model=&quot;message&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//js</div><div class="line">var app5 = new Vue(&#123;</div><div class="line">  el: &apos;#app-5&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue.js!&apos;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    reverseMessage: function () &#123;</div><div class="line">      this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">var app6 = new Vue(&#123;</div><div class="line">  el: &apos;#app-6&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue!&apos;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Composing-with-Components"><a href="#Composing-with-Components" class="headerlink" title="Composing with Components"></a>Composing with Components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//js</div><div class="line">// Define a new component called todo-item</div><div class="line">Vue.component(&apos;todo-item&apos;, &#123;</div><div class="line">  template: &apos;&lt;li&gt;This is a todo&lt;/li&gt;&apos;</div><div class="line">&#125;)</div><div class="line">//html</div><div class="line">&lt;ol&gt;</div><div class="line">  &lt;!-- Create an instance of the todo-item component --&gt;</div><div class="line">  &lt;todo-item&gt;&lt;/todo-item&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>Relation to Custom Elements—区别</p>
</blockquote>
<ol>
<li>Web Components Spec 一直是草案,而Vue components 不依赖任何处理可以工作在任何浏览器(IE9以上)<br>且可嵌入到原生element。</li>
<li>Vue组件提供了在纯自定义元素中不可用的重要功能，最突出的是跨组件数据流，自定义事件通信和构建工具集成。</li>
</ol>
<h2 id="The-Vue-Instance"><a href="#The-Vue-Instance" class="headerlink" title="The Vue Instance"></a>The Vue Instance</h2><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><blockquote>
<p>Although not strictly associated with the MVVM pattern, Vue’s design was partly inspired by it. </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var data = &#123; a: 1 &#125;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: &apos;#example&apos;,</div><div class="line">  data: data</div><div class="line">&#125;)</div><div class="line">vm.$data === data // -&gt; true</div><div class="line">vm.$el === document.getElementById(&apos;example&apos;) // -&gt; true</div><div class="line">// $watch is an instance method</div><div class="line">vm.$watch(&apos;a&apos;, function (newVal, oldVal) &#123;</div><div class="line">  // this callback will be called when `vm.a` changes</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Instance-Lifecycle-Hooks"><a href="#Instance-Lifecycle-Hooks" class="headerlink" title="Instance Lifecycle Hooks"></a>Instance Lifecycle Hooks</h3><p>![<a href="http://vuejs.org/images/lifecycle.png][http://vuejs.org/images/lifecycle.png" target="_blank" rel="external">http://vuejs.org/images/lifecycle.png][http://vuejs.org/images/lifecycle.png</a>]</p>
<h2 id="Template-Syntax"><a href="#Template-Syntax" class="headerlink" title="Template Syntax"></a>Template Syntax</h2><blockquote>
<p>Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM<br>to the underlying Vue instance’s data. All Vue.js templates are valid HTML that can be parsed by<br>spec-compliant browsers and HTML parsers.<br>Under the hood, Vue compiles the templates into Virtual DOM render functions(虚拟DOM渲染函数).<br>Combined with the reactivity system, Vue is able to intelligently figure out the minimal amount of components to<br>re-render and apply the minimal amount of DOM manipulations when the app state changes.</p>
</blockquote>
<h3 id="Interpolations-插值"><a href="#Interpolations-插值" class="headerlink" title="Interpolations(插值)"></a>Interpolations(插值)</h3><ul>
<li><p>Text:<figure class="highlight plain"><figcaption><span>&#123;&#123; msg &#125;&#125;</span> ```</figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Raw HTML:```&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
</li>
<li><p>Attributes:<figure class="highlight plain"><figcaption><span>v-bind:id="dynamicId">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Using JS Expressions:```&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h3 id="Directions—Directives-are-special-attributes-with-the-v-prefix"><a href="#Directions—Directives-are-special-attributes-with-the-v-prefix" class="headerlink" title="Directions—Directives are special attributes with the v- prefix."></a>Directions—Directives are special attributes with the v- prefix.</h3><ul>
<li><p>Arguments:Some directives can take an “argument”, denoted by a colon after the directive name. </p>
<figure class="highlight plain"><figcaption><span>v-on:click="doSomething">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- Modifiers: indicate that a directive should be bound in some special way. </div><div class="line">```  &lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Filters: apply common text formatting.</p>
</li>
</ul>
<blockquote>
<p>Vue 2.x过滤器只能在胡子插值和v绑定表达式（后者自2.1.0以来支持）内使用，因为过滤器主要设计用于文本转换目的。<br> 对于其他指令中更复杂的数据变换，应该使用计算属性。</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line">//js</div><div class="line">new Vue(&#123;</div><div class="line">  // ...</div><div class="line">  filters: &#123;</div><div class="line">    capitalize: function (value) &#123;</div><div class="line">      if (!value) return &apos;&apos;</div><div class="line">      value = value.toString()</div><div class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>Shorthands:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!-- full syntax --&gt;</div><div class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- shorthand --&gt;</div><div class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- full syntax --&gt;</div><div class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- shorthand --&gt;</div><div class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Computed-Properties-and-Watchers"><a href="#Computed-Properties-and-Watchers" class="headerlink" title="Computed Properties and Watchers"></a>Computed Properties and Watchers</h2><h3 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a>Computed Properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">   // a computed getter</div><div class="line">   reversedMessage: function () &#123;</div><div class="line">     // `this` points to the vm instance</div><div class="line">     return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Computed Caching vs Methods: the computed properties are cached based on their dependencies</li>
<li>Computed vs Watched Property:better to use a computed property</li>
<li>Computed Setter:you can provide a setter when you need it:</li>
</ul>
<h3 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h3><blockquote>
<p>when you want to perform asynchronous or expensive operations in response to changing data.</p>
</blockquote>
<h2 id="Class-and-Style-Bindings"><a href="#Class-and-Style-Bindings" class="headerlink" title="Class and Style Bindings"></a>Class and Style Bindings</h2><h3 id="Binding-HTML-Classes"><a href="#Binding-HTML-Classes" class="headerlink" title="Binding HTML Classes"></a>Binding HTML Classes</h3><ul>
<li><p>Object Syntax </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</div><div class="line"> &lt;div class=&quot;static&quot;</div><div class="line">      v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</div><div class="line"> &lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Array Syntax</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;</div><div class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &apos;&apos;, errorClass]&quot;&gt;</div><div class="line">&lt;div v-bind:class=&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>With Components</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;my-component v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/my-component&gt;</div><div class="line">//When isActive is truthy, the rendered HTML will be:</div><div class="line">&lt;p class=&quot;foo bar active&quot;&gt;Hi&lt;/p&gt;</div></pre></td></tr></table></figure>
<h3 id="Binding-Inline-Styles"><a href="#Binding-Inline-Styles" class="headerlink" title="Binding Inline Styles"></a>Binding Inline Styles</h3><ul>
<li>Object Syntax/Array Syntax</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Auto-prefixing:Vue已替你考虑CSS的浏览器兼容性</li>
</ul>
<h2 id="List-Rending"><a href="#List-Rending" class="headerlink" title="List Rending"></a>List Rending</h2><h3 id="v-if-v-else-if"><a href="#v-if-v-else-if" class="headerlink" title="v-if/v-else-if"></a>v-if/v-else-if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</div><div class="line">  A</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</div><div class="line">  B</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</div><div class="line">  C</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div v-else&gt;</div><div class="line">  Not A/B/C</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Controlling Reusable Elements with key</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;template v-if=&quot;loginType === &apos;username&apos;&quot;&gt;</div><div class="line">  &lt;label&gt;Username&lt;/label&gt;</div><div class="line">  &lt;input placeholder=&quot;Enter your username&quot;&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;template v-else&gt;</div><div class="line">  &lt;label&gt;Email&lt;/label&gt;</div><div class="line">  &lt;input placeholder=&quot;Enter your email address&quot;&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<ul>
<li>v-show <figure class="highlight plain"><figcaption><span>v-show="ok">Hello!```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- v-if vs v-show</div><div class="line"></div><div class="line">v-if is “real” conditional rendering because it ensures that event listeners and child components inside the </div><div class="line">conditional block are properly destroyed and re-created during toggles.</div><div class="line"></div><div class="line">v-if is also lazy: if the condition is false on initial render, it will not do anything - the conditional block won’t </div><div class="line">be rendered until the condition becomes true for the first time.</div><div class="line"></div><div class="line">In comparison, v-show is much simpler - the element is always rendered regardless of initial condition, </div><div class="line">with just simple CSS-based toggling.And Please note that v-show doesn’t support the ```&lt;template&gt; ```syntax, </div><div class="line">nor does it work with v-else</div><div class="line"></div><div class="line">Generally speaking, v-if has higher toggle costs while v-show has higher initial render costs. So prefer v-show if </div><div class="line">you need to toggle something very often, and prefer v-if if the condition is unlikely to change at runtime.</div><div class="line"></div><div class="line">- v-if vs v-show:v-for has a higher priority than v-if</div><div class="line"></div><div class="line">## List Rendering</div><div class="line"></div><div class="line">###  v-for:We can use the v-for directive to render a list of items based on an array.</div><div class="line"></div><div class="line">- Basic use</div><div class="line"></div><div class="line">&gt;You can also use of as the delimiter instead of in, so that it is closer to JavaScript’s syntax for iterators:</div></pre></td></tr></table></figure></li>
</ul>
<p>//html</p>
<p><ul id="example-1"><br>  <li v-for="item of items"><br>    <br>  </li><br></ul></p>
<p><ul id="example-2"><br>  <li v-for="(item, index) in items"><br>     -  - <br>  </li><br></ul><br>//js<br>var example1 = new Vue({<br>  el: ‘#example-1’,<br>  data: {<br>    items: [<br>      { message: ‘Foo’ },<br>      { message: ‘Bar’ }<br>    ]<br>  }<br>});<br>var example2 = new Vue({<br>  el: ‘#example-2’,<br>  data: {<br>    parentMessage: ‘Parent’,<br>    items: [<br>      { message: ‘Foo’ },<br>      { message: ‘Bar’ }<br>    ]<br>  }<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Template v-for:```&lt;template v-for=&quot;item in items&quot;&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>Object v-for:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;li v-for=&quot;value in object&quot;&gt;</div><div class="line">//You can also provide a second argument for the key:</div><div class="line">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</div><div class="line">//And another for the index:</div><div class="line">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>When iterating over an object, the order is based on the key enumeration order of Object.keys()</p>
</blockquote>
<p>不保证所有JS引擎里边都表现一致。</p>
<ul>
<li>Range v-for:<figure class="highlight plain"><figcaption><span>v-for="n in 10">&#123;&#123; n &#125;&#125;</span>```</figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Components and v-for:</div></pre></td></tr></table></figure></li>
</ul>
<p><my-component v-for="(item, index) in items" v-bind:item="item" v-bind:index="index" v-bind:key="item.id"><br></my-component><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; In 2.2.0+, when using v-for with a component, a key is now required.It is recommended to provide a key with v-for whenever possible</div><div class="line"></div><div class="line">###  Array Change Detection</div><div class="line"></div><div class="line">- Mutation Methods:突变方法</div><div class="line">    + push()</div><div class="line">    + pop()</div><div class="line">    + shift()</div><div class="line">    + unshift()</div><div class="line">    + splice()</div><div class="line">    + sort()</div><div class="line">    + reverse()</div><div class="line">- Replacing an Array:  do not mutate the original array but always return a new array</div><div class="line">    + filter()</div><div class="line">    + concat()</div><div class="line">    + slice()</div></pre></td></tr></table></figure></p>
<p>example1.items = example1.items.filter(function (item) {<br>  return item.message.match(/Foo/)<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- Caveats:Due to limitations in JavaScript, Vue cannot detect the following changes to an array:</div><div class="line">  + When you directly set an item with the index, e.g. vm.items[indexOfItem] = newValue</div></pre></td></tr></table></figure></p>
<p>// Vue.set<br>Vue.set(example1.items, indexOfItem, newValue)<br>// Array.prototype.splice`<br>example1.items.splice(indexOfItem, 1, newValue)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  + When you modify the length of the array, e.g. vm.items.length = newLength</div><div class="line"></div><div class="line">```example1.items.splice(newLength)</div></pre></td></tr></table></figure></p>
<h3 id="Displaying-Filtered-Sorted-Results"><a href="#Displaying-Filtered-Sorted-Results" class="headerlink" title="Displaying Filtered/Sorted Results"></a>Displaying Filtered/Sorted Results</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//create a computed property </div><div class="line">&lt;li v-for=&quot;n in evenNumbers&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class="line">// use a method where computed properties are not feasible (e.g. inside nested v-for loops):</div><div class="line">&lt;li v-for=&quot;n in even(numbers)&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div></pre></td></tr></table></figure>
<h2 id="Event-Handing"><a href="#Event-Handing" class="headerlink" title="Event Handing"></a>Event Handing</h2><h3 id="Listening-to-Events-use-the-v-on-directive"><a href="#Listening-to-Events-use-the-v-on-directive" class="headerlink" title="Listening to Events:use the v-on directive"></a>Listening to Events:use the v-on directive</h3><figure class="highlight plain"><figcaption><span>v-on:click="counter += 1">Add 1```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Method Event Handlers:when event handlers are more complex</div><div class="line"></div><div class="line">```&lt;button v-on:click=&quot;counter += 1&quot;&gt;Add 1&lt;/button&gt;</div></pre></td></tr></table></figure>
<h3 id="Methods-in-Inline-Handlers"><a href="#Methods-in-Inline-Handlers" class="headerlink" title="Methods in Inline Handlers"></a>Methods in Inline Handlers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</div><div class="line">//Sometimes we also need to access the original DOM event in an inline statement handler. </div><div class="line">&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt;Submit&lt;/button&gt;</div><div class="line">//js</div><div class="line">methods: &#123;</div><div class="line">  warn: function (message, event) &#123;</div><div class="line">    // now we have access to the native event</div><div class="line">    if (event) event.preventDefault()</div><div class="line">    alert(message)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Event-Modifiers-To-address-the-problem-of-purely-dealing-with-data-logic-rather-than-DOM-event-details"><a href="#Event-Modifiers-To-address-the-problem-of-purely-dealing-with-data-logic-rather-than-DOM-event-details" class="headerlink" title="Event Modifiers:To address the problem of purely dealing with data logic rather than  DOM event details"></a>Event Modifiers:To address the problem of purely dealing with data logic rather than  DOM event details</h3><ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
<li>.once:New in 2.1.4</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- the click event&apos;s propagation will be stopped --&gt;</div><div class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- the submit event will no longer reload the page --&gt;</div><div class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</div><div class="line">&lt;!-- modifiers can be chained --&gt;</div><div class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</div><div class="line">&lt;!-- just the modifier --&gt;</div><div class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</div><div class="line">&lt;!-- use capture mode when adding the event listener --&gt;</div><div class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- only trigger handler if event.target is the element itself --&gt;</div><div class="line">&lt;!-- i.e. not from a child element --&gt;</div><div class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;!-- the click event will be triggered at most once --&gt;</div><div class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="Key-Modifiers-Modifier-Keys"><a href="#Key-Modifiers-Modifier-Keys" class="headerlink" title="Key Modifiers/Modifier Keys"></a>Key Modifiers/Modifier Keys</h3><h2 id="Form-Input-Bindings"><a href="#Form-Input-Bindings" class="headerlink" title="Form Input Bindings"></a>Form Input Bindings</h2><h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><ul>
<li>Text <figure class="highlight plain"><figcaption><span>v-model="message" placeholder="edit me">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Multiline text</div></pre></td></tr></table></figure></li>
</ul>
<p>//Interpolation on textareas (<textarea></textarea>) won’t work. Use v-model instead.</p>
<p><textarea v-model="message" placeholder="add multiple lines"></textarea><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Checkbox ```&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>Radio <figure class="highlight plain"><figcaption><span>type="radio" id="one" v-model="picked">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Select:</div></pre></td></tr></table></figure></li>
</ul>
<p>//Single select</p>
<select v-model="selected"><br>//Multiple select<br></select><select v-model="selected" multiple><br><option v-for="option in options" v-bind:value="option.value"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Value Bindings</div><div class="line"></div><div class="line">&gt;For radio, checkbox and select options, the v-model binding values are usually static strings (or booleans for checkbox):</div><div class="line">We can use v-bind to bind the value to a dynamic property on the Vue instance.</div></pre></td></tr></table></figure><br><br><!-- `picked` is a string "a" when checked --><br></option></select><input type="radio" v-model="picked" value="a"><br><!-- `toggle` is either true or false --><br><input type="checkbox" v-model="toggle"><br><!-- `selected` is a string "abc" when selected --><br><select v-model="selected"><br><option value="abc">ABC</option><br></select>

<p><input type="checkbox" v-model="toggle" v-bind:true-value="a" v-bind:false-value="b"><br>// when checked:<br>vm.toggle === vm.a<br>// when unchecked:<br>vm.toggle === vm.b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Modifiers</div><div class="line"></div><div class="line">- .lazy```&lt;input v-model.lazy=&quot;msg&quot; &gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>.number <figure class="highlight plain"><figcaption><span>v-model.number="age" type="number">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- .trim ```&lt;input v-model.trim=&quot;msg&quot;&gt;</div></pre></td></tr></table></figure></li>
</ul>
<h3 id="v-model-with-Components"><a href="#v-model-with-Components" class="headerlink" title="v-model with Components"></a>v-model with Components</h3><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Using-Components"><a href="#Using-Components" class="headerlink" title="Using Components"></a>Using Components</h3><ul>
<li>Registration</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.component(&apos;my-component&apos;, &#123;</div><div class="line">  // options</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>Local Registration</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var Child = &#123;</div><div class="line">  template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;</div><div class="line">&#125;</div><div class="line">new Vue(&#123;</div><div class="line">  // ...</div><div class="line">  components: &#123;</div><div class="line">    // &lt;my-component&gt; will only be available in parent&apos;s template</div><div class="line">    &apos;my-component&apos;: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>DOM Template Parsing Caveats</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//A workaround is to use the is special attribute:</div><div class="line">&lt;table&gt;</div><div class="line">  &lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<ul>
<li>data Must Be a Function</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data: function () &#123;</div><div class="line">    return data</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Composing Components</li>
</ul>
<p>![<a href="http://vuejs.org/images/props-events.png][http://vuejs.org/images/props-events.png" target="_blank" rel="external">http://vuejs.org/images/props-events.png][http://vuejs.org/images/props-events.png</a>]</p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><ul>
<li>Passing Data with Props</li>
</ul>
<blockquote>
<p>Every component instance has its own isolated scope. Data can be passed down to child components using props.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line">&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</div><div class="line">//js</div><div class="line">Vue.component(&apos;child&apos;, &#123;</div><div class="line">  // declare the props</div><div class="line">  props: [&apos;message&apos;],</div><div class="line">  // just like data, the prop can be used inside templates</div><div class="line">  // and is also made available in the vm as this.message</div><div class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>Dynamic Props</li>
</ul>
<figure class="highlight plain"><figcaption><span>:my-message="parentMsg">```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Literal vs Dynamic</div></pre></td></tr></table></figure>
<p>//初学者常犯的错误是试图利用仔面了语法传值。<br><!-- this passes down a plain string "1" --></p>
<p><comp some-prop="1"></comp><br>//事实上，若想传值我们需要用v-bind以便值被认定为JS表达式<br><!-- this passes down an actual number --></p>
<p><comp v-bind:some-prop="1"></comp><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- One-Way Data Flow</div><div class="line"></div><div class="line">&gt; 注意对象和数组在JS中是按引用传递的，故当prop是对象或数组时改变子组件数据会影响父组件状态</div></pre></td></tr></table></figure></p>
<p>/<em>1. Define a local data property that uses the prop’s initial value as its initial value:<br>定义一个利用props值作为初始值的本地数据属性</em>/<br>props: [‘initialCounter’],<br>data: function () {<br>  return { counter: this.initialCounter }<br>}<br>/<em>2.Define a computed property that is computed from the prop’s value:<br>定义一个将props值计算过的计算属性
</em>/<br>props: [‘size’],<br>computed: {<br>  normalizedSize: function () {<br>    return this.size.trim().toLowerCase()<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Prop Validation</div></pre></td></tr></table></figure></p>
<p>Vue.component(‘example’, {<br>  props: {<br>    // basic type check (<code>null</code> means accept any type)<br>    propA: Number,<br>    // multiple possible types<br>    propB: [String, Number],<br>    // a required string<br>    propC: {<br>      type: String,<br>      required: true<br>    },<br>    // a number with default value<br>    propD: {<br>      type: Number,<br>      default: 100<br>    },<br>    // object/array defaults should be returned from a<br>    // factory function<br>    propE: {<br>      type: Object,<br>      default: function () {<br>        return { message: ‘hello’ }<br>      }<br>    },<br>    // custom validator function<br>    propF: {<br>      validator: function (value) {<br>        return value &gt; 10<br>      }<br>    }<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">###  Custom Events</div><div class="line"></div><div class="line">&gt; 父组件可以像子组件单向传递数据，反之呢？此即custom events应用之处。</div><div class="line">注意事件系统，Vue的独立于浏览器的即便看起来很像；不能利用$on监听子组件事件分发，必须在template上直接用</div><div class="line">v-on，见如下实例</div><div class="line">- Using v-on with Custom Events</div><div class="line">    + Listen to an event using $on(eventName)</div><div class="line">    + Trigger an event using $emit(eventName)</div></pre></td></tr></table></figure></p>
<p><div id="counter-event-example"><br>  <p></p><br>  <button-counter v-on:increment="incrementTotal"></button-counter><br>  <button-counter v-on:increment="incrementTotal"></button-counter><br></div><br>//js<br>Vue.component(‘button-counter’, {<br>  template: ‘<button v-on:click="increment"></button>‘,<br>  data: function () {<br>    return {<br>      counter: 0<br>    }<br>  },<br>  methods: {<br>    increment: function () {<br>      this.counter += 1<br>      this.$emit(‘increment’)<br>    }<br>  },<br>})<br>new Vue({<br>  el: ‘#counter-event-example’,<br>  data: {<br>    total: 0<br>  },<br>  methods: {<br>    incrementTotal: function () {<br>      this.total += 1<br>    }<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- Binding Native Events to Components</div></pre></td></tr></table></figure></p>
<p><my-component v-on:click.native="doTheThing"></my-component><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Form Input Components using Custom Events</div></pre></td></tr></table></figure></p>
<p><input v-model="something"><br>//is just syntactic sugar for:</p>
<p><input v-bind:value="something" v-on:input="something = $event.target.value"><br>//When used with a component, this simplifies to:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Customizing Component v-model:New in 2.2.0</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><my-checkbox v-model="foo" value="some value"></my-checkbox>//or</p>
<p><my-checkbox :checked="foo" @change="val => { foo = val }" value="some value"><br></my-checkbox><br>//js<br>Vue.component(‘my-checkbox’, {<br>  model: {<br>    prop: ‘checked’,<br>    event: ‘change’<br>  },<br>  props: {<br>    // this allows using the <code>value</code> prop for a different purpose<br>    value: String<br>  },<br>  // …<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Non Parent-Child Communication</div></pre></td></tr></table></figure></p>
<p>var bus = new Vue()<br>// in component A’s method<br>bus.$emit(‘id-selected’, 1)<br>// in component B’s created hook<br>bus.$on(‘id-selected’, function (id) {<br>  // …<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Content Distribution with Slots</div><div class="line"></div><div class="line">###  Dynamic Components</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><keep-alive><br>  <component :is="currentView"><br>    <!-- inactive components will be cached! --><br>  </component><br></keep-alive><br>//js<br>var vm = new Vue({<br>  el: ‘#example’,<br>  data: {<br>    currentView: ‘home’<br>  },<br>  components: {<br>    home: { /<em> … </em>/ },<br>    posts: { /<em> … </em>/ },<br>    archive: { /<em> … </em>/ }<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Misc</div><div class="line"></div><div class="line">- Authoring Reusable Components</div><div class="line"></div><div class="line">&gt;The API for a Vue component comes in three parts - props, events, and slots:</div><div class="line">    </div><div class="line">    + Props :allow the external environment to pass data into the component</div><div class="line">        允许外部环境向组件内传数据</div><div class="line">    + Events :allow the component to trigger side effects in the external environment</div><div class="line">        允许组件触发边际响应到外部环境</div><div class="line">    + Slots :allow the external environment to compose the component with extra content.</div><div class="line">        允许外部环境用额外内容完善组件</div></pre></td></tr></table></figure></p>
<p><my-component :foo="baz" :bar="qux" @event-a="doThis" @event-b="doThat"><br>  <img slot="icon" src="..."><br>  <p slot="main-text">Hello!</p><br></my-component><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Child Component Refs:directly access a child component in JS.</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><div id="parent"><br>  <user-profile ref="profile"></user-profile><br></div><br>//js<br>var parent = new Vue({ el: ‘#parent’ })<br>// access child component instance<br>var child = parent.$refs.profile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 小心坑：$refs are only populated after the component has been rendered, and it is not reactive. </div><div class="line">It is only meant as an escape hatch for direct child manipulation - you should avoid using $refs in templates or computed properties.</div><div class="line"></div><div class="line">- Async Components</div></pre></td></tr></table></figure></p>
<p>Vue.component(‘async-example’, function (resolve, reject) {<br>  setTimeout(function () {<br>    // Pass the component definition to the resolve callback<br>    resolve({<br>      template: ‘<div>I am async!</div>‘<br>    })<br>  }, 1000)<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Component Naming Conventions</div><div class="line">- Recursive(递归) Components</div><div class="line">- Circular References Between Components</div><div class="line">- Inline Templates</div><div class="line">- X-Templates</div><div class="line">- Cheap Static Components with v-once</div><div class="line"></div><div class="line"># Advanced</div><div class="line"></div><div class="line">## Reactivity in </div><div class="line"></div><div class="line">&gt; Models are just plain JavaScript objects. When you modify them, the view updates. It makes state management very</div><div class="line"> simple and intuitive, but it’s also important to understand how it works to avoid some common gotchas. </div><div class="line">模型层(model)只是普通 JavaScript 对象，修改它则更新视图(view)。这会让状态管理变得非常简单且直观</div><div class="line"></div><div class="line">### How Changes Are Tracked</div><div class="line"></div><div class="line">&gt; 把一个普通 Javascript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty </div><div class="line">把这些属性全部转为 getter/setter。</div><div class="line"></div><div class="line">![https://vuefe.cn/images/data.png][https://vuefe.cn/images/data.png]</div><div class="line"></div><div class="line">###  Change Detection Caveats 变化检测局限</div><div class="line"></div><div class="line">&gt; Vue cannot detect property addition or deletion.Since Vue performs the getter/setter conversion process</div><div class="line"> during instance initialization, a property must be present in the data object in order for Vue to convert it and make it reactive.</div></pre></td></tr></table></figure></p>
<p>var vm = new Vue({<br>  data: {<br>    a: 1<br>  }<br>})<br>// <code>vm.a</code> is now reactive<br>vm.b = 2<br>// <code>vm.b</code> is NOT reactive<br>Vue.set(vm.someObject, ‘b’, 2);<br>//<br>this.$set(this.someObject, ‘b’, 2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Declaring Reactive Properties</div><div class="line"></div><div class="line">###  Async Update Queue</div><div class="line"></div><div class="line">&gt; Vue performs DOM updates asynchronously. Whenever a data change is observed, </div><div class="line">it will open a queue and buffer all the data changes that happen in the same event loop.</div><div class="line"> Internally Vue tries native Promise.then </div><div class="line"> and MutationObserver for the asynchronous queuing and falls back to setTimeout(fn, 0).</div><div class="line">- In order to wait until Vue.js has finished updating the DOM after a data change, you can use Vue.nextTick(callback) immediately after the data is changed.</div></pre></td></tr></table></figure></p>
<p>Vue.component(‘example’, {<br>  template: ‘<span></span>‘,<br>  data: function () {<br>    return {<br>      message: ‘not updated’<br>    }<br>  },<br>  methods: {<br>    updateMessage: function () {<br>      this.message = ‘updated’<br>      console.log(this.$el.textContent) // =&gt; ‘not updated’<br>      this.$nextTick(function () {<br>        console.log(this.$el.textContent) // =&gt; ‘updated’<br>      })<br>    }<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## Transition Effects</div><div class="line"></div><div class="line">&gt; Vue provides a variety of ways to apply transition effects when items are inserted, updated, or removed from the DOM. This includes tools to:</div><div class="line">  - automatically apply classes for CSS transitions and animations</div><div class="line">  - integrate 3rd-party CSS animation libraries, such as Animate.css</div><div class="line">  - use JavaScript to directly manipulate the DOM during transition hooks</div><div class="line">  - integrate 3rd-party JavaScript animation libraries, such as Velocity.js</div><div class="line"></div><div class="line">###  Transitioning Single Elements/Components</div><div class="line"></div><div class="line">- transitions for any element or component in the following contexts:</div><div class="line">    + Conditional rendering (using v-if)</div><div class="line">    + Conditional display (using v-show)</div><div class="line">    + Dynamic components</div><div class="line">    + Component root nodes</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><div id="demo"><br>  <button v-on:click="show = !show"><br>    Toggle<br>  </button><br>  <transition name="fade"><br>    <p v-if="show">hello</p><br>  </transition><br></div><br>//js<br>new Vue({<br>  el: ‘#demo’,<br>  data: {<br>    show: true<br>  }<br>})<br>//css<br>.fade-enter-active, .fade-leave-active {<br>  transition: opacity .5s<br>}<br>.fade-enter, .fade-leave-to /<em> .fade-leave-active in &lt;2.1.8 </em>/ {<br>  opacity: 0<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Transition Classes</div><div class="line">    1. v-enter</div><div class="line">    2. v-enter-active</div><div class="line">    3. v-enter-to</div><div class="line">    4. v-leave</div><div class="line">    5. v-leave-active</div><div class="line">    6. v-leave-to</div><div class="line"></div><div class="line">- CSS Transitions</div><div class="line"></div><div class="line">&gt; One of the most common transition types uses CSS transitions</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><div id="example-1"><br>  <button @click="show = !show"><br>    Toggle render<br>  </button><br>  <transition name="slide-fade"><br>    <p v-if="show">hello</p><br>  </transition><br></div><br>//js<br>new Vue({<br>  el: ‘#example-1’,<br>  data: {<br>    show: true<br>  }<br>})<br>//css<br>/<em> Enter and leave animations can use different </em>/<br>/<em> durations and timing functions.              </em>/<br>.slide-fade-enter-active {<br>  transition: all .3s ease;<br>}<br>.slide-fade-leave-active {<br>  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>}<br>.slide-fade-enter, .slide-fade-leave-to<br>/<em> .slide-fade-leave-active for &lt;2.1.8 </em>/ {<br>  transform: translateX(10px);<br>  opacity: 0;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- CSS Animations</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><div id="example-2"><br>  <button @click="show = !show">Toggle show</button><br>  <transition name="bounce"><br>    <p v-if="show">Look at me!</p><br>  </transition><br></div><br>//js<br>new Vue({<br>  el: ‘#example-2’,<br>  data: {<br>    show: true<br>  }<br>})<br>//css<br>.bounce-enter-active {<br>  animation: bounce-in .5s;<br>}<br>.bounce-leave-active {<br>  animation: bounce-out .5s;<br>}<br>@keyframes bounce-in {<br>  0% {<br>    transform: scale(0);<br>  }<br>  50% {<br>    transform: scale(1.5);<br>  }<br>  100% {<br>    transform: scale(1);<br>  }<br>}<br>@keyframes bounce-out {<br>  0% {<br>    transform: scale(1);<br>  }<br>  50% {<br>    transform: scale(1.5);<br>  }<br>  100% {<br>    transform: scale(0);<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Custom Transition Classes</div><div class="line">    + enter-class</div><div class="line">    + enter-active-class</div><div class="line">    + enter-to-class (&gt;= 2.1.8 only)</div><div class="line">    + leave-class</div><div class="line">    + leave-active-class</div><div class="line">    + leave-to-class (&gt;= 2.1.8 only)</div><div class="line">- Using Transitions and Animations Together</div><div class="line">- Explicit Transition Durations:显式转换持续时间</div><div class="line">- JS Hooks</div><div class="line"></div><div class="line">###  Transitions on Initial Render</div><div class="line"></div><div class="line">###  Transitioning Between Elements</div><div class="line"></div><div class="line">- Transition Modes</div><div class="line"></div><div class="line">###  Transitioning Between Components</div><div class="line"></div><div class="line">## Transitioning State</div><div class="line"></div><div class="line">&gt; Vue’s transition system offers many simple ways to animate entering, </div><div class="line">leaving, and lists, but what about animating your data itself? For example: </div><div class="line">    </div><div class="line">    - numbers and calculations</div><div class="line">    - colors displayed</div><div class="line">    - the positions of SVG nodes</div><div class="line">    - the sizes and other properties of elements</div><div class="line"></div><div class="line">## Render Functions</div><div class="line"></div><div class="line">###  Basic</div><div class="line"></div><div class="line">&gt; Vue推荐用template构建html在多数场景。当真需要JS的全编程能力时再用render函数--一个接近编译器的可选的template.</div></pre></td></tr></table></figure></p>
<p>//小示例<br>Vue.component(‘anchored-heading’, {<br>  render: function (createElement) {<br>    return createElement(<br>      ‘h’ + this.level,   // tag name<br>      this.$slots.default // array of children<br>    )<br>  },<br>  props: {<br>    level: {<br>      type: Number,<br>      required: true<br>    }<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* Much simpler! Sort of. The code is shorter, but also requires greater familiarity with Vue instance properties. </div><div class="line"></div><div class="line">###  createElement Arguments</div></pre></td></tr></table></figure></p>
<p>// @returns {VNode}<br>createElement(<br>  // {String | Object | Function}<br>  // An HTML tag name, component options, or function<br>  // returning one of these. Required.<br>  ‘div’,<br>  // {Object}<br>  // A data object corresponding to the attributes<br>  // you would use in a template. Optional.<br>  {<br>    // (see details in the next section below)<br>  },<br>  // {String | Array}<br>  // Children VNodes. Optional.<br>  [<br>    createElement(‘h1’, ‘hello world’),<br>    createElement(MyComponent, {<br>      props: {<br>        someProp: ‘foo’<br>      }<br>    }),<br>    ‘bar’<br>  ]<br>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- The Data Object In-Depth</div></pre></td></tr></table></figure></p>
<p>{<br>  // Same API as <code>v-bind:class</code><br>  ‘class’: {<br>    foo: true,<br>    bar: false<br>  },<br>  // Same API as <code>v-bind:style</code><br>  style: {<br>    color: ‘red’,<br>    fontSize: ‘14px’<br>  },<br>  // Normal HTML attributes<br>  attrs: {<br>    id: ‘foo’<br>  },<br>  // Component props<br>  props: {<br>    myProp: ‘bar’<br>  },<br>  // DOM properties<br>  domProps: {<br>    innerHTML: ‘baz’<br>  },<br>  // Event handlers are nested under “on”, though<br>  // modifiers such as in v-on:keyup.enter are not<br>  // supported. You’ll have to manually check the<br>  // keyCode in the handler instead.<br>  on: {<br>    click: this.clickHandler<br>  },<br>  // For components only. Allows you to listen to<br>  // native events, rather than events emitted from<br>  // the component using vm.$emit.<br>  nativeOn: {<br>    click: this.nativeClickHandler<br>  },<br>  // Custom directives. Note that the binding’s<br>  // oldValue cannot be set, as Vue keeps track<br>  // of it for you.<br>  directives: [<br>    {<br>      name: ‘my-custom-directive’,<br>      value: ‘2’<br>      expression: ‘1 + 1’,<br>      arg: ‘foo’,<br>      modifiers: {<br>        bar: true<br>      }<br>    }<br>  ],<br>  // Scoped slots in the form of<br>  // { name: props =&gt; VNode | Array<vnode> }<br>  scopedSlots: {<br>    default: props =&gt; createElement(‘span’, props.text)<br>  },<br>  // The name of the slot, if this component is the<br>  // child of another component<br>  slot: ‘name-of-slot’<br>  // Other special top-level properties<br>  key: ‘myKey’,<br>  ref: ‘myRef’<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- Constraints: VNodes Must Be Unique</div><div class="line"></div><div class="line">###  Replacing Template Features with Plain JavaScript</div><div class="line"></div><div class="line">- v-if and v-for</div></pre></td></tr></table></figure></vnode></p>
<p>render: function (createElement) {<br>  if (this.items.length) {<br>    return createElement(‘ul’, this.items.map(function (item) {<br>      return createElement(‘li’, item.name)<br>    }))<br>  } else {<br>    return createElement(‘p’, ‘No items found.’)<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- v-model:There is no direct v-model counterpart in render functions - you will have to implement the logic yourself:</div></pre></td></tr></table></figure></p>
<p>render: function (createElement) {<br>  var self = this<br>  return createElement(‘input’, {<br>    domProps: {<br>      value: self.value<br>    },<br>    on: {<br>      input: function (event) {<br>        self.value = event.target.value<br>      }<br>    }<br>  })<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Event &amp; Key Modifiers</div><div class="line"></div><div class="line">- Slots</div><div class="line"></div><div class="line">###  JSX</div></pre></td></tr></table></figure></p>
<p>import AnchoredHeading from ‘./AnchoredHeading.vue’<br>new Vue({<br>  el: ‘#demo’,<br>  render (h) {<br>    return (<br>      <anchoredheading level="{1}"><br>        <span>Hello</span> world!<br>      </anchoredheading><br>    )<br>  }<br>})</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">###  Functional Components</div><div class="line"></div><div class="line">&gt; The anchored heading component we created earlier is relatively simple. It doesn’t manage any state, watch any </div><div class="line">state passed to it, and it has no lifecycle methods. Really, it’s just a function with some props.</div><div class="line">In cases like this, we can mark components as functional, which means that they’re stateless (no data) </div><div class="line">and instanceless (no this context). A functional component looks like this:</div></pre></td></tr></table></figure>
<p>Vue.component(‘my-component’, {<br>  functional: true,<br>  // To compensate for the lack of an instance,<br>  // we are now provided a 2nd context argument.<br>  render: function (createElement, context) {<br>    // …<br>  },<br>  // Props are optional<br>  props: {<br>    // …<br>  }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- slots() vs children</div><div class="line"></div><div class="line">## Custom Directives</div><div class="line"></div><div class="line">###  Intro</div><div class="line"></div><div class="line">&gt;In addition to the default set of directives shipped in core (v-model and v-show), Vue also allows you to register </div><div class="line">your own custom directives.</div><div class="line"></div><div class="line">###  Hook Functions:A directive definition object can provide several hook functions (all optional):</div><div class="line"></div><div class="line">- bind:called only once, when the directive is first bound to the element</div><div class="line">- inserted:called when the bound element has been inserted into its parent node</div><div class="line">- update:called after the containing component has updated, but possibly before its children have updated.</div><div class="line">- componentUpdated:called after the containing component and its children have updated.</div><div class="line">- unbind:called only once, when the directive is unbound from the element.</div><div class="line"></div><div class="line">###  Directive Hook Arguments</div><div class="line"></div><div class="line">&gt; Directive hooks are passed these arguments:</div><div class="line"></div><div class="line">- el:The element the directive is bound to. This can be used to directly manipulate the DOM.</div><div class="line">- binding:An object containing the following properties.</div><div class="line">    + name:The name of the directive, without the v- prefix.</div><div class="line">    + value: The value passed to the directive(v-my-directive=&quot;1 + 1&quot;)</div><div class="line">    + oldValue:The previous value, only available in update and componentUpdated. </div><div class="line">    + expression:he expression of the binding as a string(v-my-directive=&quot;1 + 1&quot;,).</div><div class="line">    + arg:he argument passed to the directive, if any(v-my-directive:foo).</div><div class="line">    + modifiers:n object containing modifiers, if any(v-my-directive.foo.bar, the modifiers object would be &#123; foo: true, bar: true &#125;).</div><div class="line">- vnode:The virtual node produced by Vue’s compiler. </div><div class="line">- oldVnode:The previous virtual node, only available in the update and componentUpdated hooks.</div></pre></td></tr></table></figure></p>
<p>//html</p>
<p><div id="hook-arguments-example" v-demo:foo.a.b="message"></div><br>//js<br>Vue.directive(‘demo’, {<br>  bind: function (el, binding, vnode) {<br>    var s = JSON.stringify<br>    el.innerHTML =<br>      ‘name: ‘       + s(binding.name) + ‘<br>‘ +<br>      ‘value: ‘      + s(binding.value) + ‘<br>‘ +<br>      ‘expression: ‘ + s(binding.expression) + ‘<br>‘ +<br>      ‘argument: ‘   + s(binding.arg) + ‘<br>‘ +<br>      ‘modifiers: ‘  + s(binding.modifiers) + ‘<br>‘ +<br>      ‘vnode keys: ‘ + Object.keys(vnode).join(‘, ‘)<br>  }<br>})<br>new Vue({<br>  el: ‘#hook-arguments-example’,<br>  data: {<br>    message: ‘hello!’<br>  }<br>});<br>/<em><br>name:”demo”<br>value:”hello!”<br>expression:”message”<br>argument:”foo”<br>modifiers:{“a”:true,”b”:true}<br>vnode keys:tag,data,children,elem,ns,context<br>functionalContext,key,componentOptions,componentInstance,parent,<br>raw,isStatic,isRootInsert,isComent,isCloned,isOnce
</em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Function Shorthand</div><div class="line"></div><div class="line">###  Object Literals</div><div class="line"></div><div class="line">&gt;如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法类型的 Javascript 表达式。</div><div class="line"></div><div class="line">## Mixins</div><div class="line"></div><div class="line">###  Basics</div><div class="line"></div><div class="line">&gt;Mixins are a flexible way to distribute reusable functionalities for Vue components.</div><div class="line"> A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be </div><div class="line"> “mixed” into the component’s own options.</div></pre></td></tr></table></figure></p>
<p>// define a mixin object<br>var myMixin = {<br>  created: function () {<br>    this.hello()<br>  },<br>  methods: {<br>    hello: function () {<br>      console.log(‘hello from mixin!’)<br>    }<br>  }<br>}<br>// define a component that uses this mixin<br>var Component = Vue.extend({<br>  mixins: [myMixin]<br>})<br>var component = new Component() // -&gt; “hello from mixin!”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">###  Option Merging</div><div class="line"></div><div class="line">###  Global Mixin</div><div class="line"></div><div class="line">&gt;Use global mixins sparsely and carefully, </div><div class="line">because it affects every single Vue instance created, including third party components.</div><div class="line"></div><div class="line">###  Custom Option Merge Strategies</div><div class="line"></div><div class="line">## Plugins</div><div class="line"></div><div class="line">## Single File Components</div><div class="line"></div><div class="line">&gt; 在JS只用于增强相应view的中小型项目中传统写法凑效，在更复杂的项目或者前端完全由JS驱动，如下特色将会彰显</div><div class="line">- Global definitions force unique names for every component</div><div class="line">- String templates lack syntax highlighting and require ugly slashes for multiline HTML</div><div class="line">- No CSS support means that while HTML and JavaScript are modularized into components, CSS is conspicuously left out</div><div class="line">- No build step restricts us to HTML and ES5 JavaScript, rather than preprocessors like Pug (formerly Jade) and Babel</div><div class="line">All of these are solved by single-file components with a .vue extension, made possible with build tools such as Webpack or Browserify.</div><div class="line"></div><div class="line">## Production Deployment Tips：生产环境部署</div><div class="line"></div><div class="line">###  Turn on Production Mode</div><div class="line"></div><div class="line">- Without Build Tools ```vue.min.js</div></pre></td></tr></table></figure></p>
<ul>
<li>With Build Tools<blockquote>
<p>When using a build tool like Webpack or Browserify, the production mode will be determined by process.env.NODE_ENV<br>inside Vue’s source code, and it will be in development mode by default.</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">module.exports = &#123;</div><div class="line">  // ...</div><div class="line">  plugins: [</div><div class="line">    // ...</div><div class="line">    new webpack.DefinePlugin(&#123;</div><div class="line">      &apos;process.env&apos;: &#123;</div><div class="line">        NODE_ENV: &apos;&quot;production&quot;&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Pre-Compiling-Templates"><a href="#Pre-Compiling-Templates" class="headerlink" title="Pre-Compiling Templates"></a>Pre-Compiling Templates</h3><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><h2 id="State-Management"><a href="#State-Management" class="headerlink" title="State Management"></a>State Management</h2><blockquote>
<p>Large applications can often grow in complexity, due to multiple pieces of state scattered across many<br>components and the interactions between them. To solve this problem, Vue offers vuex: </p>
</blockquote>
<p>![<a href="http://vuejs.org/images/state.png][http://vuejs.org/images/state.png" target="_blank" rel="external">http://vuejs.org/images/state.png][http://vuejs.org/images/state.png</a>]</p>
<h2 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h2><h2 id="Server-Side-Rendering"><a href="#Server-Side-Rendering" class="headerlink" title="Server-Side Rendering"></a>Server-Side Rendering</h2><h2 id="TypeScript-Surport"><a href="#TypeScript-Surport" class="headerlink" title="TypeScript Surport"></a>TypeScript Surport</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Essentials&quot;&gt;&lt;a href=&quot;#Essentials&quot; class=&quot;headerlink&quot; title=&quot;Essentials&quot;&gt;&lt;/a&gt;Essentials&lt;/h1&gt;&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installat
    
    </summary>
    
      <category term="vue" scheme="https://yanlee26.github.io/categories/vue/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>php get started</title>
    <link href="https://yanlee26.github.io/2016/11/04/php/"/>
    <id>https://yanlee26.github.io/2016/11/04/php/</id>
    <published>2016-11-03T23:25:10.000Z</published>
    <updated>2017-08-24T13:30:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。</p>
</blockquote>
<ul>
<li><p>php 是什么</p>
<ul>
<li><p>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p>
</li>
<li><p>PHP 脚本在服务器上执行。</p>
</li>
<li><p>PHP 可免费下载使用。</p>
</li>
</ul>
</li>
<li>PHP 文件是什么？<ul>
<li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</li>
<li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li>
<li>PHP 文件的默认文件扩展名是 “.php”</li>
</ul>
</li>
<li>PHP 能做什么？<ul>
<li>PHP 可以生成动态页面内容</li>
<li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li>
<li>PHP 可以收集表单数据</li>
<li>PHP 可以发送和接收 cookies</li>
<li>PHP 可以添加、删除、修改您的数据库中的数据</li>
<li>PHP 可以限制用户访问您的网站上的一些页面</li>
<li>PHP 可以加密数据</li>
</ul>
</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// PHP 代码</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=5;</div><div class="line">$y=6;</div><div class="line">$z=$x+$y;</div><div class="line">echo $z;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>PHP 变量规则：<ul>
<li>变量以 $ 符号开始，后面跟着变量的名称</li>
<li>变量名必须以字母或者下划线字符开始</li>
<li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li>
<li>变量名不能包含空格</li>
<li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li>
</ul>
</li>
<li>PHP 是一门弱类型语言</li>
<li>PHP 变量作用域<ul>
<li>local</li>
<li>global(函数内访问全局变量)</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$x=5;</div><div class="line">$y=10;</div><div class="line"></div><div class="line">function myTest()</div><div class="line">&#123;</div><div class="line">global $x,$y;</div><div class="line">$y=$x+$y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myTest();</div><div class="line">echo $y; // 输出 15</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>static(保证函数内变量执行完后不被删除)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">function myTest()</div><div class="line">&#123;</div><div class="line">static $x=0;</div><div class="line">echo $x;</div><div class="line">$x++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myTest();</div><div class="line">myTest();</div><div class="line">myTest();</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>parameter(通过调用代码将值传递给函数的局部变量)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">function myTest($x)</div><div class="line">&#123;</div><div class="line">echo $x;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myTest(5);</div><div class="line"></div><div class="line">?&gt;</div><div class="line">```	</div><div class="line"></div><div class="line"># PHP 5 echo 和 print 语句</div><div class="line"># 数据类型</div><div class="line">- String</div><div class="line">- Integer</div><div class="line">- Float</div><div class="line">- Boolean</div><div class="line">- Array</div><div class="line">- Object</div><div class="line">- NULL</div><div class="line"></div><div class="line"># 常量</div></pre></td></tr></table></figure>
<p>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )<br>```</p>
<ul>
<li>该函数有三个参数:<ul>
<li>name：必选参数，常量名称，即标志符。</li>
<li>value：必选参数，常量的值。</li>
<li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li>
</ul>
</li>
</ul>
<h1 id="超级全局变量-系统中自带的变量，在一个脚本的全部作用域中都可用。"><a href="#超级全局变量-系统中自带的变量，在一个脚本的全部作用域中都可用。" class="headerlink" title="超级全局变量(系统中自带的变量，在一个脚本的全部作用域中都可用。)"></a>超级全局变量(系统中自带的变量，在一个脚本的全部作用域中都可用。)</h1><ul>
<li>PHP 超级全局变量列表:<ul>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ul>
</li>
</ul>
<h1 id="条件，循环，选择，数组，函数-类JS"><a href="#条件，循环，选择，数组，函数-类JS" class="headerlink" title="条件，循环，选择，数组，函数(类JS)"></a>条件，循环，选择，数组，函数(类JS)</h1><h1 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h1><blockquote>
<p>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。</p>
</blockquote>
<ul>
<li><strong>LINE</strong> : 文件中的当前行号</li>
<li><strong>FILE</strong> : 文件的完整路径和文件名</li>
<li><strong>DIR</strong> : 文件所在的目录</li>
<li><strong>FUNCTION</strong> : 函数名称</li>
<li><strong>CLASS</strong> : 返回该类被定义时的名字</li>
<li><strong>TRAIT</strong> : Trait 名包括其被声明的作用区域</li>
<li><strong>METHOD</strong> : 返回该方法被定义时的名字（区分大小写）</li>
<li><strong>NAMESPACE</strong>: 当前命名空间的名称（区分大小写）</li>
</ul>
<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>PHP 命名空间可以解决以下两类问题：</p>
<ol>
<li><p>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</p>
</li>
<li><p>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</p>
</li>
</ol>
<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><ul>
<li><p>类 − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</p>
</li>
<li><p>对象 − 是类的实例。</p>
</li>
<li><p>成员变量 − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</p>
</li>
<li><p>成员函数 − 定义在类的内部，可用于访问对象的数据。</p>
</li>
<li><p>继承 − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</p>
</li>
<li><p>父类 − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</p>
</li>
<li><p>子类 − 一个类继承其他类称为子类，也可称为派生类。</p>
</li>
<li><p>多态 − 多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</p>
</li>
<li><p>重载 − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p>
</li>
<li><p>抽象性 − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</p>
</li>
<li><p>封装 − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</p>
</li>
<li><p>构造函数 − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p>
</li>
<li><p>析构函数 − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="php" scheme="https://yanlee26.github.io/categories/php/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Node7.7.2--explore</title>
    <link href="https://yanlee26.github.io/2016/11/01/node/"/>
    <id>https://yanlee26.github.io/2016/11/01/node/</id>
    <published>2016-11-01T13:05:24.000Z</published>
    <updated>2017-08-23T23:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Node是一个基于Chrome的V8JS引擎的JS运行时。Node运用事件驱动(event-driven)，非阻塞I/O模型(non-blocking I/O)使其轻量和高效。Node的包管理器npm，是世界上生态系统最大的开源库。</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>作为异步事件驱动的JS运行时，Node旨在构建大型网络应用。如下示例中，可以并发(concurrently)处理很多连接。每次连接中，回调都被触发(fired)，但如果没有事做Node保持休眠。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line">const hostname = &apos;127.0.0.1&apos;;</div><div class="line">const port = 3000;</div><div class="line">const server = http.createServer((req, res) =&gt; &#123;</div><div class="line">  res.statusCode = 200;</div><div class="line">  res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;);</div><div class="line">  res.end(&apos;Hello World\n&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, hostname, () =&gt; &#123;</div><div class="line">  console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这点与当今使用OS线程(OS threads)的更常见并发模型对比鲜明。基于线程(Thread-based)的网络相对低效且难以使用。<br>此外，Node的用户不必担心死锁(dead-locking)过程因为压根没有。几乎没有函数在Node中直接执行I/O<br>所以进程永不阻塞。因此，大规模系统在Node中可以非常合理地开发。</p>
<p>Node设计上类似Ruby的Event Machine或Python的Twisted等系统。Node在事件模型( event model)上更进一步。<br>它提供一个事件循环(event loop)而非库(library)作为运行时的构建(runtime construct)。其它系统中事件循<br>环启动之初经常存在阻塞的调用(blocking call)。通常行为(behavior)通过脚本起初的回调来定义,且最终通过启动一个阻塞<br>的回调(如EventMachine::run())启动一个服务。在Node中不存在如此的start-the-event-loop调用。Node中执行了<br>输入脚本便直接进入事件循环。当没有更多回调去执行时，Node存在event loop；此举正如浏览器JS—event loop对用户隐藏。</p>
<p>HTTP是Node中的头等公民，设计时考虑流和低延迟。这使得Node非常适合于Web库或框架的基础。</p>
<p>只因Node旨在无线程，并非不能利用环境中的多核。子进程可以过使用我们的child_process.fork（）API生成，并且设计为<br>易于与之通信。基于同一接口的是集群模块，它允许您在进程之间共享套接字，以便通过内核实现负载平衡。</p>
<h2 id="Node-js-v7-7-2-Documentation"><a href="#Node-js-v7-7-2-Documentation" class="headerlink" title="Node.js v7.7.2 Documentation"></a>Node.js v7.7.2 Documentation</h2><blockquote>
<p>Throughout the documentation, you will see indications of a section’s stability.<br> The Node.js API is still somewhat changing, and as it matures, certain parts are more reliable than others.<br>Some are so proven, and so relied upon, that they are unlikely to ever change at all. Others are brand new and<br>experimental, or known to be hazardous and in the process of being redesigned.</p>
</blockquote>
<p>用法和示例：</p>
<figure class="highlight plain"><figcaption><span>[options] [v8 options] [script.js | -e "script"] [arguments]```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Assertion Testing断言测试</div><div class="line"></div><div class="line">&gt; Node内置模块，用于断言。若表达式不符预期则抛出错误。种类很多但常用的只有几种。</div><div class="line"></div><div class="line">- assert(value[, message])</div></pre></td></tr></table></figure>
<p>var assert = require(‘assert’);<br>assert(true);// OK<br>assert(1);// OK<br>assert(false);// throws “AssertionError: false == true”<br>assert(false==0);// OK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- assert.deepEqual(actual, expected[, message])</div></pre></td></tr></table></figure></p>
<p>const assert = require(‘assert’);</p>
<p>const o1 = {<br>  a: {<br>    b: 1<br>  }<br>};<br>const o2 = {<br>  a: {<br>    b: 2<br>  }<br>};<br>const o3 = {<br>  a: {<br>    b: 1<br>  }<br>};<br>const o4 = Object.create(o1);</p>
<p>assert.deepEqual(o1, o1); //OK<br>assert.deepEqual(o1, o2); // AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }<br>// values of b are different<br>assert.deepEqual(o1, o3); //OK<br>assert.deepEqual(o1, o4); // AssertionError: { a: { b: 1 } } deepEqual {}<br>// Prototypes are ignored<br>assert.deepEqual(o1, o4.<strong>proto</strong>); //OK</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- assert.deepStrictEqual(actual, expected[, message])</div></pre></td></tr></table></figure>
<p>assert.deepEqual({a:1}, {a:’1’});// OK, because 1 == ‘1’<br>assert.deepStrictEqual({a:1}, {a:’1’});// because 1 !== ‘1’ using strict equality<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- assert.doesNotThrow(block[, error][, message])</div><div class="line"></div><div class="line">- assert.equal(actual, expected[, message])</div></pre></td></tr></table></figure></p>
<p>//相当于==<br>assert.equal(1, 1);// OK, 1 == 1<br>assert.equal(1, ‘1’);// OK, 1 == ‘1’<br>assert.equal(1, 2);// AssertionError: 1 == 2<br>assert.equal({a: {b: 1}}, {a: {b: 1}});//AssertionError: { a: { b: 1 } } == { a: { b: 1 } }<br>{a:{b:1}}=={a:{b:1}};//false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- assert.fail(actual, expected, message, operator)</div><div class="line">- assert.ifError(value)</div><div class="line">- assert.notDeepEqual(actual, expected[, message])</div><div class="line">- assert.notDeepStrictEqual(actual, expected[, message])</div><div class="line">- assert.notEqual(actual, expected[, message])</div><div class="line">- assert.notStrictEqual(actual, expected[, message])</div><div class="line">- assert.ok(value[, message])</div><div class="line">- assert.strictEqual(actual, expected[, message])</div><div class="line"></div><div class="line">### Buffer </div><div class="line"></div><div class="line">&gt; 在ES6引入TypedArray之前，JS中只有字符串数据类型，没有二进制数据类型；JS比较擅长字符串处理但处理二进制数据(比如TCP数据)就不足。</div><div class="line">在Node中，定义了一个Buffer类，用于专门存放二进制文件的缓冲区，及方法处理，可以全局访问。Node中Buffer类是随Node内核</div><div class="line">一起发布的核心库，为Node提供了一种存储原始数据的方法，可以处理二进制数据，每当需要在Node</div><div class="line">中处理I/O操作中移动的数据时，就有可能使用。原始数据存放在Buffer类的实例中，一个Buffer类似于</div><div class="line">一个整数数组，但对于V8堆内存之外的一块原始内存。</div><div class="line"></div><div class="line">- 与TypedArray关系</div><div class="line"></div><div class="line">&gt;TypedArray构造函数可以接受Buffer实例作为参数生成一个二进制数组.二进制数组的操作，与Buffer对象的操作基本上是兼容的，只有轻微的差异。比如，二进制数组的slice方法返回原内存的拷贝，而Buffer对象的slice方法创造原内存的一个视图（view）。</div><div class="line"></div><div class="line">- 示例</div></pre></td></tr></table></figure>
<p>// Creates a zero-filled Buffer of length 10.<br>const buf1 = Buffer.alloc(10);</p>
<p>// Creates a Buffer of length 10, filled with 0x1.<br>const buf2 = Buffer.alloc(10, 1);</p>
<p>// Creates an uninitialized buffer of length 10.<br>// This is faster than calling Buffer.alloc() but the returned<br>// Buffer instance might contain old data that needs to be<br>// overwritten using either fill() or write().<br>const buf3 = Buffer.allocUnsafe(10);</p>
<p>// Creates a Buffer containing [0x1, 0x2, 0x3].<br>const buf4 = Buffer.from([1, 2, 3]);</p>
<p>// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].<br>const buf5 = Buffer.from(‘tést’);</p>
<p>// Creates a Buffer containing Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].<br>const buf6 = Buffer.from(‘tést’, ‘latin-1’);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- 类的方法</div><div class="line"></div><div class="line">    + Buffer.isEncoding():返回一个布尔值，表征是否为指定编码</div><div class="line"></div><div class="line">    ```Buffer.isEncoding(&apos;utf8&apos;)</div></pre></td></tr></table></figure>
<pre><code>+ Buffer.isBuffer():接受一个对象为参数，表征是否为Buffer实例

<figure class="highlight plain"><figcaption><span>// false ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ Buffer.byteLength():返回字符串实际占据的字节长度</div><div class="line">```Buffer.byteLength(&apos;Hello&apos;, &apos;utf8&apos;) // 5</div></pre></td></tr></table></figure>

+ Buffer.concat()

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var i1 = new Buffer(&apos;Hello&apos;);</div><div class="line">var i2 = new Buffer(&apos; &apos;);</div><div class="line">var i3 = new Buffer(&apos;World&apos;);</div><div class="line">Buffer.concat([i1, i2, i3], 10).toString()</div><div class="line">// &apos;Hello Worl&apos;</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>实例方法</p>
<ul>
<li><p>write()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var buf = new Buffer(5);</div><div class="line">buf.write(&apos;He&apos;);</div><div class="line">buf.write(&apos;l&apos;, 2);</div><div class="line">buf.write(&apos;lo&apos;, 3);</div><div class="line">console.log(buf.toString());</div><div class="line">// &quot;Hello&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>slice()</p>
</li>
<li>toString()</li>
<li>toJSON()</li>
</ul>
</li>
</ul>
<h3 id="C-C-Addons-插件"><a href="#C-C-Addons-插件" class="headerlink" title="C/C++ Addons 插件"></a>C/C++ Addons 插件</h3><blockquote>
<p>Node.js 插件是用 C 或 C++ 编写的动态链接共享对象，可以使用 require() 函数加载到 Node.js 中，且像普通的<br>Node.js 模块一样被使用。 它们主要用于为运行于 Node.js 的 JavaScript 和 C/C++ 库之间提供接口。</p>
</blockquote>
<ul>
<li>Hello world<ul>
<li>Building</li>
<li>Linking to Node.js’ own dependencies</li>
<li>Loading Addons using require()</li>
</ul>
</li>
<li>Native Abstractions for Node.js</li>
<li>Addon examples<ul>
<li>Function arguments</li>
<li>Callbacks</li>
<li>Object factory</li>
<li>Function factory</li>
<li>Wrapping C++ objects</li>
<li>Factory of wrapped objects</li>
<li>Passing wrapped objects around</li>
<li>AtExit hooks<ul>
<li>void AtExit(callback, args)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Child-Process"><a href="#Child-Process" class="headerlink" title="Child Process"></a>Child Process</h3><blockquote>
<p>默认情况下，在 Node.js 的父进程和衍生的子进程之间会建立 stdin、stdout 和 stderr 的管道。<br>这使得数据可以以非阻塞的方式在这些管道流通。 注意，有些程序会在内部使用行缓冲 I/O。 虽然这并不影响 Node.js，但这意味着发送到子过程的数据可能无法被立即消费。</p>
</blockquote>
<h3 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster(集群)"></a>Cluster(集群)</h3><h3 id="Command-Line-Options"><a href="#Command-Line-Options" class="headerlink" title="Command Line Options"></a>Command Line Options</h3><ul>
<li><p>Synopsis</p>
</li>
<li><p>Options</p>
<ul>
<li>-v, –version</li>
<li>-h, –help</li>
<li>-e, –eval “script”</li>
<li>-p, –print “script”</li>
<li>-c, –check</li>
<li>-i, –interactive</li>
<li>-r, –require module</li>
<li>–no-deprecation</li>
<li>–trace-deprecation</li>
<li>–throw-deprecation</li>
<li>–no-warnings</li>
<li>–trace-warnings</li>
<li>–trace-sync-io</li>
<li>–trace-events-enabled</li>
<li>–trace-event-categories</li>
<li>–zero-fill-buffers</li>
<li>–preserve-symlinks</li>
<li>–track-heap-objects</li>
<li>–prof-process</li>
<li>–v8-options</li>
<li>–tls-cipher-list=list</li>
<li>–enable-fips</li>
<li>–force-fips</li>
<li>–openssl-config=file</li>
<li>–use-openssl-ca, –use-bundled-ca</li>
<li>–icu-data-dir=file</li>
</ul>
</li>
<li><p>Environment Variables</p>
</li>
</ul>
<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><blockquote>
<p>console 模块提供了一个简单的调试控制台，它与 Web 浏览器提供的 JavaScript 控制台的机制类似。</p>
</blockquote>
<ul>
<li>Class: Console<ul>
<li>new Console(stdout[, stderr])</li>
<li>console.assert(value[, message][, …args])</li>
<li>console.dir(obj[, options])</li>
<li>console.error([data][, …args])</li>
<li>console.info([data][, …args])</li>
<li>console.log([data][, …args])</li>
<li>console.time(label)</li>
<li>console.timeEnd(label)</li>
<li>console.trace([message][, …args])</li>
<li>console.warn([data][, …args])</li>
</ul>
</li>
</ul>
<h3 id="Crypto-加密"><a href="#Crypto-加密" class="headerlink" title="Crypto(加密)"></a>Crypto(加密)</h3><ul>
<li>Determining if crypto support is unavailable</li>
<li>Class: Certificate<ul>
<li>new crypto.Certificate()</li>
<li>certificate.exportChallenge(spkac)</li>
<li>certificate.exportPublicKey(spkac)</li>
<li>certificate.verifySpkac(spkac)</li>
</ul>
</li>
<li>Class: Cipher<ul>
<li>cipher.final([output_encoding])</li>
<li>cipher.setAAD(buffer)</li>
<li>cipher.getAuthTag()</li>
<li>cipher.setAutoPadding(auto_padding=true)</li>
<li>cipher.update(data[, input_encoding][, output_encoding])</li>
</ul>
</li>
<li>Class: Decipher<ul>
<li>decipher.final([output_encoding])</li>
<li>decipher.setAAD(buffer)</li>
<li>decipher.setAuthTag(buffer)</li>
<li>decipher.setAutoPadding(auto_padding=true)</li>
<li>decipher.update(data[, input_encoding][, output_encoding])</li>
</ul>
</li>
<li>Class: DiffieHellman<ul>
<li>diffieHellman.computeSecret(other_public_key[, input_encoding][, output_encoding])</li>
<li>diffieHellman.generateKeys([encoding])</li>
<li>diffieHellman.getGenerator([encoding])</li>
<li>diffieHellman.getPrime([encoding])</li>
<li>diffieHellman.getPrivateKey([encoding])</li>
<li>diffieHellman.getPublicKey([encoding])</li>
<li>diffieHellman.setPrivateKey(private_key[, encoding])</li>
<li>diffieHellman.setPublicKey(public_key[, encoding])</li>
<li>diffieHellman.verifyError</li>
</ul>
</li>
<li>Class: ECDH<ul>
<li>ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])</li>
<li>ecdh.generateKeys([encoding[, format]])</li>
<li>ecdh.getPrivateKey([encoding])</li>
<li>ecdh.getPublicKey([encoding[, format]])</li>
<li>ecdh.setPrivateKey(private_key[, encoding])</li>
<li>ecdh.setPublicKey(public_key[, encoding])</li>
</ul>
</li>
<li>Class: Hash<ul>
<li>hash.digest([encoding])</li>
<li>hash.update(data[, input_encoding])</li>
</ul>
</li>
<li>Class: Hmac<ul>
<li>hmac.digest([encoding])</li>
<li>hmac.update(data[, input_encoding])</li>
</ul>
</li>
<li>Class: Sign<ul>
<li>sign.sign(private_key[, output_format])</li>
<li>sign.update(data[, input_encoding])</li>
</ul>
</li>
<li>Class: Verify<ul>
<li>verifier.update(data[, input_encoding])</li>
<li>verifier.verify(object, signature[, signature_format])<br>crypto module methods and properties</li>
<li>crypto.constants</li>
<li>crypto.DEFAULT_ENCODING</li>
<li>crypto.fips</li>
<li>crypto.createCipher(algorithm, password)</li>
<li>crypto.createCipheriv(algorithm, key, iv)</li>
<li>crypto.createCredentials(details)</li>
<li>crypto.createDecipher(algorithm, password)</li>
<li>crypto.createDecipheriv(algorithm, key, iv)</li>
<li>crypto.createDiffieHellman(prime[, prime_encoding][, generator][, generator_encoding])</li>
<li>crypto.createDiffieHellman(prime_length[, generator])</li>
<li>crypto.createECDH(curve_name)</li>
<li>crypto.createHash(algorithm)</li>
<li>crypto.createHmac(algorithm, key)</li>
<li>crypto.createSign(algorithm)</li>
<li>crypto.createVerify(algorithm)</li>
<li>crypto.getCiphers()</li>
<li>crypto.getCurves()</li>
<li>crypto.getDiffieHellman(group_name)</li>
<li>crypto.getHashes()</li>
<li>crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</li>
<li>crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)</li>
<li>crypto.privateDecrypt(private_key, buffer)</li>
<li>crypto.privateEncrypt(private_key, buffer)</li>
<li>crypto.publicDecrypt(public_key, buffer)</li>
<li>crypto.publicEncrypt(public_key, buffer)</li>
<li>crypto.randomBytes(size[, callback])</li>
<li>crypto.setEngine(engine[, flags])</li>
<li>crypto.timingSafeEqual(a, b)</li>
</ul>
</li>
<li>Notes<ul>
<li>Legacy Streams API (pre Node.js v0.10)</li>
<li>Recent ECDH Changes</li>
<li>Support for weak or compromised algorithms</li>
</ul>
</li>
<li>Crypto Constants<ul>
<li>OpenSSL Options</li>
<li>OpenSSL Engine Constants</li>
<li>Other OpenSSL Constants</li>
<li>Node.js Crypto Constants</li>
</ul>
</li>
</ul>
<h3 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h3><blockquote>
<p>Node.js 包含一个进程外的调试工具，可以通过基于 TCP 的协议和内置调试客户端访问。</p>
</blockquote>
<figure class="highlight plain"><figcaption><span>node debug main.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt; Debugger listening on 127.0.0.1:5858</div><div class="line">connecting to 127.0.0.1:5858 ... ok</div><div class="line">break in D:\me\webpack\webpack-demo\main.js:1</div><div class="line">&gt; 1 var x = 5;</div><div class="line">  2 setTimeout(() =&gt; &#123;</div><div class="line">  3     debugger;</div><div class="line">debug&gt; cont</div><div class="line">&lt; hello</div><div class="line">break in D:\me\webpack\webpack-demo\main.js:3</div><div class="line">  1 var x = 5;</div><div class="line">  2 setTimeout(() =&gt; &#123;</div><div class="line">&gt; 3     debugger;</div><div class="line">  4     console.log(&apos;world&apos;);</div><div class="line">  5 &#125;, 1000);</div><div class="line">debug&gt; next</div><div class="line">break in D:\me\webpack\webpack-demo\main.js:4</div><div class="line">  2 setTimeout(() =&gt; &#123;</div><div class="line">  3     debugger;</div><div class="line">&gt; 4     console.log(&apos;world&apos;);</div><div class="line">  5 &#125;, 1000);</div><div class="line">  6 console.log(&apos;hello&apos;);</div><div class="line">debug&gt; quit</div></pre></td></tr></table></figure>
<ul>
<li>Watchers</li>
<li>Command reference<ul>
<li>Stepping</li>
<li>Breakpoints</li>
<li>Information</li>
<li>Execution control</li>
<li>Various</li>
</ul>
</li>
<li>Advanced Usage</li>
<li>V8 Inspector Integration for Node.js</li>
</ul>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul>
<li>dns.getServers()</li>
<li>dns.lookup(hostname[, options], callback)<br>Supported getaddrinfo flags</li>
<li>dns.lookupService(address, port, callback)</li>
<li>dns.resolve(hostname[, rrtype], callback)</li>
<li>dns.resolve4(hostname[, options], callback)</li>
<li>dns.resolve6(hostname[, options], callback)</li>
<li>dns.resolveCname(hostname, callback)</li>
<li>dns.resolveNaptr(hostname, callback)</li>
<li>dns.resolveNs(hostname, callback)</li>
<li>dns.resolvePtr(hostname, callback)</li>
<li>dns.resolveSoa(hostname, callback)</li>
<li>dns.resolveSrv(hostname, callback)</li>
<li>dns.resolveTxt(hostname, callback)</li>
<li>dns.reverse(ip, callback)</li>
<li>dns.setServers(servers)</li>
<li>Error codes</li>
<li>Implementation considerations<ul>
<li>dns.lookup()</li>
<li>dns.resolve(), dns.resolve*() and dns.reverse()</li>
</ul>
</li>
</ul>
<h3 id="Domain-deprecated"><a href="#Domain-deprecated" class="headerlink" title="Domain(deprecated)"></a>Domain(deprecated)</h3><h3 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h3><ul>
<li>Error Propagation and Interception<ul>
<li>Node.js style callbacks</li>
</ul>
</li>
<li>Class: Error<ul>
<li>new Error(message)</li>
<li>Error.captureStackTrace(targetObject[,constructorOpt])</li>
<li>Error.stackTraceLimit</li>
<li>error.message</li>
<li>error.stack</li>
</ul>
</li>
<li>Class: RangeError</li>
<li>Class: ReferenceError</li>
<li>Class: SyntaxError</li>
<li>Class: TypeError</li>
<li>Exceptions vs. Errors</li>
<li>System Errors<ul>
<li>Class: System Error<ul>
<li>error.code</li>
<li>error.errno</li>
<li>error.syscall</li>
<li>error.path</li>
<li>error.address</li>
<li>error.port</li>
</ul>
</li>
<li>Common System Errors</li>
</ul>
</li>
</ul>
<blockquote>
<p>Node是单线程运行环境，一旦抛出异常未被捕获便引起整个进程崩溃，一般有三种方法传播一个错误。</p>
</blockquote>
<ul>
<li>throw抛出异常</li>
</ul>
<blockquote>
<p>最常用，但无法捕获异步运行代码抛出的异常。</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">    try &#123;</div><div class="line">      process.nextTick(() =&gt; &#123;</div><div class="line">        throw new Error(&apos;error&apos;)</div><div class="line">      &#125;);</div><div class="line">    &#125; catch (err) &#123;</div><div class="line">      //can not catch it</div><div class="line">      concole.log(err);</div><div class="line">    &#125;   </div><div class="line">    try &#123;</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        throw new Error(&apos;error&apos;)</div><div class="line">      &#125;, 10)</div><div class="line">    &#125; catch (err) &#123;</div><div class="line">      //can not catch it</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line">//   使用process.nextTick和setTimeout在下一轮事件循环抛出两个异常代表一步操作错误，均无法被catch捕获，因catch已运行结束 </div><div class="line">//解决方案之一：将错误代码也放到异步执行</div><div class="line">    function async(cb, err) &#123;</div><div class="line">      setTimeout(function() &#123;</div><div class="line">        try &#123;</div><div class="line">          if (true)</div><div class="line">            throw new Error(&quot;woops!&quot;);</div><div class="line">          else</div><div class="line">            cb(&quot;done&quot;);</div><div class="line">        &#125; catch(e) &#123;</div><div class="line">          err(e);</div><div class="line">        &#125;</div><div class="line">      &#125;, 2000)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    async(function(res) &#123;</div><div class="line">      console.log(&quot;received:&quot;, res);</div><div class="line">    &#125;, function(err) &#123;</div><div class="line">      console.log(&quot;Error: async threw an exception:&quot;, err);</div><div class="line">    &#125;);</div><div class="line">    // Error: async threw an exception: Error: woops!Node很少用此方法，如JSON.parse时</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>将error对象传递给回调函数，发出错误</li>
</ul>
<blockquote>
<p>Node将错误对象作为首个参数传入回调函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.readFile(&apos;/foo.txt&apos;, function(err, data) &#123;</div><div class="line">  if (err !== null) throw err;</div><div class="line">  console.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>通过EventEmitter接口，发出error事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">var emitter = new EventEmitter();</div><div class="line">emitter.emit(&apos;error&apos;, new Error(&apos;something bad happened&apos;));</div><div class="line">//如果没有对error事件部署监听函数，会导致整个应用程序崩溃。所以，一般总是必须同时部署下面的代码。</div><div class="line">emitter.on(&apos;error&apos;, function(err) &#123;</div><div class="line">  console.error(&apos;出错：&apos; + err.message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>uncaughtException事件</li>
</ul>
<blockquote>
<p>异常未被捕获便触发</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var logger = require(&apos;tracer&apos;).console();</div><div class="line">process.on(&apos;uncaughtException&apos;, function(err) &#123;</div><div class="line">  console.error(&apos;Error caught in uncaughtException event:&apos;, err);</div><div class="line">  //uncaughtException触发后，最好记录错误日志，然后结束Node进程</div><div class="line">  logger.log(err);</div><div class="line">  process.exit(1);</div><div class="line">&#125;);</div><div class="line">try &#123;</div><div class="line">  setTimeout(function()&#123;</div><div class="line">    throw new Error(&quot;error&quot;);</div><div class="line">  &#125;,1);</div><div class="line">&#125; catch (err) &#123;</div><div class="line">  //can not catch it</div><div class="line">  console.log(err);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>unhandledRejection事件</li>
</ul>
<h3 id="Events模块"><a href="#Events模块" class="headerlink" title="Events模块"></a>Events模块</h3><blockquote>
<p>回调函数让Node可以处理异步操作，但其只能有开始和结束两种状态。对于多状态的异步操作，Node<br>提供EventEmitter接口，通过事件解决多状态异步操作响应问题。</p>
</blockquote>
<ul>
<li>概述</li>
</ul>
<blockquote>
<p>EventEmitter是event模块提供的一个接口，可以在任何对象上部署。</p>
</blockquote>
<ul>
<li>Passing arguments and this to listeners</li>
<li>Asynchronous vs. Synchronous</li>
<li>Handling events only once</li>
<li>Error events</li>
<li>Class: EventEmitter<ul>
<li>Event: ‘newListener’</li>
<li>Event: ‘removeListener’</li>
<li>EventEmitter.defaultMaxListeners</li>
<li>emitter.addListener(eventName, listener)</li>
<li>emitter.emit(eventName[, …args])</li>
<li>emitter.eventNames()</li>
<li>emitter.getMaxListeners()</li>
<li>emitter.listenerCount(eventName)</li>
<li>emitter.listeners(eventName)</li>
<li>emitter.on(eventName, listener)</li>
<li>emitter.once(eventName, listener)</li>
<li>emitter.prependListener(eventName, listener)</li>
<li>emitter.prependOnceListener(eventName, listener)</li>
<li>emitter.removeAllListeners([eventName])</li>
<li>emitter.removeListener(eventName, listener)</li>
<li>emitter.setMaxListeners(n)</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">var emitter = new EventEmitter();</div><div class="line">//事件发生器的实例方法用on监听事件，然后emit用来发出事件。</div><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">var emitter = new EventEmitter();</div><div class="line"></div><div class="line">emitter.on(&apos;event1&apos;, () =&gt; console.log(&apos;event1 has occred&apos;));</div><div class="line">emitter.on(&apos;event2&apos;, () =&gt; console.log(&apos;event2 has occred&apos;));</div><div class="line">//EventEmitter对象的事件触发和监听是同步的</div><div class="line">console.log(&apos;start&apos;);</div><div class="line">emitter.emit(&apos;event1&apos;);</div><div class="line">emitter.emit(&apos;event2&apos;);</div><div class="line">console.log(&apos;end&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>EventEmitter接口的部署</li>
</ul>
<blockquote>
<p>Event Emitter 接口可以部署在任意对象上，使得这些对象也能订阅和发布消息。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">var util = require(&apos;util&apos;);</div><div class="line"></div><div class="line">function Dog(name) &#123;</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Dog.prototype.__proto__ = EventEmitter.prototype;</div><div class="line">//Dog.prototype=Object.create(EventEmitter.prototype);</div><div class="line">util.inherits(Dog, EventEmitter);//利用内置继承</div><div class="line"></div><div class="line">var haha = new Dog(&apos;haha&apos;);</div><div class="line">haha.on(&apos;bark&apos;, function() &#123;</div><div class="line">  console.log(this.name + &apos; barked...&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">haha.emit(&apos;bark&apos;);</div><div class="line">//hahabarked...</div></pre></td></tr></table></figure>
<ul>
<li>Event Emitter实例方法<ul>
<li>emitter.on(name, f) 对事件name指定监听函数f</li>
<li>emitter.addListener(name, f) addListener是on方法的别名</li>
<li>emitter.once(name, f) 与on方法类似，但是监听函数f是一次性的，使用后自动移除</li>
<li>emitter.listeners(name) 返回一个数组，成员是事件name所有监听函数</li>
<li>emitter.removeListener(name, f) 移除事件name的监听函数f(具名函数)</li>
<li>emitter.setMaxListeners(num) Node默认允许同一个事件最多可以指定10个回调函数。移除num个事件</li>
<li>emitter.removeAllListeners(name) 移除事件name的所有监听函数</li>
<li>emitter.listeners(f) 返回该事件所有回调函数组成的数组</li>
</ul>
</li>
<li>错误捕获：事件处理过程中抛出的错误可用try-catch捕获</li>
<li>事件类型： Events模块默认支持两个事件<ul>
<li>newListener事件：添加新的回调函数时触发。</li>
<li>removeListener事件：移除回调时触发。</li>
</ul>
</li>
</ul>
<h3 id="File-System"><a href="#File-System" class="headerlink" title="File System"></a>File System</h3><blockquote>
<p>Node提供一组类似UNIX(POSIX)标准的文件操作API</p>
</blockquote>
<ul>
<li>Buffer API</li>
<li>Class: fs.FSWatcher<ul>
<li>Event: ‘change’</li>
<li>Event: ‘error’</li>
<li>watcher.close()</li>
</ul>
</li>
<li>Class: fs.ReadStream<ul>
<li>Event: ‘close’</li>
<li>Event: ‘open’</li>
<li>readStream.bytesRead</li>
<li>readStream.path</li>
</ul>
</li>
<li>Class: fs.Stats<ul>
<li>Stat Time Values</li>
</ul>
</li>
<li>Class: fs.WriteStream<ul>
<li>Event: ‘close’</li>
<li>Event: ‘open’</li>
<li>writeStream.bytesWritten</li>
<li>writeStream.path</li>
</ul>
</li>
<li>fs.access(path[, mode], callback)</li>
<li>fs.accessSync(path[, mode])</li>
<li>fs.appendFile(file, data[, options], - callback)</li>
<li>fs.appendFileSync(file, data[, options])</li>
<li>fs.chmod(path, mode, callback)</li>
<li>fs.chmodSync(path, mode)</li>
<li>fs.chown(path, uid, gid, callback)</li>
<li>fs.chownSync(path, uid, gid)</li>
<li>fs.close(fd, callback)</li>
<li>fs.closeSync(fd)</li>
<li>fs.constants</li>
<li>fs.createReadStream(path[, options])</li>
<li>fs.createWriteStream(path[, options])</li>
<li>fs.existsSync(path)</li>
<li>fs.fchmod(fd, mode, callback)</li>
<li>fs.fchmodSync(fd, mode)</li>
<li>fs.fchown(fd, uid, gid, callback)</li>
<li>fs.fchownSync(fd, uid, gid)</li>
<li>fs.fdatasync(fd, callback)</li>
<li>fs.fdatasyncSync(fd)</li>
<li>fs.fstat(fd, callback)</li>
<li>fs.fstatSync(fd)</li>
<li>fs.fsync(fd, callback)</li>
<li>fs.fsyncSync(fd)</li>
<li>fs.ftruncate(fd, len, callback)</li>
<li>fs.ftruncateSync(fd, len)</li>
<li>fs.futimes(fd, atime, mtime, callback)</li>
<li>fs.futimesSync(fd, atime, mtime)</li>
<li>fs.lchmod(path, mode, callback)</li>
<li>fs.lchmodSync(path, mode)</li>
<li>fs.lchown(path, uid, gid, callback)</li>
<li>fs.lchownSync(path, uid, gid)</li>
<li>fs.link(existingPath, newPath, callback)</li>
<li>fs.linkSync(existingPath, newPath)</li>
<li>fs.lstat(path, callback)</li>
<li>fs.lstatSync(path)</li>
<li>fs.mkdir(path[, mode], callback)</li>
<li>fs.mkdirSync(path[, mode])</li>
<li>fs.mkdtemp(prefix[, options], callback)</li>
<li>fs.mkdtempSync(prefix[, options])</li>
<li>fs.open(path, flags[, mode], callback)</li>
<li>fs.openSync(path, flags[, mode])</li>
<li>fs.read(fd, buffer, offset, length, - position, callback)</li>
<li>fs.readdir(path[, options], callback)</li>
<li>fs.readdirSync(path[, options])</li>
<li>fs.readFile(file[, options], callback)</li>
<li>fs.readFileSync(file[, options])</li>
<li>fs.readlink(path[, options], callback)</li>
<li>fs.readlinkSync(path[, options])</li>
<li>fs.readSync(fd, buffer, offset, length, - position)</li>
<li>fs.realpath(path[, options], callback)</li>
<li>fs.realpathSync(path[, options])</li>
<li>fs.rename(oldPath, newPath, callback)</li>
<li>fs.renameSync(oldPath, newPath)</li>
<li>fs.rmdir(path, callback)</li>
<li>fs.rmdirSync(path)</li>
<li>fs.stat(path, callback)</li>
<li>fs.statSync(path)</li>
<li>fs.symlink(target, path[, type], callback)</li>
<li>fs.symlinkSync(target, path[, type])</li>
<li>fs.truncate(path, len, callback)</li>
<li>fs.truncateSync(path, len)</li>
<li>fs.unlink(path, callback)</li>
<li>fs.unlinkSync(path)</li>
<li>fs.unwatchFile(filename[, listener])</li>
<li>fs.utimes(path, atime, mtime, callback)</li>
<li>fs.utimesSync(path, atime, mtime)</li>
<li>fs.watch(filename[, options][, listener])<ul>
<li>Caveats<ul>
<li>Availability</li>
<li>Inodes</li>
<li>Filename Argument</li>
</ul>
</li>
</ul>
</li>
<li>fs.watchFile(filename[, options], listener)</li>
<li>fs.write(fd, buffer[, offset[, length[, - position]]], callback)</li>
<li>fs.write(fd, string[, position[, -encoding]], callback)</li>
<li>fs.writeFile(file, data[, options],  callback)</li>
<li>fs.writeFileSync(file, data[, options])</li>
<li>fs.writeSync(fd, buffer[, offset[,  length[, position]]])</li>
<li>fs.writeSync(fd, string[, position[, encoding]])</li>
<li>FS Constants<ul>
<li>File Access Constants</li>
<li>File Open Constants</li>
<li>File Type Constants</li>
<li>File Mode Constants- </li>
</ul>
</li>
<li><p>readFile()/readFileSync()</p>
<ul>
<li><p>readFile():异步读取数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.readFile(&apos;./image.png&apos;, function (err, buffer) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  process(buffer);//若是相对路径则是相对当前脚本所在的路径</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>readFileSync():同步读取文件，返回一个字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var text = fs.readFileSync(fileName, &apos;utf8&apos;);   </div><div class="line">// 将文件按行拆成数组</div><div class="line">text.split(/\r?\n/).forEach(function (line) &#123;</div><div class="line">  // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>writeFile()/writeFileSync()</p>
<ul>
<li><p>writeFile():异步写入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node.js&apos;,&apos;utf8&apos;, (err) =&gt; &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  console.log(&apos;It\&apos;s saved!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>writeFileSync()</p>
</li>
</ul>
</li>
<li>exists(path,callback):判断给定路径是否存在</li>
<li>mkdir()/writeFile()/readFile()</li>
<li>mkdirSync()/writeFileSync()/readFileSync()</li>
<li>readdir()/readdirSync() :readdir方法用于读取目录，返回一个所包含的文件和子目录的数组。</li>
<li>start():参数为一文件或目录，产生一个包含该文件或目录具体信息的对象。判断处理的是文件还是目录。</li>
<li>watchFile()/unwatchFile():监听文件变化</li>
<li>createReadStream():打开大文件，创建一个读取操作的数据流。</li>
<li>createWriteStream():创建一个写入数据流对象，其write方法用于写入数据，end方法用于结束写入操作。</li>
</ul>
<h3 id="Globals"><a href="#Globals" class="headerlink" title="Globals"></a>Globals</h3><blockquote>
<p>Global Object:所有属性均可在程序的任何地方访问，即全局变量。相当于浏览器中的window。<br>所有对象都是global对象的属性。</p>
</blockquote>
<ul>
<li>全局对象<ul>
<li>global<br>类似window对象，但每个文件都是模块，其内变量均为该模块私有其它模块无法获取</li>
<li>process<br>表示Node所处的当前进程，允许开发者与之互动</li>
<li>console<br>提供命令行环境中的标准输入输出功能</li>
</ul>
</li>
<li>全局函数<ul>
<li>setTimeout()</li>
<li>clearTimeout()</li>
<li>setInterval()</li>
<li>clearInterval()</li>
<li>require():加载模块</li>
<li>Buffer()：操作二进制数据</li>
</ul>
</li>
<li><p>全局变量：在最外层定义的变量，全局对象的属性，隐式定义的变量</p>
<ul>
<li>__filename:当前运行脚本文件名</li>
<li>__dirname:当前运行脚本所在目录</li>
<li>伪全局变量:实际为模块内部的局部变量，指向对象个面具模块不同而不同，但所以模块均适用。<ul>
<li>module</li>
<li>module.exports</li>
<li>exports<br>Node中不可能在最外层定义变量，因所有用户代码都属于当前模块，而模块本身不是最外层上下文。</li>
</ul>
</li>
</ul>
</li>
<li><p>__filename: 当前正在执行的脚本文件名。将输出文件所在位置的绝对路径且和命令行参数所指定的<br>文件名不一定相同。在模块中返回模块文件路径。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//main.js  </div><div class="line">console.log(__filename);// 输出全局变量 __filename 的值</div><div class="line">$ node main.js</div><div class="line">D:\me\webpack\webpack-demo\main.js</div></pre></td></tr></table></figure>
<ul>
<li>__dirname:当前执行脚本所在的目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//main.js  </div><div class="line">console.log(__dirname);// 输出全局变量 __dirname 的值</div><div class="line">$ node main.js</div><div class="line">D:\me\webpack\webpack-demo</div></pre></td></tr></table></figure>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul>
<li>JS函数调用堆栈：函数被调用时便被压入堆栈顶部，运行完成则被移出堆栈顶部；其数据结构为FIFO。</li>
<li><p>回调：<br>  异步编程最基本的方法，node按顺序执行异步逻辑时一般采用后续传递的方式。<br>  即将后续逻辑封装在回调函数中作为起始函数的参数，逐层嵌套，以此让程序按期望执行。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//callback.js</div><div class="line">fuction learn(sth)&#123;</div><div class="line">    console.log(sth);</div><div class="line">&#125;</div><div class="line">function we(callback,sth)&#123;</div><div class="line">    sth+=&apos;is cool&apos;;</div><div class="line">    callback(sth);</div><div class="line">&#125;</div><div class="line">we(learn,&apos;Node&apos;);</div><div class="line">we((sth)=&gt;console.log(sth),&apos;react&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>同步/异步：关注的是消息通信机制 (synchronous communication/ asynchronous communication)。<br>  同步：由调用者主动等待这个调用的结果。执行任务执行顺序与任务排列顺序一致，上一步任务执行完毕才能开始下一步程序。<br>  异步：调用在发出之后，这个调用就直接返回了，所以没有返回结果。每个任务都有一个或多个回调函数，<br>  程序执行顺序与任务排列顺序无关。</p>
</li>
<li>I/O：磁盘的写入和读出，数据的输入和输出</li>
<li>单线程/多线程：前者–程序功能按顺序执行，前续功能执行结束后续功能才能执行开始；后者：反之。</li>
<li>阻塞/非阻塞：关注的是程序在等待调用结果（消息，返回值）时的状态。同步的原因导致阻塞结果，异步的原因导致非阻塞结果。<br>  阻塞：调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>  非阻塞：在不能立刻得到结果之前，该调用不会阻塞当前线程。</li>
<li><p>事件/事件驱动：函数执行的一种方式，即为某个事件注册了回调函数，该函数不会立即执行而是等事件被触发(EventEmitter)之后才执行。<br>![event loop][<a href="http://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg" target="_blank" rel="external">http://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg</a>]<br>  事件类似于主题，其上的事件处理函数相当于观察者(Observer)。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var events = require(&apos;events&apos;);</div><div class="line">// 创建 eventEmitter 对象</div><div class="line">var eventEmitter = new events.EventEmitter();</div><div class="line">var connectHandler = function connected() &#123;</div><div class="line">   console.log(&apos;连接成功。&apos;);</div><div class="line">   eventEmitter.emit(&apos;data_received&apos;);</div><div class="line">&#125;</div><div class="line">eventEmitter.on(&apos;connection&apos;, connectHandler);</div><div class="line">eventEmitter.on(&apos;data_received&apos;, function()&#123;</div><div class="line">   console.log(&apos;数据接收成功。&apos;);</div><div class="line">&#125;);</div><div class="line">eventEmitter.emit(&apos;connection&apos;);</div><div class="line">console.log(&quot;程序执行完毕。&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>基于事件驱动的回调：注册事件驱动的回调。</p>
</li>
<li>事件循环：event loop一种事件管理机制(FIFO)，若有大量的异步操作，IO的耗时操作及计时器控制的延时操作，<br>  它们完成的时候都要调用相应的回调函数，<br>  从而完成一些密集的任务，又不会阻塞整个程序执行的流程。<ul>
<li>Node是单线程单进程的应用程序，通过事件和回调支持并发故性能高。</li>
<li>Node的每个API都是作为一个独立线程运行的异步的，使用异步函数调用并处理并发。</li>
<li>Node基本上所有事件机制都是设计模式中的观察者模式。</li>
<li>单线程类似进入一个while(true)循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者。若有事件发生则回调。</li>
</ul>
</li>
<li>HTTP小爬虫</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var http = require(&apos;http&apos;);</div><div class="line">var url = &apos;http://www.imooc.com/video/7965&apos;;</div><div class="line"></div><div class="line">http.get(url, (res) =&gt; &#123;</div><div class="line">  var html = &apos;&apos;;</div><div class="line">  res.on(&apos;data&apos;, data =&gt; html += data)</div><div class="line">  res.on(&apos;end&apos;, () =&gt; console.log(html))</div><div class="line">&#125;).on(&apos;error&apos;, () =&gt; console.log(&apos;error...&apos;))</div></pre></td></tr></table></figure>
<ul>
<li><p>函数传递是如何让HTTP服务器工作的:事件驱动与回调</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var http = require(&quot;http&quot;);</div><div class="line">function onRequest(request, response) &#123;</div><div class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</div><div class="line">  response.write(&quot;Hello World&quot;);</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line">http.createServer(onRequest).listen(8888);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul>
<li>Class: https.Agent</li>
<li>Class: https.Server<ul>
<li>server.setTimeout(msecs, callback)</li>
<li>server.timeout</li>
</ul>
</li>
<li>https.createServer(options[, requestListener])<ul>
<li>server.close([callback])</li>
<li>server.listen(handle[, callback])</li>
<li>server.listen(path[, callback])</li>
<li>server.listen(port[, host][, backlog][, callback])</li>
</ul>
</li>
<li>https.get(options, callback)</li>
<li>https.globalAgent</li>
<li>https.request(options, callback)</li>
</ul>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><blockquote>
<p>Modules是Node应用程序的基本组成部分，文件和模块一一对应，使Node文件可以相互调用</p>
</blockquote>
<ul>
<li>Accessing the main module</li>
<li>Addenda: Package Manager Tips</li>
<li>All Together…</li>
<li>Caching<ul>
<li>Module Caching Caveats</li>
</ul>
</li>
<li>Core Modules</li>
<li>Cycles</li>
<li>File Modules</li>
<li>Folders as Modules</li>
<li>Loading from node_modules Folders</li>
<li>Loading from the global folders</li>
<li>The module wrapper</li>
<li>The module Object<ul>
<li>module.children</li>
<li>module.exports</li>
<li>exports shortcut</li>
<li>module.filename</li>
<li>module.id</li>
<li>module.loaded</li>
<li>module.parent</li>
<li>module.require(id) </li>
</ul>
</li>
<li><p>Node提供了exports和require两个对象，前者是模块公开的接口，后者用于从外部获取一个模块的接口即所获取模块的exports对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//hello.js</div><div class="line">exports.world=function()&#123;&#125;//通过exports对象把world作为模块的访问接口</div><div class="line">//main.js</div><div class="line">var world=require(&apos;./hello&apos;);//加载该模块便可访问hello.js中exports对象的成员函数了。</div><div class="line">module.exports=function()&#123;&#125;/*只把一个对象封装到模块中，</div><div class="line">外部引用该模块时其接口对象即要输出的Hello对象本身，而非原先的exports*/</div></pre></td></tr></table></figure>
</li>
<li><p>Node的require方法中的文件查找策略如下：</p>
</li>
</ul>
<p>![<a href="http://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg][http://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg" target="_blank" rel="external">http://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg][http://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg</a>]<br>    Node中的四类模块(一种原生模块三种文件模块)</p>
<pre><code>1. 原生模块：http,fs,path等
2. ./,../相对路径的文件模块
3. /pathtomodule/mod,绝对路径模块
4. mod，非原生模块的文件模块
</code></pre><h3 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h3><ul>
<li>Class: net.Server<ul>
<li>Event: ‘close’</li>
<li>Event: ‘connection’</li>
<li>Event: ‘error’</li>
<li>Event: ‘listening’</li>
<li>server.address()</li>
<li>server.close([callback])</li>
<li>server.getConnections(callback)</li>
<li>server.listen(handle[, backlog][, callback])</li>
<li>server.listen(options[, callback])</li>
<li>server.listen(path[, backlog][, callback])</li>
<li>server.listen([port][, hostname][, backlog][- , callback])</li>
<li>server.listening</li>
<li>server.maxConnections</li>
<li>server.ref()</li>
<li>server.unref()</li>
</ul>
</li>
<li>Class: net.Socket<ul>
<li>new net.Socket([options])</li>
<li>Event: ‘close’</li>
<li>Event: ‘connect’</li>
<li>Event: ‘data’</li>
<li>Event: ‘drain’</li>
<li>Event: ‘end’</li>
<li>Event: ‘error’</li>
<li>Event: ‘lookup’</li>
<li>Event: ‘timeout’</li>
<li>socket.address()</li>
<li>socket.bufferSize</li>
<li>socket.bytesRead</li>
<li>socket.bytesWritten</li>
<li>socket.connect(options[, connectListener])</li>
<li>socket.connect(path[, connectListener])</li>
<li>socket.connect(port[, host][, - connectListener])</li>
<li>socket.connecting</li>
<li>socket.destroy([exception])</li>
<li>socket.destroyed</li>
<li>socket.end([data][, encoding])</li>
<li>socket.localAddress</li>
<li>socket.localPort</li>
<li>socket.pause()</li>
<li>socket.ref()</li>
<li>socket.remoteAddress</li>
<li>socket.remoteFamily</li>
<li>socket.remotePort</li>
<li>socket.resume()</li>
<li>socket.setEncoding([encoding])</li>
<li>socket.setKeepAlive([enable][, initialDelay])</li>
<li>socket.setNoDelay([noDelay])</li>
<li>socket.setTimeout(timeout[, callback])</li>
<li>socket.unref()</li>
<li>socket.write(data[, encoding][, callback])</li>
</ul>
</li>
<li>net.connect(options[, connectListener])</li>
<li>net.connect(path[, connectListener])</li>
<li>net.connect(port[, host][, connectListener])</li>
<li>net.createConnection(options[, connectListener])</li>
<li>net.createConnection(path[, connectListener])</li>
<li>net.createConnection(port[, host][, connectListener])</li>
<li>net.createServer([options][, connectionListener])</li>
<li>net.isIP(input)</li>
<li>net.isIPv4(input)</li>
<li>net.isIPv6(input)</li>
</ul>
<h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><ul>
<li>os.EOL</li>
<li>os.arch()</li>
<li>os.constants</li>
<li>os.cpus()</li>
<li>os.endianness()</li>
<li>os.freemem()</li>
<li>os.homedir()</li>
<li>os.hostname()</li>
<li>os.loadavg()</li>
<li>os.networkInterfaces()</li>
<li>os.platform()</li>
<li>os.release()</li>
<li>os.tmpdir()</li>
<li>os.totalmem()</li>
<li>os.type()</li>
<li>os.uptime()</li>
<li>os.userInfo([options])</li>
<li>OS Constants<ul>
<li>Signal Constants</li>
<li>Error Constants<ul>
<li>POSIX Error Constants</li>
<li>Windows Specific Error Constants</li>
</ul>
</li>
<li>libuv Constants</li>
</ul>
</li>
</ul>
<h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><blockquote>
<p>为路由提供请求的URL和其它需要的GET/POST参数，而后据此执行程序。</p>
</blockquote>
<ul>
<li>Windows vs. POSIX</li>
<li>path.basename(path[, ext])</li>
<li>path.delimiter</li>
<li>path.dirname(path)</li>
<li>path.extname(path)</li>
<li>path.format(pathObject)</li>
<li>path.isAbsolute(path)</li>
<li>path.join([…paths])</li>
<li>path.normalize(path)</li>
<li>path.parse(path)</li>
<li>path.posix</li>
<li>path.relative(from, to)</li>
<li>path.resolve([…paths])</li>
<li>path.sep</li>
<li>path.win32</li>
</ul>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><blockquote>
<p>Node是单线程事件驱动处理并发的，每个子进程都有三个流对象：child.stdin,child.stdout,<br>child.stderr.可能会共享父进程的stdio流或者可以是独立的被导流的流对象。</p>
</blockquote>
<ul>
<li>Process Events<ul>
<li>Event: ‘beforeExit’</li>
<li>Event: ‘disconnect’</li>
<li>Event: ‘exit’</li>
<li>Event: ‘message’</li>
<li>Event: ‘rejectionHandled’</li>
<li>Event: ‘uncaughtException’</li>
<li>Warning: Using ‘uncaughtException’ correctly</li>
<li>Event: ‘unhandledRejection’</li>
<li>Event: ‘warning’</li>
<li>Emitting custom warnings</li>
<li>Signal Events</li>
</ul>
</li>
<li>process.abort()</li>
<li>process.arch</li>
<li>process.argv</li>
<li>process.argv0</li>
<li>process.channel</li>
<li>process.chdir(directory)</li>
<li>process.config</li>
<li>process.connected</li>
<li>process.cpuUsage([previousValue])</li>
<li>process.cwd()</li>
<li>process.disconnect()</li>
<li>process.emitWarning(warning[, name][, ctor])<ul>
<li>Avoiding duplicate warnings</li>
</ul>
</li>
<li>process.env</li>
<li>process.execArgv</li>
<li>process.execPath</li>
<li>process.exit([code])</li>
<li>process.exitCode</li>
<li>process.getegid()</li>
<li>process.geteuid()</li>
<li>process.getgid()</li>
<li>process.getgroups()</li>
<li>process.getuid()</li>
<li>process.hrtime([time])</li>
<li>process.initgroups(user, extra_group)</li>
<li>process.kill(pid[, signal])</li>
<li>process.mainModule</li>
<li>process.memoryUsage()</li>
<li>process.nextTick(callback[, …args])</li>
<li>process.pid</li>
<li>process.platform</li>
<li>process.release</li>
<li>process.send(message[, sendHandle[, options]][, callback])</li>
<li>process.setegid(id)</li>
<li>process.seteuid(id)</li>
<li>process.setgid(id)</li>
<li>process.setgroups(groups)</li>
<li>process.setuid(id)</li>
<li>process.stderr</li>
<li>process.stdin</li>
<li>process.stdout<ul>
<li>A note on process I/O</li>
</ul>
</li>
<li>process.title</li>
<li>process.umask([mask])</li>
<li>process.uptime()</li>
<li>process.version</li>
<li>process.versions<ul>
<li>Exit Codes</li>
</ul>
</li>
<li>创建子进程方法：<ul>
<li>exec-child_process.exec</li>
<li>spawn-child_process.spawn</li>
<li>fork-child_process.fork</li>
</ul>
</li>
</ul>
<h3 id="Punycode"><a href="#Punycode" class="headerlink" title="Punycode"></a>Punycode</h3><h3 id="Query-Strings"><a href="#Query-Strings" class="headerlink" title="Query Strings"></a>Query Strings</h3><ul>
<li>querystring.escape(str)</li>
<li>querystring.parse(str[, sep[, eq[, options]]])</li>
<li>querystring.stringify(obj[, sep[, eq[, options]]])</li>
<li>querystring.unescape(str)</li>
</ul>
<h3 id="Readline"><a href="#Readline" class="headerlink" title="Readline"></a>Readline</h3><ul>
<li>Class: Interface<ul>
<li>Event: ‘close’</li>
<li>Event: ‘line’</li>
<li>Event: ‘pause’</li>
<li>Event: ‘resume’</li>
<li>Event: ‘SIGCONT’</li>
<li>Event: ‘SIGINT’</li>
<li>Event: ‘SIGTSTP’</li>
<li>rl.close()</li>
<li>rl.pause()</li>
<li>rl.prompt([preserveCursor])</li>
<li>rl.question(query, callback)</li>
<li>rl.resume()</li>
<li>rl.setPrompt(prompt)</li>
<li>rl.write(data[, key])</li>
<li>readline.clearLine(stream, dir)</li>
<li>readline.clearScreenDown(stream)</li>
<li>readline.createInterface(options)<ul>
<li>Use of the completer Function</li>
</ul>
</li>
<li>readline.cursorTo(stream, x, y)</li>
<li>readline.emitKeypressEvents(stream[, interface])</li>
<li>readline.moveCursor(stream, dx, dy)</li>
</ul>
</li>
<li>Example: Tiny CLI</li>
<li>Example: Read File Stream Line-by-Line</li>
</ul>
<h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><ul>
<li>Design and Features<ul>
<li>Commands and Special Keys</li>
<li>Default Evaluation<ul>
<li>JavaScript Expressions</li>
<li>Global and Local Scope</li>
<li>Accessing Core Node.js Modules</li>
<li>Assignment of the _ (underscore) variable</li>
</ul>
</li>
<li>Custom Evaluation Functions<ul>
<li>Recoverable Errors</li>
</ul>
</li>
<li>Customizing REPL Output</li>
</ul>
</li>
<li>Class: REPLServer<ul>
<li>Event: ‘exit’</li>
<li>Event: ‘reset’</li>
<li>replServer.defineCommand(keyword, cmd)</li>
<li>replServer.displayPrompt([preserveCursor])</li>
<li>repl.start([options])</li>
</ul>
</li>
<li>The Node.js REPL<ul>
<li>Environment Variable Options</li>
<li>Using the Node.js REPL with advanced line-editors</li>
<li>Starting multiple REPL instances against a single running instance</li>
</ul>
</li>
</ul>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><blockquote>
<p>Stream是一个抽象接口，Node中很多对象(request,stout)已实现。</p>
</blockquote>
<p>Stream 四种流类型：</p>
<ul>
<li>Readable</li>
<li>Writable</li>
<li>Duplex 可读可写操作.</li>
<li>Transform<br>所有Stream对象都是EventEmitter的实例，常见：</li>
<li>data</li>
<li>end 没有更多的数据可读时触发。</li>
<li>error</li>
<li>finish 所有数据已被写入到底层系统时触发。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">var readStream = fs.createReadStream(&apos;package.json&apos;);</div><div class="line">readStream</div><div class="line">  .on(&apos;data&apos;, chunk =&gt; &#123;</div><div class="line">    console.log(&apos;data emits&apos;);</div><div class="line">    console.log(Buffer.isBuffer(chunk));</div><div class="line">    // console.log(chunk.toString(&apos;utf-8&apos;));</div><div class="line">        readStream.pause();</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">            console.log(&apos;data pause end&apos;);</div><div class="line">            readStream.resume()</div><div class="line">        &#125;, 10)</div><div class="line">  &#125;)</div><div class="line">  .on(&apos;readable&apos;, () =&gt; console.log(&apos;data readable&apos;))</div><div class="line">  .on(&apos;end&apos;, () =&gt; console.log(&apos;data ends&apos;))</div><div class="line">  .on(&apos;close&apos;, () =&gt; console.log(&apos;data close&apos;))</div><div class="line">  .on(&apos;error&apos;, e =&gt; console.log(&apos;data read error&apos; + e))</div><div class="line">  //pipe读写</div><div class="line">  var readable = require(&apos;stream&apos;).Readable;</div><div class="line">    var writable = require(&apos;stream&apos;).Writable;</div><div class="line">    </div><div class="line">    var readStream = new readable();</div><div class="line">    var writStream = new writable();</div><div class="line">    readStream.push(&apos;I&apos;);</div><div class="line">    readStream.push(&apos;Love&apos;);</div><div class="line">    readStream.push(&apos;Node\n&apos;);</div><div class="line">    readStream.push(null);</div><div class="line">    </div><div class="line">    writStream._write = (chunk, encode, cb) =&gt; &#123;</div><div class="line">      console.log(chunk.toString());</div><div class="line">      cb()</div><div class="line">    &#125;</div><div class="line">    readStream.pipe(writStream);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="String-Decoder"><a href="#String-Decoder" class="headerlink" title="String Decoder"></a>String Decoder</h3><ul>
<li>Class: new StringDecoder([encoding])<ul>
<li>stringDecoder.end([buffer])</li>
<li>stringDecoder.write(buffer)</li>
</ul>
</li>
</ul>
<h3 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h3><ul>
<li>Class: Immediate</li>
<li>Class: Timeout<ul>
<li>timeout.ref()</li>
<li>timeout.unref()</li>
</ul>
</li>
<li>Scheduling Timers<ul>
<li>setImmediate(callback[, …args])</li>
<li>setInterval(callback, delay[, …args])</li>
<li>setTimeout(callback, delay[, …args])</li>
</ul>
</li>
<li>Cancelling Timers<ul>
<li>clearImmediate(immediate)</li>
<li>clearInterval(timeout)</li>
<li>clearTimeout(timeout)</li>
</ul>
</li>
</ul>
<h3 id="TTY"><a href="#TTY" class="headerlink" title="TTY"></a>TTY</h3><ul>
<li>Class: tty.ReadStream<ul>
<li>readStream.isRaw</li>
<li>readStream.setRawMode(mode)</li>
</ul>
</li>
<li>Class: tty.WriteStream</li>
<li>Event: ‘resize’<ul>
<li>writeStream.columns</li>
<li>writeStream.rows</li>
</ul>
</li>
<li>tty.isatty(fd)</li>
</ul>
<h3 id="Tracing"><a href="#Tracing" class="headerlink" title="Tracing"></a>Tracing</h3><h3 id="UDP-Datagram"><a href="#UDP-Datagram" class="headerlink" title="UDP/Datagram"></a>UDP/Datagram</h3><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ul>
<li>URL Strings and URL Objects<ul>
<li>urlObject.auth</li>
<li>urlObject.hash</li>
<li>urlObject.host</li>
<li>urlObject.hostname</li>
<li>urlObject.href</li>
<li>urlObject.path</li>
<li>urlObject.pathname</li>
<li>urlObject.port</li>
<li>urlObject.protocol</li>
<li>urlObject.query</li>
<li>urlObject.search</li>
<li>urlObject.slashes</li>
</ul>
</li>
<li>url.format(urlObject)</li>
<li>url.format(URL[, options])</li>
<li>url.parse(urlString[, parseQueryString[, - slashesDenoteHost]])</li>
<li>url.resolve(from, to)</li>
<li>Escaped Characters</li>
<li>The WHATWG URL API<ul>
<li>Class: URL<ul>
<li>Constructor: new URL(input[, base])</li>
<li>url.hash</li>
<li>url.host</li>
<li>url.hostname</li>
<li>url.href</li>
<li>url.origin</li>
<li>url.password</li>
<li>url.pathname</li>
<li>url.port</li>
<li>url.protocol</li>
<li>url.search</li>
<li>url.searchParams</li>
<li>url.username</li>
<li>url.toString()</li>
<li>url.toJSON()</li>
</ul>
</li>
<li>Class: URLSearchParams</li>
<li>Constructor: new URLSearchParams([init])</li>
<li>urlSearchParams.append(name, value)</li>
<li>urlSearchParams.delete(name)</li>
<li>urlSearchParams.entries()</li>
<li>urlSearchParams.forEach(fn[, thisArg])</li>
<li>urlSearchParams.get(name)</li>
<li>urlSearchParams.getAll(name)</li>
<li>urlSearchParams.has(name)</li>
<li>urlSearchParams.keys()</li>
<li>urlSearchParams.set(name, value)</li>
<li>urlSearchParams.sort()</li>
<li>urlSearchParams.toString()</li>
<li>urlSearchParams.values()</li>
<li>urlSearchParams<a href="">@@iterator</a></li>
</ul>
</li>
<li>require(‘url’).domainToASCII(domain)</li>
<li>require(‘url’).domainToUnicode(domain)</li>
<li>Percent-Encoding in the WHATWG URL Standard </li>
</ul>
<h3 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h3><blockquote>
<p>util是Node的核心模块，提供常用函数的集合，用于弥补核心JS功能过于精简的不足。</p>
</blockquote>
<ul>
<li>util.inherits(constructor, superConstructor):实现对象间原型继承的函数</li>
</ul>
<blockquote>
<p>JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。<br>JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var util = require(&apos;util&apos;);</div><div class="line"></div><div class="line">function Base() &#123;</div><div class="line">  this.name = &apos;base&apos;;</div><div class="line">  this.base = 1990;</div><div class="line">  this.sayHello = function() &#123;</div><div class="line">    console.log(&apos;Hello&apos; + this.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Base.prototype.showName = function() &#123;</div><div class="line">  console.log(this.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Sub() &#123;</div><div class="line">  this.name = &apos;sub&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(Sub, Base);</div><div class="line">var objBase = new Base();</div><div class="line">objBase.showName();</div><div class="line">objBase.sayHello();</div><div class="line">console.log(objBase);</div><div class="line">var objSub = new Sub();</div><div class="line">objSub.showName(); </div><div class="line">//objSub.sayHello();//TypeError: objSub.sayHello is not a function,Sub仅继承原型中定义的函数</div><div class="line">console.log(objSub);</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>util.inspect: 将任意对象转换为字符串，常用语调试及错误输出，至少接受一个object参数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。</div><div class="line">var util = require(&apos;util&apos;);</div><div class="line">function Person() &#123;</div><div class="line">  this.name = &apos;haha&apos;;</div><div class="line">  this.toString = function() &#123;</div><div class="line">    return this.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var o = new Person();</div><div class="line">console.log(util.inspect(o));</div><div class="line">console.log(util.inspect(o, true));</div><div class="line">console.log(util.inspect(o, true, 3));</div><div class="line">console.log(util.inspect(o, true, 3, [(1, 0, 0)]));</div><div class="line">//输出如下</div><div class="line">Person &#123; name: &apos;haha&apos;, toString: [Function] &#125;</div><div class="line">Person &#123;</div><div class="line">  name: &apos;haha&apos;,</div><div class="line">  toString:</div><div class="line">   &#123; [Function]</div><div class="line">     [length]: 0,</div><div class="line">     [name]: &apos;&apos;,</div><div class="line">     [arguments]: null,</div><div class="line">     [caller]: null,</div><div class="line">     [prototype]: &#123; [constructor]: [Circular] &#125; &#125; &#125;</div><div class="line">Person &#123;</div><div class="line">  name: &apos;haha&apos;,</div><div class="line">  toString:</div><div class="line">   &#123; [Function]</div><div class="line">     [length]: 0,</div><div class="line">     [name]: &apos;&apos;,</div><div class="line">     [arguments]: null,</div><div class="line">     [caller]: null,</div><div class="line">     [prototype]: &#123; [constructor]: [Circular] &#125; &#125; &#125;</div><div class="line">Person &#123;</div><div class="line">  name: &apos;haha&apos;,</div><div class="line">  toString:</div><div class="line">   &#123; [Function]</div><div class="line">     [length]: 0,</div><div class="line">     [name]: &apos;&apos;,</div><div class="line">     [arguments]: null,</div><div class="line">     [caller]: null,</div><div class="line">     [prototype]: &#123; [constructor]: [Circular] &#125; &#125; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>util.isArray(object)</li>
<li>util.isRegExp(object)</li>
<li>util.isDate(object)</li>
<li>util.isError(object)</li>
</ul>
<h3 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h3><ul>
<li>v8.getHeapSpaceStatistics()</li>
<li>v8.getHeapStatistics()</li>
<li>v8.setFlagsFromString(string)</li>
</ul>
<h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><h3 id="ZLIB"><a href="#ZLIB" class="headerlink" title="ZLIB"></a>ZLIB</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Node是一个基于Chrome的V8JS引擎的JS运行时。Node运用事件驱动(event-driven)，非阻塞
    
    </summary>
    
      <category term="NODE" scheme="https://yanlee26.github.io/categories/NODE/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS规范</title>
    <link href="https://yanlee26.github.io/2016/11/01/commonJS/"/>
    <id>https://yanlee26.github.io/2016/11/01/commonJS/</id>
    <published>2016-11-01T13:05:24.000Z</published>
    <updated>2017-08-23T23:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Node应用有采用CommonJS规范的模块组成，据此每个文件就是一模块，有自己的作用域。其内定义的<br>变量，函数，类都是私有的，对其它文件不可见。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// example.js</div><div class="line">var x = 5;</div><div class="line">var addX = function (value) &#123;</div><div class="line">  return value + x;</div><div class="line">&#125;;</div><div class="line">//分享变量</div><div class="line">global.warning = true;//不推荐</div></pre></td></tr></table></figure>
<ul>
<li><p>CommonJS规定，每个模块内部module变量代表当前模块，其exports属性是对外接口，加载某个模块即是加载其module.exports<br>属性。特点如下：</p>
<ol>
<li>所有代码运行在模块作用域，不污染全局作用域；</li>
<li>模块可以多次加载但一次运行，结果缓存以后再加载便直接读取缓存结果；若想让模块再次运行必须清除缓存；</li>
<li>模块加载顺序，与其在代码中出现的位置一致。</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x = 5;</div><div class="line">var addX = function (value) &#123;</div><div class="line">  return value + x;</div><div class="line">&#125;;</div><div class="line">module.exports.x = x;</div><div class="line">module.exports.addX = addX;</div></pre></td></tr></table></figure>
<ul>
<li>require 方法也可用于加载模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var example = require(&apos;./example.js&apos;);</div><div class="line">console.log(example.x); // 5</div><div class="line">console.log(example.addX(1)); // 6</div></pre></td></tr></table></figure>
<h2 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h2><blockquote>
<p>Node内部提供一个Module构造函数，所有模块都是Module的实例;每个模块内部都有一个代表当前模块的module<br>对象</p>
</blockquote>
<ul>
<li><p>有以下属性：</p>
<ul>
<li>module.id: 标识符，常为带有绝对路径的模块文件名</li>
<li>module.filename: 模块文件名，带有绝对路径</li>
<li>module.loaded: 返回布尔值，表示模块是否已经加载完成</li>
<li>module.parent：返回一个对象，表示调用该模块的模块</li>
<li>module.children： 返回一个数组，表示该模块要调用到的其它模块</li>
<li>module.exports； 表示模块对外输出的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//main.js</div><div class="line">var http = require(&apos;./package.json&apos;);</div><div class="line">console.log(module);</div><div class="line">//输出如下</div><div class="line">Module &#123;</div><div class="line">  id: &apos;.&apos;,</div><div class="line">  exports: &#123;&#125;,</div><div class="line">  parent: null,</div><div class="line">  filename: &apos;D:\\me\\webpack\\webpack-demo\\main.js&apos;,</div><div class="line">  loaded: false,</div><div class="line">  children:</div><div class="line">   [ Module &#123;</div><div class="line">       id: &apos;D:\\me\\webpack\\webpack-demo\\package.json&apos;,</div><div class="line">       exports: [Object],</div><div class="line">       parent: [Circular],</div><div class="line">       filename: &apos;D:\\me\\webpack\\webpack-demo\\package.json&apos;,</div><div class="line">       loaded: true,</div><div class="line">       children: [],</div><div class="line">       paths: [Object] &#125; ],</div><div class="line">  paths:</div><div class="line">   [ &apos;D:\\me\\webpack\\webpack-demo\\node_modules&apos;,</div><div class="line">     &apos;D:\\me\\webpack\\node_modules&apos;,</div><div class="line">     &apos;D:\\me\\node_modules&apos;,</div><div class="line">     &apos;D:\\node_modules&apos; ] &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>module.exports属性:表示当前模块对外输出(module.exports变量)的接口</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</div><div class="line">module.exports = new EventEmitter();</div><div class="line"></div><div class="line">setTimeout(function() &#123;</div><div class="line">  module.exports.emit(&apos;ready&apos;);</div><div class="line">&#125;, 1000);</div><div class="line">//也可以写成</div><div class="line">var a = require(&apos;./a&apos;);</div><div class="line">a.on(&apos;ready&apos;, function() &#123;</div><div class="line">  console.log(&apos;module a is ready&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>exports变量: Node为每个模块提供一个指向module.exports的exports变量，等同于在每个模块头部加入</li>
</ul>
<figure class="highlight plain"><figcaption><span>exports=module.exports```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### AMD规范与CommonJS规范的兼容性</div><div class="line"></div><div class="line">&gt; CommonJS规范加载模块是同步的，AMD规范则是非同步加载模块，允许指定回调函数。</div><div class="line">因Node主要用于服务器编程，模块文件一般已经存于本地硬盘，故加载起来较快，无需考虑非同步加载方式，</div><div class="line">所以较适用CommonJS规范。若是浏览器环境，则一般考虑AMD规范。</div></pre></td></tr></table></figure>
<p>//AMD 使用define定义模块<br>define([‘package/lib’], function(lib){<br>  function foo(){<br>    lib.log(‘hello world!’);<br>  }<br>  return {<br>    foo: foo<br>  };<br>});<br>//兼容CommonJS规范时写成。。。<br>define(function (require, exports, module){<br>  var someModule = require(“someModule”);<br>  var anotherModule = require(“anotherModule”);</p>
<p>  someModule.doTehAwesome();<br>  anotherModule.doMoarAwesome();</p>
<p>  exports.asplode = function (){<br>    someModule.doTehAwesome();<br>    anotherModule.doMoarAwesome();<br>  };<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### require命令</div><div class="line"></div><div class="line">- 基本用法</div><div class="line">&gt; Node使用CommonJS模块规范，内置require命令加载文件。其基本功能是读入并执行一个js文件</div><div class="line">，然后返回该模块的exports对象，无则报错。</div><div class="line">- 加载规则</div><div class="line">&gt; require命令用于加载文件，默认后缀.js</div></pre></td></tr></table></figure></p>
<p>var foo = require(‘foo’);<br>//  等同于<br>var foo = require(‘foo.js’);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">根据参数不同，require命令去不同路径寻找模块文件</div><div class="line">  1. &apos;/&apos;:加载的是一个位于绝对路径的模块文件```require(&apos;/home/marco/foo.js&apos;)</div></pre></td></tr></table></figure></p>
<ol>
<li>‘./‘:加载相对路径文件</li>
<li>‘’:加载默认提供的核心模块(Node系统安装目录中)或者位于各级node_modules目录的已安装模块。<br>旨在使不同的模块可以将所依赖的模块本地化。</li>
<li>‘example-module/path/to/file’：从前到后加载路径</li>
<li>若指定模块文件未发现则尝试为文件名添加.js,.json,.node后再去搜索</li>
<li>若想得到require命令加载的文件的确切名使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- 目录加载规则</div><div class="line"></div><div class="line">&gt; 为便于组织我们常把相关文件放于一个目录里边，此时最好为该目录设置一个入口文件，让require</div><div class="line">方法可以据此加载整个目录。</div></pre></td></tr></table></figure></li>
</ol>
<p>// package.json<br>{ “name” : “some-library”,<br>  “main” : “./lib/some-library.js” }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">require发现参数字符串指向一个目录以后，会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。</div><div class="line">如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件。</div><div class="line"></div><div class="line">- 模块缓存</div><div class="line">&gt; 首次加载某模块时，Node会缓存；而后加载便直接从缓存读取该模块的module.exports属性</div><div class="line">- 环境变量NODE_PATH</div><div class="line">&gt; Node执行一个脚本时，会先查看其环境变量(以冒号分割的绝对路径)。在其它位置找不到指定模块时，Node会</div><div class="line">去这些路径查找。</div><div class="line">- 模块的循环加载</div><div class="line">&gt;第二次加载a.js和b.js时，会直接从缓存读取exports属性，所以a.js和b.js内部的console.log语句都不会执行了。</div><div class="line">- require.main</div><div class="line">&gt; 判断模块是直接执行还是调用执行，直接执行则```require.main===module</div></pre></td></tr></table></figure></p>
<h3 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h3><blockquote>
<p>CommonJS模块的加载机制是：输入的是被输出值的拷贝。<br>即一旦输出，一个值模块内部的变化就影响不到该值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//lib.js</div><div class="line">var c = 3;</div><div class="line">function add() &#123;return c++;&#125;</div><div class="line">module.exports = &#123;c,add,&#125;</div><div class="line">//main.js</div><div class="line">var c = require(&apos;./lib&apos;).c;</div><div class="line">var add = require(&apos;./lib&apos;).add;</div><div class="line">console.log(c);</div><div class="line">add();</div><div class="line">console.log(add());</div><div class="line">console.log(c);//3 4 3</div></pre></td></tr></table></figure>
<ul>
<li>require的内部处理流程</li>
</ul>
<blockquote>
<p>require在CommonJS中用于加载其它模块的命令。其实不是一全局命令，而是指向当前模块的<br>调用了Node内部命令Module._load的module.require命令。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Module._load = function(request, parent, isMain) &#123;</div><div class="line">  // 1. 检查 Module._cache，是否缓存之中有指定模块</div><div class="line">  // 2. 如果缓存之中没有，就创建一个新的Module实例</div><div class="line">        //require(): 加载外部模块</div><div class="line">        //require.resolve()：将模块名解析到一个绝对路径</div><div class="line">        //require.main：指向主模块</div><div class="line">        //require.cache：指向所有缓存的模块</div><div class="line">        //require.extensions：根据文件的后缀名，调用不同的执行函数</div><div class="line">  // 3. 将它保存到缓存</div><div class="line">  // 4. 使用 module.load() 加载指定的模块文件，</div><div class="line">  //    读取文件内容之后，使用 module.compile() 执行文件代码</div><div class="line">  // 5. 如果加载/解析过程报错，就从缓存删除该模块</div><div class="line">  // 6. 返回该模块的 module.exports</div><div class="line">&#125;;</div><div class="line">Module.prototype._compile = function(content, filename) &#123;</div><div class="line">  // 1. 生成一个require函数，指向module.require</div><div class="line">  // 2. 加载其他辅助方法到require</div><div class="line">  // 3. 将文件内容放到一个函数之中，该函数可调用 require</div><div class="line">  // 4. 执行该函数</div><div class="line">&#125;;</div><div class="line"></div><div class="line">(function (exports, require, module, __filename, __dirname) &#123;</div><div class="line">  // YOUR CODE INJECTED HERE!</div><div class="line">&#125;);</div><div class="line">/*一旦require函数准备完毕，整个所要加载的脚本被放到一个新函数中以避免全局污染。</div><div class="line">Module._compile方法是同步执行的，所以Module._load要等它执行完成，才会向用户返回module.exports的值。</div><div class="line">*/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Node应用有采用CommonJS规范的模块组成，据此每个文件就是一模块，有自己的作用域。其内定义的&lt;br&gt;变量，
    
    </summary>
    
      <category term="CommonJS" scheme="https://yanlee26.github.io/categories/CommonJS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>webpack 初探</title>
    <link href="https://yanlee26.github.io/2016/10/24/webpack/"/>
    <id>https://yanlee26.github.io/2016/10/24/webpack/</id>
    <published>2016-10-23T23:15:01.000Z</published>
    <updated>2017-07-31T14:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>草稿。。。</p>
<h2 id="introduce"><a href="#introduce" class="headerlink" title="introduce"></a>introduce</h2><ul>
<li>concepts<br>webpack是现代js应用的模块打包器，它是非常可配置，但要明确以下四个概念。</li>
</ul>
</blockquote>
<pre><code>1. Entry
webpack构建一个你应用程序依赖的图，起点便是所谓的erntry point。它告诉wenpack从哪开始并且
按照依赖图去知道什么要打包。可以将此比作 contextual root or the first file to kick off your app.。
The simplest example：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//webpack.config.js  </div><div class="line">module.exports=&#123;</div><div class="line">    entry:&apos;./path/to/my/entry/file.js&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>

2. Output
一旦打包好了资源，依然需要告诉webpack哪里打包应用程序，output属性告诉webpack如何处理打包过的代码。
 The simplest example：
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//webpack.config.js  </div><div class="line">module.exports=&#123;</div><div class="line">    entry:&apos;./path/to/my/entry/file.js&apos;，</div><div class="line">    output: &#123;</div><div class="line">        path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">        filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">      &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>

 示例中用output.filename和output.path属性告诉webpack包名和将之emit to哪。
3. Loaders
目的在于将所有项目中的资源作为webpack而非浏览器关心的。webpack眼中一切(.css,.hmtl,.scss,.jpg,etc)
皆模块。但其只知道js，而Loaders在webpack中将这些文件转化成依赖图中的模块。有两个目的在高水准要求上：
a.确定什么文件该被相应loader转换(test)，b：转换相应文件以加入到依赖图(use)。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">const config = &#123;</div><div class="line">  entry: &apos;./path/to/my/entry/file.js&apos;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;test: /\.(js|jsx)$/, use: &apos;babel-loader&apos;&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">module.exports = config;</div></pre></td></tr></table></figure>

4. Plugins
因loaders仅基于每个文件转换，故plugins是最常用的对打包模块的 &quot;compilations&quot; or &quot;chunks&quot;执行操作和自定义功能等。
要用plugin需要用require()且将其放入plugins数组。多数plugins可按需自定义
因可在配置中按不同目的多次使用，此时需要用new来构建它的一个实例。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); //installed via npm</div><div class="line">const webpack = require(&apos;webpack&apos;); //to access built-in plugins</div><div class="line">const path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">const config = &#123;</div><div class="line">  entry: &apos;./path/to/my/entry/file.js&apos;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;my-first-webpack.bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;test: /\.(js|jsx)$/, use: &apos;babel-loader&apos;&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new webpack.optimize.UglifyJsPlugin(),</div><div class="line">    new HtmlWebpackPlugin(&#123;template: &apos;./src/index.html&apos;&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;草稿。。。&lt;/p&gt;
&lt;h2 id=&quot;introduce&quot;&gt;&lt;a href=&quot;#introduce&quot; class=&quot;headerlink&quot; title=&quot;introduce&quot;&gt;&lt;/a&gt;introduce&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;concepts&lt;b
    
    </summary>
    
      <category term="webpack" scheme="https://yanlee26.github.io/categories/webpack/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>ES6/ES7总结分析</title>
    <link href="https://yanlee26.github.io/2016/10/04/es6/"/>
    <id>https://yanlee26.github.io/2016/10/04/es6/</id>
    <published>2016-10-03T23:28:30.000Z</published>
    <updated>2017-08-23T23:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote>
<p>ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript<br> standard.  ES6 is a significant update to the language, and the first update to<br> the language since ES5 was standardized in 2009. Implementation of these features<br> in major  engines is <a href="http://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="external">underway now(支持情况一览)</a>.</p>
</blockquote>
<p>See the <a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ES6 standard（ES6规范）</a> for full specification of the ECMAScript 6 language.</p>
<h3 id="ES6-includes-the-following-new-features—新特性如下"><a href="#ES6-includes-the-following-new-features—新特性如下" class="headerlink" title="ES6 includes the following new features—新特性如下:"></a>ES6 includes the following new features—新特性如下:</h3><ol>
<li>let + const</li>
<li>arrows箭头函数</li>
<li>destructuring解耦</li>
<li>enhanced string literals字符串的扩展</li>
<li>enhanced regular expression正则的扩展</li>
<li>enhanced number expression数值的扩展</li>
<li>enhanced array expression数组的扩展</li>
<li>enhanced function expression函数的扩展</li>
<li>enhanced object literals对象的扩展</li>
<li>symbols标记</li>
<li>map + set</li>
<li>proxies代理</li>
<li>reflect</li>
<li>promises</li>
<li>iterators迭代器 + for..of</li>
<li>generators</li>
<li>async函数</li>
<li>class</li>
<li>decorator</li>
<li>modules</li>
<li><p>module loaders</p>
</li>
<li><p>subclassable built-ins</p>
</li>
<li>typed arrays</li>
<li>internationalization-localization国际及地域化</li>
<li>SIMD</li>
<li>Good Practise</li>
</ol>
<h2 id="ECMAScript-6-Features"><a href="#ECMAScript-6-Features" class="headerlink" title="ECMAScript 6 Features"></a>ECMAScript 6 Features</h2><h3 id="Let-Const"><a href="#Let-Const" class="headerlink" title="Let + Const"></a>Let + Const</h3><blockquote>
<p>Block-scoped binding constructs.  <figure class="highlight plain"><figcaption><span>is the new ```var```(块级作用域绑定结构，let是新的var). </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```const```is single-assignment.  Static restrictions prevent use before assignment</div><div class="line">（const 是单一声明，严格模式限制其必须先声明再使用）.</div></pre></td></tr></table></figure></p>
</blockquote>
<p>//ES6<br>const PI=3.1415926;<br>let callbacks = []<br>for (let i = 0; i &lt;= 2; i++) {<br>    callbacks[i] = function () { return i <em> 2 }<br>}<br>callbacks<a href="">0</a> === 0;<br>//block-scoped functions<br>{<br>    function foo () { return 1 }<br>    foo() === 1<br>    {<br>        function foo () { return 2 }<br>        foo() === 2<br>    }<br>    foo() === 1<br>}<br>//ES5<br>Object.defineProperty(typeof global === “object” ? global : window, “PI”, {<br>    value:        3.1415926,<br>    enumerable:   true,<br>    writable:     false,<br>    configurable: false<br>})<br>var callbacks = [];<br>for (var i = 0; i &lt;= 2; i++) {<br>    (function (i) {<br>        callbacks[i] = function() { return i </em> 2; };<br>    })(i);<br>}<br>callbacks<a href="">0</a> === 0;<br>(function () {<br>    var foo = function () { return 1; }<br>    foo() === 1;<br>    (function () {<br>        var foo = function () { return 2; }<br>        foo() === 2;<br>    })();<br>    foo() === 1;<br>})();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">More MDN info: [let statement](https://developer.mozilla.org/en-US/docs/Web//Reference/Statements/let), [const statement](https://developer.mozilla.org/en-US/docs/Web//Reference/Statements/const)</div><div class="line"></div><div class="line">###  Destructuring解耦</div><div class="line"></div><div class="line">&gt;Destructuring allows binding using pattern matching, with support for matching arrays and objects(解耦允许绑定模式匹配</div><div class="line">，支持数组和对象).</div></pre></td></tr></table></figure></p>
<p>// list matching列表匹配<br>var [a, , b] = [1,2,3];</p>
<p>// object matching对象匹配<br>var { op: a, lhs: { op: b }, rhs: c }<br>       = getASTNode()<br>var {op, lhs, rhs} = getASTNode()<br>// Can be used in parameter position用于形参位置<br>function g({name: x}) {<br>  console.log(x);<br>}<br>g({name: 5})<br>// Fail-soft destructuring<br>var [a] = [];<br>a === undefined;</p>
<p>// Fail-soft destructuring with defaults<br>var [a = 1] = [];<br>a === 1;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">More info: [MDN Destructuring assignment](https://developer.mozilla.org/en-US/docs/Web//Reference/Operators/Destructuring_assignment)</div><div class="line"></div><div class="line">###  enhanced string literals字符串的扩展</div><div class="line"></div><div class="line">1. Unicode编码</div><div class="line"></div><div class="line">&gt;Non-breaking additions to support full Unicode, including new Unicode literal form in strings and </div><div class="line">new RegExp `u` mode to handle code points, as well as new APIs to process strings at the 21bit code points level.  </div><div class="line">These additions support building global apps in JS.</div></pre></td></tr></table></figure></p>
<p>“𠮷”.length === 2<br>“𠮷”.match(/./u)[0].length === 2<br>“𠮷” === “\uD842\uDFB7”<br>“𠮷” === “\u{20BB7}”<br>“𠮷”.codePointAt(0) == 0x20BB7<br>for (let codepoint of “𠮷”) console.log(codepoint)<br>//ES5<br>“𠮷”.length === 2;<br>“𠮷”.match(/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF][\uD800-\uDBFF][\uDC00-\uDFFF]<a href="?![\uDC00-\uDFFF]">\uD800-\uDBFF</a>(?:[^\uD800-\uDBFF]^)[\uDC00-\uDFFF])/)[0].length === 2;<br>“𠮷” === “\uD842\uDFB7”;<br>//  no equivalent in ES5<br>//  no equivalent in ES5<br>//  no equivalent in ES5</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">More info: [MDN RegExp.prototype.unicode](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/RegExp/unicode)</div><div class="line"></div><div class="line">2. Template Strings</div><div class="line"></div><div class="line">&gt;Template strings provide syntactic sugar for constructing strings.  </div><div class="line">This is similar to string interpolation features in Perl, Python and more. </div><div class="line">模板字符串为适应的字符串提供了语法糖。这类似于Perl，Python等中的字符串插值功能.</div></pre></td></tr></table></figure>
<p>// Basic literal string creation<br><code>In  &#39;\n&#39; is a line-feed.</code></p>
<p>// Multiline strings<br><code>In  this is
 not legal.</code></p>
<p>// String interpolation字符串插值<br>var name = “Bob”, time = “today”;<br><code>Hello ${name}, how are you ${time}?</code></p>
<p>// Construct an HTTP request prefix is used to interpret the replacements and construction<br>get<code>http://example.com/foo?bar=${bar + baz}&amp;quux=${quux}</code><br>//ES5<br>get([ “<a href="http://example.com/foo?bar=" target="_blank" rel="external">http://example.com/foo?bar=</a>“, “&amp;quux=”, “” ],bar + baz, quux);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. codePointAt()</div></pre></td></tr></table></figure>
<p>var s = ‘𠮷a’;<br>s.codePointAt(0) // 134071<br>s.codePointAt(1) // 57271<br>s.codePointAt(2) // 97<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. string.fromCodePoint() 从码点返回对应字符</div></pre></td></tr></table></figure></p>
<p>String.fromCodePoint(0x20BB7)<br>// “𠮷”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. 遍历</div></pre></td></tr></table></figure></p>
<p>for (let codePoint of ‘foo’) {<br>  console.log(codePoint)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. at() 返回字符串给定位置的字符</div></pre></td></tr></table></figure></p>
<p>‘abc’.at(0) // “a”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. normalize()</div><div class="line"></div><div class="line">&gt; ES6提供字符串实例的normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。</div></pre></td></tr></table></figure></p>
<p>‘\u01D1’.normalize() === ‘\u004F\u030C’.normalize()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">8. includes(),startWith(),endsWith()</div></pre></td></tr></table></figure>
<p>var s = ‘Hello world!’;<br>s.startsWith(‘Hello’) // true<br>s.endsWith(‘!’) // true<br>s.includes(‘o’) // true<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">9. repeat()</div></pre></td></tr></table></figure></p>
<p>‘x’.repeat(3) // “xxx”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">10. padStart(),padEnd()</div><div class="line"></div><div class="line">ES2017 引入了字符串补全长度的功能。</div></pre></td></tr></table></figure></p>
<p>‘x’.padStart(5, ‘ab’) // ‘ababx’<br>‘x’.padStart(4, ‘ab’) // ‘abax’<br>‘x’.padEnd(5, ‘ab’) // ‘xabab’<br>‘x’.padEnd(4, ‘ab’) // ‘xaba’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">11. 标签模板</div><div class="line"></div><div class="line">紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。</div></pre></td></tr></table></figure></p>
<p>alert<code>123</code><br>// 等同于<br>alert(123)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">12. string.raw()</div><div class="line">String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</div></pre></td></tr></table></figure></p>
<p>String.raw<code>Hi\\n</code><br>// “Hi\n”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">13. 局限</div><div class="line"></div><div class="line">模板字符串默认会将字符串转义，因此导致了无法嵌入其他语言。</div><div class="line"></div><div class="line">More info: [MDN Template Strings](https://developer.mozilla.org/en-US/docs/Web//Reference/template_strings)</div><div class="line"></div><div class="line">###  enhanced regular expression正则的扩展</div><div class="line"></div><div class="line">&gt; 保持匹配之间的匹配位置粘性，并且以这种方式支持对任意长输入字符串的有效解析，即使具有任意数量的不同的正则表达式。</div><div class="line"></div><div class="line">1. RegExp构造函数</div><div class="line">ES5中，按参数类型正则分两种情况：字符串/正则表达式</div></pre></td></tr></table></figure></p>
<p>var regex=new RegExp(‘xyz’,i);//var regex=/xyz/i;<br>var regex=new RegExp(/xyz/i);//var regex=/xyz/i;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ES6中，RegExp构造函数首个参数是正则对象，次个参数可以指定修饰符且以次个参数修饰符为准</div></pre></td></tr></table></figure></p>
<p>new RegExp(/abc/ig, ‘i’).flags<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 字符串的正则方法</div></pre></td></tr></table></figure></p>
<p>String.prototype.match // RegExp.prototype[Symbol.match]<br>String.prototype.replace // RegExp.prototype[Symbol.replace]<br>String.prototype.search //RegExp.prototype[Symbol.search]<br>String.prototype.split // RegExp.prototype[Symbol.split]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. u修饰符</div><div class="line">4. y修饰符</div><div class="line">实例</div></pre></td></tr></table></figure></p>
<p>let parser = (input, match) =&gt; {<br>    for (let pos = 0, lastPos = input.length; pos &lt; lastPos; ) {<br>        for (let i = 0; i &lt; match.length; i++) {<br>            match[i].pattern.lastIndex = pos<br>            let found<br>            if ((found = match[i].pattern.exec(input)) !== null) {<br>                match[i].action(found)<br>                pos = match[i].pattern.lastIndex<br>                break<br>            }<br>        }<br>    }<br>}</p>
<p>let report = (match) =&gt; {<br>    console.log(JSON.stringify(match))<br>}<br>parser(“Foo 1 Bar 7 Baz 42”, [<br>    { pattern: /^Foo\s+(\d+)/y, action: (match) =&gt; report(match) },<br>    { pattern: /^Bar\s+(\d+)/y, action: (match) =&gt; report(match) },<br>    { pattern: /^Baz\s+(\d+)/y, action: (match) =&gt; report(match) },<br>    { pattern: /^\s*/y,         action: (match) =&gt; {}            }<br>])<br>//ES5<br>var parser = function (input, match) {<br>    for (var i, found, inputTmp = input; inputTmp !== “”; ) {<br>        for (i = 0; i &lt; match.length; i++) {<br>            if ((found = match[i].pattern.exec(inputTmp)) !== null) {<br>                match[i].action(found);<br>                inputTmp = inputTmp.substr(found[0].length);<br>                break;<br>            }<br>        }<br>    }<br>}</p>
<p>var report = function (match) {<br>    console.log(JSON.stringify(match));<br>};<br>parser(“Foo 1 Bar 7 Baz 42”, [<br>    { pattern: /^Foo\s+(\d+)/, action: function (match) { report(match); } },<br>    { pattern: /^Bar\s+(\d+)/, action: function (match) { report(match); } },<br>    { pattern: /^Baz\s+(\d+)/, action: function (match) { report(match); } },<br>    { pattern: /^\s*/,         action: function (match) {}                 }<br>]);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  enhanced number expression数值的扩展</div><div class="line"></div><div class="line">1. 二进制八进制</div></pre></td></tr></table></figure></p>
<p>0b111110111 === 503 // true   Ob二进制<br>0o767 === 503 // true Oo八进制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. Number.isFinite(),Number.isNaN()</div><div class="line">3. Number.parseInt(),Number.parseFloat()</div></pre></td></tr></table></figure></p>
<p>// ES5的写法<br>parseInt(‘12.34’) // 12<br>parseFloat(‘123.45#’) // 123.45</p>
<p>// ES6的写法 是逐步减少全局性方法，使得语言逐步模块化。<br>Number.parseInt(‘12.34’) // 12<br>Number.parseFloat(‘123.45#’) // 123.45<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. Number.isInteger()</div><div class="line">5. Number.EPSILON ES6在Number对象上面，新增一个极小的常量Number.EPSILON。</div><div class="line">6. Number.isSafeInteger()                 </div><div class="line">7. Math对象的扩展</div><div class="line"></div><div class="line">- Math.trunc() 去除一个数的小数部分，返回整数部分。</div><div class="line">- Math.sign() 判断一个数到底是正数、负数、还是零。</div><div class="line">- Math.cbrt() 立方根。</div><div class="line">- Math.clz32() 返回一个数的32位无符号整数形式有多少个前导0。</div><div class="line">- Math.imul()方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。</div><div class="line">- Math.fround()方法返回一个数的单精度浮点数形式。</div><div class="line">- Math.hypot()方法返回所有参数的平方和的平方根。</div><div class="line">- 对数方法</div><div class="line">    - Math.expm1(x)返回ex - 1，即Math.exp(x) - 1。</div><div class="line">    - Math.log1p(x)方法返回1 + x的自然对数</div><div class="line">    - Math.log10(x)返回以10为底的x的对数</div><div class="line">    - Math.log2(x)返回以2为底的x的对数</div><div class="line">- 三角函数</div><div class="line">    Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）</div><div class="line">    Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）</div><div class="line">    Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）</div><div class="line">    Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）</div><div class="line">    Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）</div><div class="line">    Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）</div><div class="line">8. Math.sign()用来判断一个值的正负</div><div class="line">9. 指数运算符</div></pre></td></tr></table></figure></p>
<p>2 <strong> 2 // 4<br>2 </strong> 3 // 8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### enhanced array expression数组的扩展</div><div class="line"></div><div class="line">1. Array.from()</div><div class="line"></div><div class="line">&gt;将类数组（array-like object）与可遍历(literable)对象转化成真数组</div></pre></td></tr></table></figure></p>
<p>//兼容性<br>const toArray = (() =&gt;<br>  Array.from ? Array.from : obj =&gt; [].slice.call(obj)<br>)();</p>
<p>let arrayLike = {<br>    ‘0’: ‘a’,<br>    ‘1’: ‘b’,<br>    ‘2’: ‘c’,<br>    length: 3<br>};<br>var arr1=[].slice.call(arrayLike);//ES5<br>var arr2=Array.from(arrayLike);//ES6</p>
<p>let ps=document.querySelectorAll(‘p’);//NodeList对象<br>Array.from(ps).forEach(p=&gt;condole.log(p));</p>
<p>function foo(){<br>    Array.from(arguments);//arguments对象<br>}<br>//事实上，部署了Iterator接口的数据结构，Array.from都能将其转为数组<br>Array.from(‘hello’);//[‘h’, ‘e’, ‘l’, ‘l’, ‘o’]<br>let nameSet=new Set([‘a’,’b’]);<br>Array.from(nameSet);//[‘a’,’b’]<br>//第二个参数<br>Array.from([1, 2, 3], (x) =&gt; x * x)<br>// [1, 4, 9]<br>Array.from([1, , 2, , 3], (n) =&gt; n || 0)<br>// [1, 0, 2, 0, 3]   布尔值为false的成员转为0。<br>function typesOf () {<br>  return Array.from(arguments, value =&gt; typeof value)<br>}<br>typesOf(null, [], NaN)<br>// [‘object’, ‘object’, ‘number’] 返回各种类型的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">另辟蹊径 ...也可以将某些数据转为数组</div><div class="line"></div><div class="line">&gt;扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。Array.from方法则是</div><div class="line">还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，</div><div class="line">都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</div></pre></td></tr></table></figure>
<p>function foo(){<br>    var args=[…arguements];<br>}<br>[…document.querySelectorAll(‘div’)];//NodeList<br>Array.from({ length: 3 });<br>// [ undefined, undefined, undefined ]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">More MDN info:[Array.from()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)</div><div class="line"></div><div class="line">2. Array.of()</div><div class="line">为弥补Array()构造函数的不足，将一组值转为数组</div></pre></td></tr></table></figure></p>
<p>//hacker<br>function ArrayOf(){<br>  return [].slice.call(arguments);<br>}</p>
<p>Array() // []<br>Array(3) // [, , ,]<br>Array(3, 11, 8) // [3, 11, 8]</p>
<p>Array.of(3, 11, 8) // [3,11,8]<br>Array.of(3) // [3]<br>Array.of(3).length // 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 数组实例的copyWithin()</div></pre></td></tr></table></figure></p>
<p>Array.prototype.copyWithin(target, start = 0, end = this.length)<br>//target（必需）：从该位置开始替换数据<br>[1, 2, 3, 4, 5].copyWithin(0, 3)<br>// [4, 5, 3, 4, 5]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. find()和findIndex()</div></pre></td></tr></table></figure>
<p>[1, 4, -5, 10].find((n) =&gt; n &lt; 0);//参数为回调函数<br>[1, 5, 10, 15].findIndex(function(value, index, arr) {<br>  return value &gt; 9;<br>}) // 2  返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。<br>[NaN].indexOf(NaN)<br>// -1  这两个方法都可以发现NaN，弥补了数组的IndexOf方法的不足<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. fill()</div></pre></td></tr></table></figure></p>
<p>//使用给定值填充一个数组<br>[‘a’, ‘b’, ‘c’].fill(7)<br>// [7, 7, 7]<br>new Array(3).fill(7)<br>// [7, 7, 7]<br>[‘a’, ‘b’, ‘c’].fill(7, 1, 2)<br>// [‘a’, 7, ‘c’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. entries(),keys(),values() 都返回一个遍历器对象</div></pre></td></tr></table></figure></p>
<p>//keys()对键名的遍历<br>for (let index of [‘a’, ‘b’].keys()) {<br>  console.log(index);<br>}<br>// 0<br>// 1<br>//values()对键值的遍历<br>for (let elem of [‘a’, ‘b’].values()) {<br>  console.log(elem);<br>}<br>// ‘a’<br>// ‘b’<br>//entries()对键值对的遍历<br>for (let [index, elem] of [‘a’, ‘b’].entries()) {<br>  console.log(index, elem);<br>}<br>// 0 “a”<br>// 1 “b”<br>//不用for…of手动next遍历<br>let letter = [‘a’, ‘b’, ‘c’];<br>let entries = letter.entries();<br>console.log(entries.next().value); // [0, ‘a’]<br>console.log(entries.next().value); // [1, ‘b’]<br>console.log(entries.next().value); // [2, ‘c’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. includes() 某个数组是否包含给定的值</div></pre></td></tr></table></figure></p>
<p>[1, 2, 3].includes(2);     // true<br>[1, 2, 3].includes(4);     // false<br>[1, 2, NaN].includes(NaN); // true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">8. 空位</div><div class="line">注意，空位不是undefined，一个位置的值等于undefined，</div><div class="line">依然是有值的。空位是没有任何值，in运算符可以说明这一点。</div></pre></td></tr></table></figure>
<p>0 in [undefined, undefined, undefined] // true<br>0 in [, , ,] // false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ES5对空位的处理，已经很不一致了，大多数情况下会忽略空位。</div><div class="line">forEach(),filter(),every(),some()跳过空位；map()跳过空位但保留该值</div><div class="line">；join(),toString(),将空位视为undefined，而undefined和null被处理成空字符串</div><div class="line"></div><div class="line">ES6明确将空位转为undefined 即不忽略空位</div></pre></td></tr></table></figure></p>
<p>Array.from([‘a’,,’b’])<br>// [ “a”, undefined, “b” ]<br>[…[‘a’,,’b’]]<br>// [ “a”, undefined, “b” ]<br>[,’a’,’b’,,].copyWithin(2,0) // [,”a”,,”a”]<br>new Array(3).fill(‘a’) // [“a”,”a”,”a”]<br>let arr = [, ,];<br>for (let i of arr) {<br>  console.log(1);<br>}<br>// 1<br>// 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt;Callee-evaluated default parameter values.  </div><div class="line">Turn an array into consecutive arguments in a function call.  </div><div class="line">Bind trailing parameters to an array.  </div><div class="line">Rest replaces the need for `arguments` and addresses common cases more directly.</div></pre></td></tr></table></figure></p>
<p>function f(x, y=12) {<br>  return x + y;<br>}<br>f(3) == 15;<br>// ES5 y=undefined||12<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>function f(x, …y) {<br>  return x <em> y.length;<br>}<br>f(3, “hello”, true) == 6;<br>//ES5<br>“use strict”;<br>function f(x) {<br>  for (var _len = arguments.length, y = Array(_len &gt; 1 ? _len - 1 : 0), _key = 1; _key &lt; _len; _key++) {<br>    y[_key - 1] = arguments[_key];<br>  }<br>  return x </em> y.length;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>function f(x, y, z) {<br>  return x + y + z;<br>}<br>// Pass each elem of array as argument<br>f(…[1,2,3]) == 6<br>var str = “foo”<br>var chars = [ …str ] // [ “f”, “o”, “o” ],ES5 var chars = str.split(“”); // [ “f”, “o”, “o” ]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">More MDN info: [Default parameters](https://developer.mozilla.org/en-US/docs/Web//Reference/Functions/Default_parameters), [Rest parameters](https://developer.mozilla.org/en-US/docs/Web//Reference/Functions/rest_parameters), [Spread Operator](https://developer.mozilla.org/en-US/docs/Web//Reference/Operators/Spread_operator)</div><div class="line"></div><div class="line">### enhanced function expression函数的扩展</div><div class="line"></div><div class="line">1. 参数默认值</div><div class="line"></div><div class="line">基本用法</div></pre></td></tr></table></figure></p>
<p>//ES5<br>function log(x, y) {<br>  y = y || ‘World’;<br>  console.log(x, y);<br>}<br>//ES6,参数默认值是惰性求值的<br>let m=’My’<br>function log(x, y = m+’World’) {<br>  console.log(x, y);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">结合解耦赋值</div></pre></td></tr></table></figure></p>
<p>function fetch(url,{body=’’,method=’GET’,headers={} }){<br>    //…<br>}<br>fetch(‘<a href="http://example.com" target="_blank" rel="external">http://example.com</a>‘, {})<br>// “GET”<br>fetch(‘<a href="http://example.com" target="_blank" rel="external">http://example.com</a>‘)<br>// 报错,函数fetch的第二个参数是一个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">函数的length属性:没有指定默认值的参数个数</div></pre></td></tr></table></figure></p>
<p>(function (a) {}).length // 1<br>(function (a = 5) {}).length // 0<br>(function (a, b, c = 5) {}).length // 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">作用域</div></pre></td></tr></table></figure></p>
<p>//调用函数f时，参数形成一个单独的作用域<br>let x = 1;<br>function f(y = x) {<br>  let x = 2;<br>  console.log(y);<br>}<br>f() // 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">应用</div></pre></td></tr></table></figure></p>
<p>function throwIfMissing() {<br>  throw new Error(‘Missing parameter’);<br>}</p>
<p>function foo(mustBeProvided = throwIfMissing()) {<br>  return mustBeProvided;<br>}<br>foo()<br>// Error: Missing parameter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. rest 参数</div></pre></td></tr></table></figure></p>
<p>(function(a) {}).length  // 1<br>(function(…a) {}).length  // 0<br>(function(a, …b) {}).length  // 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. spread...  扩展运算符,好比 rest 参数的逆运算</div><div class="line">主要用于函数运算</div></pre></td></tr></table></figure></p>
<p>function push(array, …items) {<br>  array.push(…items);<br>}</p>
<p>function add(x, y) {<br>  return x + y;<br>}</p>
<p>var numbers = [4, 38];<br>add(…numbers) // 42<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">替代数组的apply方法</div></pre></td></tr></table></figure></p>
<p>// ES5的写法<br>function f(x, y, z) {<br>  // …<br>}<br>var args = [0, 1, 2];<br>f.apply(null, args);</p>
<p>// ES6的写法<br>function f(x, y, z) {<br>  // …<br>}<br>var args = [0, 1, 2];<br>f(…args);<br>//应用<br>Math.max.apply(null, [14, 3, 77]);// ES5<br>Math.max(…[14, 3, 77]);// ES6<br>Math.max(14, 3, 77);// 等同于</p>
<p>var arr1=[1,2,3],arr2=[4,5];<br>Array.prototype.push.apply(arr1,arr2);//ES5<br>arr1.push(…arr2);//ES6<br>new (Date.bind.apply(Date, [null, 2015, 1, 1]));//ES5<br>new Date(…[2015, 1, 1]);// ES6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">扩展运算符应用</div><div class="line"></div><div class="line">1. 数组合并</div></pre></td></tr></table></figure></p>
<p>arr1.concat(arr2,arr3);//ES5<br>[…arr1,…arr2,…arr3];//ES6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 结合解耦:将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</div></pre></td></tr></table></figure></p>
<p>const [first, …rest] = [1, 2, 3, 4, 5];<br>first // 1<br>rest  // [2, 3, 4, 5]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3.函数返回值</div><div class="line"></div><div class="line">&gt;JS函数只能有一个返回值，如果返回多个值只能将其放入数组或对象中返回</div></pre></td></tr></table></figure></p>
<p>var dateFields=readDateFields(datebase);<br>var d=new Date(…dateFields);<br>//上面代码从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数Date。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. 字符串:将字符串转为真正的数组。</div></pre></td></tr></table></figure></p>
<p>[…’hello’]<br>// [ “h”, “e”, “l”, “l”, “o” ]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. 实现了Iterator接口的对象</div><div class="line"></div><div class="line">&gt;任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。</div></pre></td></tr></table></figure></p>
<p>var nodeList = document.querySelectorAll(‘div’);<br>var array = […nodeList];</p>
<p>let arrayLike = {<br>  ‘0’: ‘a’,<br>  ‘1’: ‘b’,<br>  ‘2’: ‘c’,<br>  length: 3<br>};<br>let arr = […arrayLike];<br>// TypeError: Cannot spread non-iterable object.<br>//arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. Map和Set结构，Generator函数</div></pre></td></tr></table></figure></p>
<p>let map = new Map([<br>  [1, ‘one’],<br>  [2, ‘two’],<br>  [3, ‘three’],<br>]);<br>let arr = […map.keys()]; // [1, 2, 3]<br>var go = function*(){<br>  yield 1;<br>  yield 2;<br>  yield 3;<br>};<br>[…go()] // [1, 2, 3]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. 严格模式</div><div class="line">&gt;ES5中函数内部可设定为严格模式，ES6中规定函数参数一旦使用了默认值，</div><div class="line">解耦赋值，或者扩展运算符，那么函数内就不能设定为严格模式。不合理之处在于</div><div class="line">函数执行时先执行参数代码再执行函数体代码，而只有执行了函数体代码才知道是否</div><div class="line">遵循严格模式。</div><div class="line"></div><div class="line">*为规避之，可以全局设置严格模式或者把函数放于一个IIFE中*</div></pre></td></tr></table></figure></p>
<p>  ‘use strict’;<br>  //or…<br>const doSomething = (function () {<br>  ‘use strict’;<br>  return function(value = 42) {<br>    return value;<br>  };<br>}());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. name属性：函数的函数名</div></pre></td></tr></table></figure></p>
<p>var f = function () {};<br>f.name // “f”  ES6<br>const bar = function baz() {};<br>bar.name // “baz”<br>(new Function).name // “anonymous”<br>function foo() {};<br>foo.bind({}).name // “bound foo”<br>(function(){}).bind({}).name // “bound “<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 箭头函数</div><div class="line"></div><div class="line">&gt;Arrows are a function shorthand using the `=&gt;` syntax.  They are syntactically similar to</div><div class="line"> the related feature in C#, Java 8 and CoffeeScript(和C#，Java8及CoffeeScript类似).  </div><div class="line"> They support both statement block bodies as well as expression bodies which return the value of the expression.  </div><div class="line"> Unlike functions, arrows share the same lexical `this` as their surrounding code(异于function，箭头函数和其EC</div><div class="line"> 共享this).</div></pre></td></tr></table></figure></p>
<p>// Expression bodies表达式主体<br>var odds = evens.map(v =&gt; v + 1);<br>var nums = evens.map((v, i) =&gt; v + i);<br>var pairs = evens.map(v =&gt; ({even: v, odd: v + 1}));<br>// Statement bodies声明式主体<br>nums.forEach(v =&gt; {<br>  if (v % 5 === 0)<br>    fives.push(v);<br>});</p>
<p>// Lexical this共享this<br>this.nums.forEach((v) =&gt; {<br>    if (v % 5 === 0)<br>        this.fives.push(v)<br>})<br>//ES5<br>odds  = evens.map(function (v) { return v + 1; });<br>pairs = evens.map(function (v) { return { even: v, odd: v + 1 }; });<br>nums  = evens.map(function (v, i) { return v + i; });<br>nums.forEach(function (v) {<br>   if (v % 5 === 0)<br>       fives.push(v);<br>});<br>//  variant 1<br>var self = this;<br>this.nums.forEach(function (v) {<br>    if (v % 5 === 0)<br>        self.fives.push(v);<br>});</p>
<p>//  variant 2<br>this.nums.forEach(function (v) {<br>    if (v % 5 === 0)<br>        this.fives.push(v);<br>}, this);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注意点：</div><div class="line"></div><div class="line">- 函数体内this对象为定义时而非使用时所在的对象</div><div class="line">- 不可作为构造函数</div><div class="line">- 不可使用arguments对象，可用rest参数代替</div><div class="line">- 不可作为generator函数，因不可使用yield命令</div><div class="line"></div><div class="line">箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。</div></pre></td></tr></table></figure></p>
<p>var handler = {<br>  id: ‘123456’,<br>  init: function() {<br>    document.addEventListener(‘click’,<br>      event =&gt; this.doSomething(event.type), false);<br>  },<br>  doSomething: function(type) {<br>    console.log(‘Handling ‘ + type  + ‘ for ‘ + this.id);<br>  }<br>};</p>
<p>function foo() {<br>  return () =&gt; {<br>    return () =&gt; {<br>      return () =&gt; {<br>        console.log(‘id:’, this.id);<br>      };<br>    };<br>  };<br>}</p>
<p>var f = foo.call({id: 1});<br>var t1 = f.call({id: 2})()(); // id: 1<br>var t2 = f().call({id: 3})(); // id: 1<br>var t3 = f()().call({id: 4}); // id: 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">More info: [MDN Arrow Functions](https://developer.mozilla.org/en/docs/Web//Reference/Functions/Arrow_functions)</div><div class="line"></div><div class="line">8. 尾调用（tail call，算法层）优化</div><div class="line"></div><div class="line">&gt;Tail Call 函数式编程的重要概念，某个函数最后一步调用的是另一个函数</div><div class="line">函数调用会在内存中形成一个调用记录（call frame）,保存调用位置和内部变量等信息</div></pre></td></tr></table></figure></p>
<p>//模型<br>function f(x){<br>  return g(x);<br>}<br>function f() {<br>  let m = 1;<br>  let n = 2;<br>  return g(m + n);<br>}<br>f();<br>// 等同于<br>function f() {<br>  return g(3);<br>}<br>f();<br>// 等同于<br>g(3);<br>//注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。<br>function addOne(a){<br>  var one = 1;<br>  function inner(b){<br>    return b + one;<br>  }<br>  return inner(a);<br>}//并未优化<br>//curring将多参数的函数转换成单参数的形式。<br>function currying(fn, n) {<br>  return function (m) {<br>    return fn.call(this, m, n);<br>  };<br>}<br>//算法复杂度由O(n)降到O(1)<br>function tailFactorial(n, total) {<br>  if (n === 1) return total;<br>  return tailFactorial(n - 1, n <em> total);<br>}<br>const factorial = currying(tailFactorial, 1);<br>factorial(5) // 120<br>//ES6的默认值<br>function factorial(n, total = 1) {<br>  if (n === 1) return total;<br>  return factorial(n - 1, n </em> total);<br>}<br>factorial(5) // 120<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### enhanced object expression对象的扩展</div><div class="line"></div><div class="line">1. 属性的简洁表示</div></pre></td></tr></table></figure></p>
<p>var foo=’bar’;<br>var baz={foo};//{foo:’bar’},可将对象的属性或方法直接写成变量或函数<br>function f(x, y) {return {x, y};}<br>var o={<br>    method(){},<br>}<br>//getter,setter<br>var cart = {<br>  _wheels: 4,<br>  get wheels () {<br>    return this._wheels;<br>  },<br>  set wheels (value) {<br>    if (value &lt; this._wheels) {<br>      throw new Error(‘数值太小了！’);<br>    }<br>    this._wheels = value;<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 属性名表达式</div></pre></td></tr></table></figure></p>
<p>//JS定义对象属性方法<br>obj.foo=true;//一<br>obj[‘a’+’bc’]=123;//二<br>var obj={foo:true,abc:123};//ES5<br>let propKey = ‘foo’;<br>//ES6<br>let obj = {</p>
<p>};<br>let obj = {<br>  <a href="">‘h’ + ‘ello’</a> {<br>    return ‘hi’;<br>  }<br>};<br>obj.hello() // hi<br>//属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]<br>const keyA = {a: 1};<br>const keyB = {b: 2};<br>const myObject = {</p>
<p>};<br>myObject // Object {[object Object]: “valueB”}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 方法的name属性</div></pre></td></tr></table></figure></p>
<p>const person = {<br>  sayName() {<br>    console.log(‘hello!’);<br>  },<br>};<br>person.sayName.name   // “sayName”<br>/<em><br>如果对象的方法使用了取值函数（getter）和存值函数（setter），<br>则name属性不是在该方法上面，而是该方法的属性的描述对象的<br>get和set属性上面，返回值是方法名前加上get和set。
</em>/<br>const obj = {<br>  get foo() {},<br>  set foo(x) {}<br>};<br>obj.foo.name<br>// TypeError: Cannot read property ‘name’ of undefined<br>const descriptor = Object.getOwnPropertyDescriptor(obj, ‘foo’);<br>descriptor.get.name // “get foo”<br>descriptor.set.name // “set foo”</p>
<p>(new Function()).name // “anonymous”</p>
<p>var doSomething = function() {<br>  // …<br>};<br>doSomething.bind().name // “bound doSomething”<br>//如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。<br>const key1 = Symbol(‘description’);<br>const key2 = Symbol();<br>let obj = {<br>  <a href="">key1</a> {},<br>  <a href="">key2</a> {},<br>};<br>obj[key1].name // “[description]”<br>obj[key2].name // “”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. Object.is()</div><div class="line"></div><div class="line">&gt; ES5中只有==（自动转换数据类型）和===（NaN!=NaN,+0==-0）,ES6中提出</div><div class="line">Same-value equality 同值相等</div></pre></td></tr></table></figure></p>
<p>Object.is(‘foo’, ‘foo’);// true<br>Object.is({}, {});// false<br>+0 === -0 //true<br>NaN === NaN // false<br>Object.is(+0, -0) // false<br>Object.is(NaN, NaN) // true<br>Object.defineProperty(Object, ‘is’, {<br>  value: function(x, y) {<br>    if (x === y) {<br>      // 针对+0 不等于 -0的情况<br>      return x !== 0 || 1 / x === 1 / y;<br>    }<br>    // 针对NaN的情况<br>    return x !== x &amp;&amp; y !== y;<br>  },<br>  configurable: true,<br>  enumerable: false,<br>  writable: true<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. Object.assign()</div><div class="line"></div><div class="line">用于对象合并，将源对象(source)所有可枚举属性，复制到目标对象(target)</div></pre></td></tr></table></figure></p>
<p>var target={a:1};<br>var source1={b:2};<br>var source2={c:3};<br>Object.assign(target,source1,source2);<br>target;//{a:1,b:2,c:3}<br>var obj = {a: 1};<br>Object.assign(obj) === obj // true,如果只有一个参数，Object.assign会直接返回该参数。<br>typeof Object.assign(2) // “object” 如果该参数不是对象，则会先转成对象，然后返回。<br>Object.assign(undefined) // 报错<br>Object.assign(null) // 报错,由于undefined和null无法转成对象<br>Object.assign(obj, undefined) === obj // true,如果无法转成对象，就会跳过</p>
<p>var v1 = ‘abc’;<br>var v2 = true;<br>var v3 = 10;<br>var obj = Object.assign({}, v1, v2, v3);<br>console.log(obj); // { “0”: “a”, “1”: “b”, “2”: “c” }<br>//只有字符串的包装对象，会产生可枚举属性。故除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。<br>Object(true) // {[[PrimitiveValue]]: true}<br>Object(10)  //  {[[PrimitiveValue]]: 10}<br>Object(‘abc’) // {0: “a”, 1: “b”, 2: “c”, length: 3, [[PrimitiveValue]]: “abc”}</p>
<p>Object.assign({b: ‘c’},<br>  Object.defineProperty({}, ‘invisible’, {<br>    enumerable: false,<br>    value: ‘hello’<br>  })<br>)<br>// { b: ‘c’ } ，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</p>
<p>Object.assign({ a: ‘b’ }, { [Symbol(‘c’)]: ‘d’ })<br>// { a: ‘b’, Symbol(c): ‘d’ }</p>
<p>Object.assign([1, 2, 3], [4, 5])<br>// [4, 5, 3] ，把数组视为对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">*Object.assign进行的是浅拷贝*</div><div class="line"></div><div class="line">应用：</div><div class="line"></div><div class="line">1. 为对象添加属性</div></pre></td></tr></table></figure></p>
<p>class Point{<br>    constructor(x,y){<br>        Object.assign(this,{x,y});//将x属性和y属性添加到Point类的对象实例。<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 为对象添加方法</div></pre></td></tr></table></figure></p>
<p>Object.assign(SomeClass.prototype, {<br>  someMethod(arg1, arg2) {<br>  },<br>  anotherMethod() {<br>  }<br>});<br>//等同于<br>SomeClass.prototype.someMethod = function (arg1, arg2) {<br>};<br>SomeClass.prototype.anotherMethod = function () {<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 克隆对象</div></pre></td></tr></table></figure></p>
<p>function clone(origin){<br>    return Object.assign({},origin);<br>}//只克隆原始对象自身的值而克隆不了其继承的值<br>function clone(origin){<br>    let originProto=Object.getPrototypeOf(origin);<br>    return Object.assign(Object.create(originProto),origin);<br>}//不仅克隆本身还克隆其继承的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4.合并对象</div></pre></td></tr></table></figure></p>
<p>//将多个对象合并到某个对象<br>const merge=(target,…source)=&gt;Object.assign(target,…source);<br>//合并后返回一个新对象<br>const merge=(…source)=&gt;Object.assign({},…source);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. 为属性指定默认值</div></pre></td></tr></table></figure></p>
<p>const DEFAULTS = {<br>  logLevel: 0,<br>  outputFormat: ‘html’<br>};</p>
<p>function processContent(options) {<br>  options = Object.assign({}, DEFAULTS, options);<br>  console.log(options);<br>  // …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6.属性的可枚举性：Object.getOwnPropertyDescriptor可以获取该属性的描述对象</div></pre></td></tr></table></figure></p>
<p>let obj = { foo: 123 };<br>Object.getOwnPropertyDescriptor(obj, ‘foo’)<br>//  {<br>//    value: 123,<br>//    writable: true,<br>//    enumerable: true,<br>//    configurable: true<br>//  }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*ES5的三个操作会忽略enumerable为false的属性*</div><div class="line">- for...in循环:只遍历对象自身*及继承的*可枚举属性</div><div class="line">- Object.keys():返回对象自身所有科美居属性的键名</div><div class="line">- JSON.stringify():只串行化对象自身的可枚举属性</div><div class="line">- ES 6中Object.assign()会忽略enumerable为false的属性,只拷贝对象自身可枚举属性</div></pre></td></tr></table></figure></p>
<p>Object.getOwnPropertyDescriptor(Object.prototype, ‘toString’).enumerable<br>// false<br>Object.getOwnPropertyDescriptor([], ‘length’).enumerable<br>// false<br>Object.getOwnPropertyDescriptor(class {foo() {}}.prototype, ‘foo’).enumerable<br>// false,故for…in不会遍历到这两个继承自原型的属性。<br>//一般我们只关心对象自身的属性。所以，尽量不要用for…in循环，而用Object.keys()代替。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. 属性遍历</div><div class="line"></div><div class="line">  1. for...in :对象自身的和继承的可枚举属性（不含Symbol属性）。</div><div class="line">  2. Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</div><div class="line">  3. Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</div><div class="line">  4. Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</div><div class="line">  5. Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</div></pre></td></tr></table></figure></p>
<p>Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })<br>// [‘2’, ‘10’, ‘b’, ‘a’, Symbol()]<br>//遍历顺序：数值&gt;字符串&gt;Symbol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">8. __proto__属性，Object.setPrototypeOf(),Object.getPrototypeOf()</div><div class="line"></div><div class="line">&gt; __proto__读取或设置对象的prototype对象，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性</div><div class="line">后边几个替代之</div></pre></td></tr></table></figure></p>
<p>Object.getPrototypeOf({ <strong>proto</strong>: null })<br>// null,设置了<strong>proto</strong>属性的对象，其值既是对象的原型<br>// 格式, ES6 正式推荐<br>Object.setPrototypeOf(object, prototype);<br>Object.getPrototypeOf(obj);<br>// 用法<br>var o = Object.setPrototypeOf({}, null);<br>function Rectangle() {<br>  // …<br>}<br>var rec = new Rectangle();<br>Object.getPrototypeOf(rec) === Rectangle.prototype<br>// true<br>Object.setPrototypeOf(rec, Object.prototype);<br>Object.getPrototypeOf(rec) === Rectangle.prototype<br>// false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">9. Object.keys(),Object.values(),Object.entries()</div><div class="line"></div><div class="line">10. 对象的扩展运算符</div><div class="line"></div><div class="line">  1. 解耦</div></pre></td></tr></table></figure></p>
<p>  let { x, y, …z } = { x: 1, y: 2, a: 3, b: 4 };<br>  x // 1<br>  y // 2<br>  z // { a: 3, b: 4 }<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 扩展运算符</div></pre></td></tr></table></figure></p>
<p>  let z = { a: 3, b: 4 };<br>  let n = { …z };<br>  n // { a: 3, b: 4 }<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">11.  Object.getOwnPropertyDescriptors() </div><div class="line"></div><div class="line">&gt; 指定对象所有自身属性（非继承属性）的描述对象</div></pre></td></tr></table></figure></p>
<p>const obj = {<br>  foo: 123,<br>  get bar() { return ‘abc’ }<br>};</p>
<p>Object.getOwnPropertyDescriptors(obj)<br>// { foo:<br>//    { value: 123,<br>//      writable: true,<br>//      enumerable: true,<br>//      configurable: true },<br>//   bar:<br>//    { get: [Function: bar],<br>//      set: undefined,<br>//      enumerable: true,<br>//      configurable: true } }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">12. Null传导运算符(Babel尚未支持)</div><div class="line"></div><div class="line">More info: [MDN Grammar and types: Object literals](https://developer.mozilla.org/en-US/docs/Web//Guide/Grammar_and_types#Object_literals)</div><div class="line"></div><div class="line">### Symbol</div><div class="line"></div><div class="line">1. ES5对象属性名都是容易造成命名冲突的字符串，引入Symbol数据类型从根本上解决了此问题</div><div class="line"> </div><div class="line">*注意symbol不能用new命令，因为生成Symbol对象是一个原始类型的值，而非对象*</div></pre></td></tr></table></figure></p>
<p> let s=Symbol();<br> typeof s;//‘symbol’<br>//Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。<br>var s1=Symbol(‘foo’);<br>s1;//Symbol(foo)<br>s1.toString();//“Symbol(foo)”<br>//Symbol函数的参数只是表示对当前 Symbol 值的描述<br>var s2 = Symbol(‘foo’);<br>s1 === s2 // false<br>String(s1);//“Symbol(foo)”<br>“your symbol is “ + s1;//Symbol不能与其它类型值进行运算，但可以显示转为字符串<br>var sym = Symbol();<br>Boolean(sym) // true<br>!sym  // false<br>if (sym) {<br>  // …<br>}<br>Number(sym) // TypeError<br>sym + 2 // TypeError,Symbol值也可以转为布尔值，但是不能转为数值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 作为属性名的Symbol</div></pre></td></tr></table></figure></p>
<p>var mySymbol=Symbol();<br>var a={};<br>a[mySymbol]=’hello!’;<br>var a={[mySymbol]:’hello!’};<br>Object.defineProperty(a,mySymbol,{value:’hello!’});<br>a[mySymbol];//‘hello!’<br>//Symbol值作为对象属性名时，由于点运算符后面总是字符串不会读取mySymbol作为标识名所指代的那个值不能用点运算符<br>a.mySymbol=’hello!’;<br>a.mySymbol;//‘undefined’<br>a[‘mySymbol’];//‘hello!’<br>let s = Symbol();<br>let obj = {<br>   <a href="arg">s</a> { … }<br>};<br>obj<a href="123">s</a>;<br>//实例，常量使用Symbol的好处是任何值都不可能有相同值了，且Symbol值作为属性名时该属性为公有属性<br>const COLOR_RED    = Symbol();<br>const COLOR_GREEN  = Symbol();<br>function getComplement(color) {<br>  switch (color) {<br>    case COLOR_RED:<br>      return COLOR_GREEN;<br>    case COLOR_GREEN:<br>      return COLOR_RED;<br>    default:<br>      throw new Error(‘Undefined color’);<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 消除魔术字符串</div></pre></td></tr></table></figure></p>
<p>const shapeType = {<br>  triangle: Symbol()<br>};<br>function getArea(shape, options) {<br>  var area = 0;<br>  switch (shape) {<br>    case shapeType.triangle:<br>      area = .5 <em> options.width </em> options.height;<br>      break;<br>  }<br>  return area;<br>}</p>
<p>getArea(shapeType.triangle, { width: 100, height: 100 });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. 属性名遍历</div><div class="line"></div><div class="line">&gt; Symbol作为属性名，该属性不会出现在for...in，for...of,Object.keys(),</div><div class="line">Object.getOwnPropertyNames(),JSON.stringify()返回，但也不是私有属性，唯有</div><div class="line">Object.getOwnPropertySymbols可以获取指定对象的所有Symbol属性名。</div></pre></td></tr></table></figure></p>
<p>var obj = {};<br>var a = Symbol(‘a’);<br>var b = Symbol(‘b’);<br>obj[a] = ‘Hello’;<br>obj[b] = ‘World’;<br>Object.getOwnPropertySymbols(obj);// [Symbol(a), Symbol(b)]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. Symbol.for(),Symbol.keyFor()</div><div class="line"></div><div class="line">More info: [MDN Symbol](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/Symbol)</div><div class="line"></div><div class="line">###  Map + Set </div><div class="line"></div><div class="line">&gt;Efficient data structures for common algorithms.  WeakMaps provides leak-free object-key’d side tables.</div><div class="line"></div><div class="line">1. Set</div><div class="line"></div><div class="line">&gt; ES6新的数据结构之一，类似数组但成员唯一，Set本身是一个构造函数用来生成Set数据结构</div></pre></td></tr></table></figure></p>
<p>var set = new Set([1, 2, 3, 4, 4]);<br>[…set] // [1, 2, 3, 4]<br>set.size // 4<br>function divs () {<br>  return […document.querySelectorAll(‘div’)];<br>}<br>var set = new Set(divs());//or<br>divs().forEach(div =&gt; set.add(div));<br>set.size // 56<br>//Set内部，NaN相等而两个对象不等<br>let set = new Set();<br>let a = NaN;<br>let b = NaN;<br>set.add(a);<br>set.add(b);<br>set // Set {NaN}</p>
<p>et.add({});<br>set.size // 1<br>set.add({});<br>set.size // 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Set实例的属性和方法</div><div class="line"></div><div class="line">属性：</div><div class="line"></div><div class="line">- Set.prototype.constructor</div><div class="line">- Set.prototype.size</div><div class="line"></div><div class="line">方法</div><div class="line"></div><div class="line">- add(value)</div><div class="line">- clear()</div><div class="line">- delete(value)</div><div class="line">- has(value)</div><div class="line"></div><div class="line">遍历:Set的遍历顺序就是插入顺序</div><div class="line"></div><div class="line">- keys()</div><div class="line">- values()</div><div class="line">- entries()</div><div class="line">- forEach()</div><div class="line"></div><div class="line">Array.from可以将Set结构转为数组</div></pre></td></tr></table></figure></p>
<p>var items=new Set([1,2,3,4,5]);<br>var array=Array.from(items);<br>[…new Set(arr)]//不失为数组去重的好方法<br>Array.from(new Set(arr));//不失为数组去重的好方法</p>
<p>let set = new Set([‘red’, ‘green’, ‘blue’]);<br>for (let item of set.keys()) {<br>  console.log(item);<br>}<br>// red green blue<br>for (let item of set.values()) {<br>  console.log(item);<br>}<br>// red green blue<br>for (let item of set.entries()) {<br>  console.log(item);<br>}<br>// [“red”, “red”]<br>// [“green”, “green”]<br>// [“blue”, “blue”]</p>
<p>Set.prototype[Symbol.iterator] === Set.prototype.values;//可以省略values方法<br>// true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. WeakSet</div><div class="line"></div><div class="line">&gt;WeakSet成员只能是弱引用对象，成员不可遍历</div><div class="line"></div><div class="line">3. Map</div><div class="line"></div><div class="line">&gt;JS对象本质是键值对的集合（hash结构），但传统上只能用字符串作键。ES6中</div><div class="line">的Map类对象的数据结构使得各种类型的值都可以作键，是一种更完善的hash结构实现</div></pre></td></tr></table></figure>
<p>var m = new Map();<br>var o = {p: ‘Hello World’};<br>m.set(o, ‘content’)<br>m.get(o) // “content”<br>m.has(o) // true<br>m.delete(o) // true<br>m.has(o) // false</p>
<p>var map = new Map([<br>  [‘name’, ‘张三’],<br>  [‘title’, ‘Author’]<br>]);<br>map.size // 2<br>map.has(‘name’) // true<br>map.get(‘name’) // “张三”<br>map.has(‘title’) // true<br>map.get(‘title’) // “Author”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">实例和属性的操作方法</div><div class="line"></div><div class="line">1. size</div></pre></td></tr></table></figure></p>
<p>let map = new Map();<br>map.set(‘foo’, true);<br>map.set(‘bar’, false);<br>map.size // 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. set(key, value)</div></pre></td></tr></table></figure></p>
<p>var m = new Map();<br>m.set(“edition”, 6)        // 键是字符串<br>m.set(262, “standard”)     // 键是数值<br>m.set(undefined, “nah”)    // 键是undefined<br>let map = new Map()<br>  .set(1, ‘a’)<br>  .set(2, ‘b’)<br>  .set(3, ‘c’);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. get(key)</div></pre></td></tr></table></figure></p>
<p>var m = new Map();<br>var hello = function() {console.log(“hello”);}<br>m.set(hello, “Hello ES6!”) // 键是函数<br>m.get(hello)  // Hello ES6!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. has(key)</div><div class="line">5. delete(key)</div><div class="line">6. clear()</div><div class="line"></div><div class="line">遍历方法同Set</div><div class="line">与其它数据结构的互换</div><div class="line"></div><div class="line">  1. 数组</div></pre></td></tr></table></figure></p>
<p>let myMap = new Map().set(true, 7).set({foo: 3}, [‘abc’]);<br>[…myMap]<br>// [ [ true, 7 ], [ { foo: 3 }, [ ‘abc’ ] ] ]<br>new Map([[true, 7], [{foo: 3}, [‘abc’]]])<br>// Map {true =&gt; 7, Object {foo: 3} =&gt; [‘abc’]}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 对象</div></pre></td></tr></table></figure></p>
<p>function strMapToObj(strMap) {<br>  let obj = Object.create(null);<br>  for (let [k,v] of strMap) {<br>    obj[k] = v;<br>  }<br>  return obj;<br>}</p>
<p>let myMap = new Map().set(‘yes’, true).set(‘no’, false);<br>strMapToObj(myMap)<br>// { yes: true, no: false }<br>function objToStrMap(obj) {<br>  let strMap = new Map();<br>  for (let k of Object.keys(obj)) {<br>    strMap.set(k, obj[k]);<br>  }<br>  return strMap;<br>}<br>objToStrMap({yes: true, no: false})<br>// [ [ ‘yes’, true ], [ ‘no’, false ] ]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. JSON</div></pre></td></tr></table></figure></p>
<p>function strMapToJson(strMap) {<br>  return JSON.stringify(strMapToObj(strMap));<br>}<br>let myMap = new Map().set(‘yes’, true).set(‘no’, false);<br>strMapToJson(myMap)<br>// ‘{“yes”:true,”no”:false}’</p>
<p>function jsonToStrMap(jsonStr) {<br>  return objToStrMap(JSON.parse(jsonStr));<br>}<br>jsonToStrMap(‘{“yes”:true,”no”:false}’)<br>// Map {‘yes’ =&gt; true, ‘no’ =&gt; false}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. WeakMap:只接收不计入GC的对象作为键名</div><div class="line"></div><div class="line">More MDN info: [Map](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/Map), [Set](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/Set), [WeakMap](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/WeakMap), [WeakSet](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/WeakSet)</div><div class="line"></div><div class="line">###  Proxy代理</div><div class="line"></div><div class="line">&gt;用于修改某些操作的默认行为,等同于在语言层面修改，属于meta programming元编程</div><div class="line">即对编程语言编程</div></pre></td></tr></table></figure></p>
<p>//Proxy 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。<br>var obj = new Proxy({}, {<br>  get: function (target, key, receiver) {<br>    console.log(<code>getting ${key}!</code>);<br>    return Reflect.get(target, key, receiver);<br>  },<br>  set: function (target, key, value, receiver) {<br>    console.log(<code>setting ${key}!</code>);<br>    return Reflect.set(target, key, value, receiver);<br>  }<br>});<br>obj.count = 1<br>//  setting count!<br>++obj.count<br>//  getting count!<br>//  setting count!<br>//  2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">proxy支持的操作</div><div class="line"></div><div class="line">- get(target, propKey, receiver) 拦截对象属性的读取</div><div class="line">- set(target, propKey, value, receiver) 拦截对象属性的设置，比如proxy.foo = v或proxy[&apos;foo&apos;] = v，返回一个布尔值。</div><div class="line">- has(target, propKey) 拦截propKey in proxy的操作，返回一个布尔值。</div><div class="line">- deleteProperty(target, propKey) 拦截delete proxy[propKey]的操作，返回一个布尔值。</div><div class="line">- ownKeys(target) 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。</div><div class="line">- getOwnPropertyDescriptor(target, propKey)拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</div><div class="line">- defineProperty(target, propKey, propDesc) 拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</div><div class="line">- preventExtensions(target)拦截Object.preventExtensions(proxy)，返回一个布尔值。</div><div class="line">- getPrototypeOf(target)拦截Object.getPrototypeOf(proxy)，返回一个对象</div><div class="line">- isExtensible(target)拦截Object.isExtensible(proxy)，返回一个布尔值。</div><div class="line">- setPrototypeOf(target, proto)拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。</div><div class="line">- apply(target, object, args)拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</div><div class="line">- construct(target, args)拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。</div></pre></td></tr></table></figure>
<p>// Proxying a normal object<br>var target = {};<br>var handler = {<br>  get: function (receiver, name) {<br>    return <code>Hello, ${name}!</code>;<br>  }<br>};</p>
<p>var p = new Proxy(target, handler);<br>p.world === ‘Hello, world!’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// Proxying a function object<br>var target = function () { return ‘I am the target’; };<br>var handler = {<br>  apply: function (receiver, …args) {<br>    return ‘I am the proxy’;<br>  }<br>};</p>
<p>var p = new Proxy(target, handler);<br>p() === ‘I am the proxy’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">There are traps available for all of the runtime-level meta-operations:</div></pre></td></tr></table></figure></p>
<p>var handler =<br>{<br>  get:…,<br>  set:…,<br>  has:…,<br>  deleteProperty:…,<br>  apply:…,<br>  construct:…,<br>  getOwnPropertyDescriptor:…,<br>  defineProperty:…,<br>  getPrototypeOf:…,<br>  setPrototypeOf:…,<br>  enumerate:…,<br>  ownKeys:…,<br>  preventExtensions:…,<br>  isExtensible:…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">More info: [MDN Proxy](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/Proxy)</div><div class="line"></div><div class="line">###  Reflect</div><div class="line"></div><div class="line">设计目的：</div><div class="line"></div><div class="line">1. 将Object对象一些明显属于语言内部的方法（Object.defineProperty）,放到Reflect对象上</div><div class="line">2. 修改某些Object方法的返回结果，让其变得更合理。</div><div class="line"></div><div class="line">&gt;如，Object.defineProperty(obj, name, desc)在无法定义属性时，</div><div class="line">    会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</div></pre></td></tr></table></figure></p>
<p>//ES5<br>try{<br>    Object.defineProperty(target,property,attributes);<br>}catch(e){}<br>//ES6<br>if(Reflect.defineProperty(target,property,attributes)){<br>//success<br>}else{//failure}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 让Object操作都变成函数行为。</div><div class="line"></div><div class="line">&gt;某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)</div><div class="line">和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</div></pre></td></tr></table></figure></p>
<p>‘assign’ in Object;//true ES5<br>Reflect.has(Object,’assign’);//true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. Reflect对象的方法与Proxy对象的方法一一对应。</div></pre></td></tr></table></figure></p>
<p>var loggedObj = new Proxy(obj, {<br>  get(target, name) {<br>    console.log(‘get’, target, name);<br>    return Reflect.get(target, name);<br>  },<br>  deleteProperty(target, name) {<br>    console.log(‘delete’ + name);<br>    return Reflect.deleteProperty(target, name);<br>  },<br>  has(target, name) {<br>    console.log(‘has’ + name);<br>    return Reflect.has(target, name);<br>  }<br>});</p>
<p>Function.prototype.apply.call(Math.floor, undefined, [1.75]) // 1 ES5<br>Reflect.apply(Math.floor, undefined, [1.75]) // 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 静态方法</div><div class="line"></div><div class="line">- Reflect.apply(target,thisArg,args)</div><div class="line">- Reflect.construct(target,args)</div><div class="line">- Reflect.get(target,name,receiver)</div><div class="line">- Reflect.set(target,name,value,receiver)</div><div class="line">- Reflect.defineProperty(target,name,desc)</div><div class="line">- Reflect.deleteProperty(target,name)</div><div class="line">- Reflect.has(target,name)</div><div class="line">- Reflect.ownKeys(target)</div><div class="line">- Reflect.isExtensible(target)</div><div class="line">- Reflect.preventExtensions(target)</div><div class="line">- Reflect.getOwnPropertyDescriptor(target, name)</div><div class="line">- Reflect.getPrototypeOf(target)</div><div class="line">- Reflect.setPrototypeOf(target, prototype)</div><div class="line">实例：使用Proxy实现观察者模式</div><div class="line"></div><div class="line">&gt; 函数自动观察数据对象，一旦对象有变化函数变化便自动执行</div></pre></td></tr></table></figure></p>
<p>const queuedObservers = new Set();<br>const observe = fn =&gt; queuedObservers.add(fn);<br>const observable = obj =&gt; new Proxy(obj, {set});</p>
<p>function set(target, key, value, receiver) {<br>  const result = Reflect.set(target, key, value, receiver);<br>  queuedObservers.forEach(observer =&gt; observer());<br>  return result;<br>}<br>const person = observable({<br>  name: ‘张三’,<br>  age: 20<br>});<br>function print() {<br>  console.log(<code>${person.name}, ${person.age}</code>)<br>}<br>observe(print);<br>person.name = ‘李四’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Promises</div><div class="line"></div><div class="line">&gt;Promise,简而言之即存放未来才会结束的事件结果的容器。</div><div class="line"></div><div class="line">1. 特点：</div><div class="line">    1. 对象状态不受外部影响。</div><div class="line">    &gt; Promise代表一个异步操作，有三种状态：Pending(进行中)，Resolved(已完成)和</div><div class="line">    Rejected(已失败)。只有异步操作的结果可以决定当前是哪一种状态，也即是Promise名字的由来。</div><div class="line">    2. 状态改变就不会再变，任何时候都可以得到该结果。</div><div class="line">    &gt;Promise对象状态的改变有两种：从Pending变为Resolved和从Pending变为Rejected。</div><div class="line">    只要此二种情况发生就凝固了，结果不会再变。与事件event完全不同（错过了再去监听则得不到结果）</div><div class="line"></div><div class="line">*有了Promise对象即可以同步操作的流程实现异步操作，避免了回调地狱；且Promise对象提供统一接口，简化了异步操作*</div><div class="line">缺点是：</div><div class="line"></div><div class="line">- 无法取消Promise，一旦建立则立即执行；</div><div class="line">- 如无回调函数，内部抛出错误但外部无反应；</div><div class="line">- 当处于Pending时，无法得知目前进行到哪个阶段</div><div class="line">- 如某事件不断发生，stream模式则优于Promise</div><div class="line"></div><div class="line">2. 基本用法</div><div class="line"></div><div class="line">&gt; Promise对象是一个构造函数，用来生成Promise实例</div></pre></td></tr></table></figure></p>
<p>var promise = new Promise(function(resolve, reject) {<br>  if (/<em> 异步操作成功 </em>/){<br>    resolve(value);<br>  } else {<br>    reject(error);<br>  }<br>});<br>//Promise新建后就会立即执行<br>let promise = new Promise(function(resolve, reject) {<br>  console.log(‘Promise’);<br>  resolve();<br>});<br>promise.then(function() {<br>  console.log(‘Resolved.’);<br>});<br>console.log(‘Hi!’);<br>// Promise<br>// Hi!<br>// Resolved<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">实例：实现Ajax</div></pre></td></tr></table></figure></p>
<p>var getJSON = function(url) {<br>  var promise = new Promise(function(resolve, reject){<br>    var client = new XMLHttpRequest();<br>    client.open(“GET”, url);<br>    client.onreadystatechange = handler;<br>    client.responseType = “json”;<br>    client.setRequestHeader(“Accept”, “application/json”);<br>    client.send();</p>
<pre><code>function handler() {
  if (this.readyState !== 4) {
    return;
  }
  if (this.status === 200) {
    resolve(this.response);
  } else {
    reject(new Error(this.statusText));
  }
};
</code></pre><p>  });<br>  return promise;<br>};<br>getJSON(“/posts.json”).then(function(json) {<br>  console.log(‘Contents: ‘ + json);<br>}, function(error) {<br>  console.error(‘出错了’, error);<br>});</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. Promise.prototype.then()</div></pre></td></tr></table></figure>
<p>getJSON(“/post/1.json”).then(<br>  post =&gt; getJSON(post.commentURL)<br>).then(<br>  comments =&gt; console.log(“Resolved: “, comments),<br>  err =&gt; console.log(“Rejected: “, err)<br>);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. Promise.prototype.catch()</div></pre></td></tr></table></figure></p>
<p>// 写法一<br>var promise = new Promise(function(resolve, reject) {<br>  try {<br>    throw new Error(‘test’);<br>  } catch(e) {<br>    reject(e);<br>  }<br>});<br>promise.catch(function(error) {<br>  console.log(error);<br>});</p>
<p>// 写法二,reject方法的作用，等同于抛出错误<br>var promise = new Promise(function(resolve, reject) {<br>  reject(new Error(‘test’));<br>});<br>promise.catch(function(error) {<br>  console.log(error);<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. Promise.all()</div><div class="line"></div><div class="line">&gt; 将多个Promise实例包装成一个新的实例</div></pre></td></tr></table></figure></p>
<p>//Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。<br>var p=Promise.all([p1,p2,p3]);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. Promise.race()</div><div class="line">7. Promise.resolve()</div><div class="line"></div><div class="line">&gt;将现有对象转为Promise对象</div></pre></td></tr></table></figure></p>
<p>var jsPromise=Promise.resolve($.ajax(‘/whatever.json’))；<br>//将jQuery生成的deferred对象，转为一个新的Promise对象<br>Promise.resolve(‘foo’);<br>// 等价于但并不等于(异曲同工)<br>new Promise(resolve =&gt; resolve(‘foo’))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8. Promise.reject()</div><div class="line">9. 两个附加方法：done(),finally()</div><div class="line"></div><div class="line">&gt;应用</div></pre></td></tr></table></figure></p>
<p>function timeout(duration = 0) {<br>    return new Promise((resolve, reject) =&gt; {<br>        setTimeout(resolve, duration);<br>    })<br>}</p>
<p>var p = timeout(1000).then(() =&gt; {<br>    return timeout(2000);<br>}).then(() =&gt; {<br>    throw new Error(“hmm”);<br>}).catch(err =&gt; {<br>    return Promise.all([timeout(100), timeout(200)]);<br>})</p>
<p>//promise combination<br>function fetchAsync (url, timeout, onData, onError) {<br>    …<br>}<br>let fetchPromised = (url, timeout) =&gt; {<br>    return new Promise((resolve, reject) =&gt; {<br>        fetchAsync(url, timeout, resolve, reject)<br>    })<br>}<br>Promise.all([<br>    fetchPromised(“<a href="http://backend/foo.txt" target="_blank" rel="external">http://backend/foo.txt</a>“, 500),<br>    fetchPromised(“<a href="http://backend/bar.txt" target="_blank" rel="external">http://backend/bar.txt</a>“, 500),<br>    fetchPromised(“<a href="http://backend/baz.txt" target="_blank" rel="external">http://backend/baz.txt</a>“, 500)<br>]).then((data) =&gt; {<br>    let [ foo, bar, baz ] = data<br>    console.log(<code>success: foo=${foo} bar=${bar} baz=${baz}</code>)<br>}, (err) =&gt; {<br>    console.log(<code>error: ${err}</code>)<br>})<br>//ES5<br>function fetchAsync (url, timeout, onData, onError) {<br>    …<br>}<br>function fetchAll (request, onData, onError) {<br>    var result = [], results = 0;<br>    for (var i = 0; i &lt; request.length; i++) {<br>        result[i] = null;<br>        (function (i) {<br>            fetchAsync(request[i].url, request[i].timeout, function (data) {<br>                result[i] = data;<br>                if (++results === request.length)<br>                    onData(result);<br>            }, onError);<br>        })(i);<br>    }<br>}<br>fetchAll([<br>    { url: “<a href="http://backend/foo.txt" target="_blank" rel="external">http://backend/foo.txt</a>“, timeout: 500 },<br>    { url: “<a href="http://backend/bar.txt" target="_blank" rel="external">http://backend/bar.txt</a>“, timeout: 500 },<br>    { url: “<a href="http://backend/baz.txt" target="_blank" rel="external">http://backend/baz.txt</a>“, timeout: 500 }<br>], function (data) {<br>    var foo = data[0], bar = data[1], baz = data[2];<br>    console.log(“success: foo=” + foo + “ bar=” + bar + “ baz=” + baz);<br>}, function (err) {<br>    console.log(“error: “ + err);<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">More info: [MDN Promise](https://developer.mozilla.org/en-US/docs/Web//Reference/Global_Objects/Promise)</div><div class="line"></div><div class="line">###  Iterators + For..Of</div><div class="line"></div><div class="line">&gt;Iterator objects enable custom iteration like CLR IEnumerable or Java Iterable(Iterator对象启用自定义迭代，像CLR IEnumerable或Java Iterable。).  </div><div class="line">Generalize `for..in` to custom iterator-based iteration with `for..of`.  Don’t require realizing an array, enabling lazy design patterns like LINQ.</div><div class="line">JS中集合主要有Array,Object,Map,Set;需要一种统一的接口机制，来处理所有不同的数据结构</div><div class="line"></div><div class="line">Iterator应运而生，其作用有</div><div class="line">    </div><div class="line">    1. 为各种数据结构提供一个统一的简便的访问接口；</div><div class="line">    2. 使得数据结构的成员能够按某种次序排列；</div><div class="line">    3. ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供其消费</div><div class="line">遍历过程：</div><div class="line">   </div><div class="line">    1. 创建一个指针对象，指向当前数据结构的起始位置；即遍历器对象的本质是指针对象</div><div class="line">    2. 第n次调用指针对象的next方法，将指针指向nth数据成员；</div><div class="line">    3. 不断调用指针对象的next方法，直到指向数据结构的结束位置。</div></pre></td></tr></table></figure></p>
<p>var it = makeIterator([‘a’, ‘b’]);<br>it.next() // { value: “a”, done: false }<br>it.next() // { value: “b”, done: false }<br>it.next() // { value: undefined, done: true }<br>function makeIterator(array) {<br>  var nextIndex = 0;<br>  return {<br>    next: function() {<br>      return nextIndex &lt; array.length ?<br>        {value: array[nextIndex++], done: false} :<br>        {value: undefined, done: true};<br>    }<br>  };<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 数据结构默认Iterator接口</div><div class="line"></div><div class="line">&gt; Iterator是为for...of而生的，当使用for...of时，该循环会自动寻找Iterator接口；一种数据结构只要部署了</div><div class="line">Iterator接口即为可遍历的（iterable），ES6规定，默认的Iterator接口部署在数据结构的Symbol.iterator属性。</div></pre></td></tr></table></figure></p>
<p>let fibonacci = {<br>  <a href="">Symbol.iterator</a> {<br>    let pre = 0, cur = 1;<br>    return {<br>      next() {<br>        [pre, cur] = [cur, pre + cur];<br>        return { done: false, value: cur }<br>      }<br>    }<br>  }<br>}<br>for (var n of fibonacci) {<br>  // truncate the sequence at 1000<br>  if (n &gt; 1000)<br>    break;<br>  console.log(n);<br>}<br>//ES5<br>var fibonacci = {<br>    next: (function () {<br>        var pre = 0, cur = 1;<br>        return function () {<br>            tmp = pre;<br>            pre = cur;<br>            cur += tmp;<br>            return cur;<br>        };<br>    })()<br>};</p>
<p>var n;<br>for (;;) {<br>    n = fibonacci.next();<br>    if (n &gt; 1000)<br>        break;<br>    console.log(n);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Iteration is based on these duck-typed interfaces (using [TypeScript](http://typescriptlang.org) type syntax for exposition only):</div></pre></td></tr></table></figure></p>
<p>TypeScript<br>interface IteratorResult {<br>  done: boolean;<br>  value: any;<br>}<br>interface Iterator {<br>  next(): IteratorResult;<br>}<br>interface Iterable {<br>  <a href="">Symbol.iterator</a>: Iterator<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 调用Iterator接口的场合</div><div class="line"></div><div class="line">- 解耦赋值</div></pre></td></tr></table></figure></p>
<p>let set = new Set().add(‘a’).add(‘b’).add(‘c’);<br>let [x,y] = set;<br>// x=’a’; y=’b’<br>let [first, …rest] = set;<br>// first=’a’; rest=[‘b’,’c’];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 扩展运算符</div></pre></td></tr></table></figure></p>
<p>let arr = [‘b’, ‘c’];<br>[‘a’, …arr, ‘d’]<br>// [‘a’, ‘b’, ‘c’, ‘d’]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- yield*</div></pre></td></tr></table></figure>
<p>let generator = function<em> () {<br>  yield 1;<br>  yield</em> [2,3,4];<br>  yield 5;<br>};<br>var iterator = generator();<br>iterator.next() // { value: 1, done: false }<br>iterator.next() // { value: 2, done: false }<br>iterator.next() // { value: 3, done: false }<br>iterator.next() // { value: 4, done: false }<br>iterator.next() // { value: 5, done: false }<br>iterator.next() // { value: undefined, done: true }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 其它</div></pre></td></tr></table></figure></p>
<p>for…of<br>Array.from()<br>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）<br>Promise.all()<br>Promise.race()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. 字符串的Iterator接口</div></pre></td></tr></table></figure></p>
<p>var someString = “hi”;<br>typeof someString[Symbol.iterator]<br>// “function”<br>var iterator = someString<a href="">Symbol.iterator</a>;<br>iterator.next()  // { value: “h”, done: false }<br>iterator.next()  // { value: “i”, done: false }<br>iterator.next()  // { value: undefined, done: true }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">5. Iterator与Generator函数</div></pre></td></tr></table></figure></p>
<p>var myIterable = {};</p>
<p>myIterable[Symbol.iterator] = function* () {<br>  yield 1;<br>  yield 2;<br>  yield 3;<br>};<br>[…myIterable] // [1, 2, 3]<br>// 或者采用下面的简洁写法<br>let obj = {</p>
<ul>
<li><a href="">Symbol.iterator</a> {<br>yield ‘hello’;<br>yield ‘world’;<br>}<br>};<br>for (let x of obj) {<br>console.log(x);<br>}<br>// hello<br>// world<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 遍历器对象的return()，throw()</div><div class="line">7. for...of循环</div><div class="line"></div><div class="line">&gt;ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for...of循环，作为遍历所有数据结构的统一的方法。</div><div class="line"> </div><div class="line">与其它遍历语法比较</div><div class="line"></div><div class="line">- for循环</div></pre></td></tr></table></figure>
</li>
</ul>
<p>for (var index = 0; index &lt; myArray.length; index++) {<br>  console.log(myArray[index]);<br>}<br>//比较繁琐，故数组内置forEach方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- forEach</div></pre></td></tr></table></figure></p>
<p>myArray.forEach(function (value) {<br>  console.log(value);<br>});<br>//无法跳出forEach循环，break,continue也无能为力<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- for...in循环</div></pre></td></tr></table></figure></p>
<p>for (var index in myArray) {<br>  console.log(myArray[index]);<br>}<br>//可以遍历数组键名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">缺点如下：</div><div class="line"></div><div class="line">    1. 数组的键名是数字，但for...in循环是以字符串作为键名的；</div><div class="line">    2. 不仅遍历数字键名，而且还遍历手动添加的其它键，乃至原型链上的键；</div><div class="line">    3. 某些情况下，for...in循环以任意顺序遍历键名</div><div class="line">总之，for...in循环主要是为遍历对象而设计的，不适用于数组遍历</div><div class="line"></div><div class="line">- for...of循环优点如下，故首选之。</div></pre></td></tr></table></figure></p>
<p>for (var n of fibonacci) {<br>  if (n &gt; 1000)<br>    break;<br>  console.log(n);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  1. 有着for...in循环的简洁语法，但规避了其缺点；</div><div class="line">  2. 不同于forEach方法，可以与break，continue，和return配合使用；</div><div class="line">  3. 提供了遍历所有数据结构的同意操作接口。</div><div class="line"></div><div class="line">More info: [MDN for...of](https://developer.mozilla.org/en-US/docs/Web//Reference/Statements/for...of)</div><div class="line"></div><div class="line">###  Generators</div><div class="line"></div><div class="line">1. 简介</div><div class="line"></div><div class="line">&gt; Generator函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同。语法上，Generator函数是一个状态机，</div><div class="line">封装了多个内部状态。执行之，会返回一个遍历器对象，即其除了状态机还是一个遍历器生成函数，返回的遍历器对象可依次遍历</div><div class="line">其内每个状态。</div></pre></td></tr></table></figure></p>
<p>function* helloWorldGenerator() {<br>  yield ‘hello’;<br>  yield ‘world’;<br>  return ‘ending’;<br>}<br>var hw = helloWorldGenerator();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">yield语句</div><div class="line"></div><div class="line">&gt; Generator函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，</div><div class="line">故其实提供了一种可以暂停执行的函数，yield语句即暂停标识。</div><div class="line"></div><div class="line">遍历器next方法运行逻辑如下：</div><div class="line"></div><div class="line">  1. 遇到yield，暂停执行其后操作，并将紧跟在yield后的表达式值作为返回对象的value属性值</div><div class="line">  2. 下一次调用next方法时，继续往下执行，直到遇到下一个yield语句。</div><div class="line">  3. 如未遇yield语句，就一直运行到函数结束知道return语句为止，并将return语句后的表达式值作为返回对象的value属性值。</div><div class="line">  4. 如无return语句则返回对象的value属性值为undefined</div><div class="line"></div><div class="line">yield与return对比</div><div class="line"></div><div class="line">&gt; 同：都能返回紧跟气候的表达式值；异：每次遇到yield函数暂停执行，下次继续从此执行，而return不具位置记忆功能，</div><div class="line">一个函数里只能执行一次return但可以执行多次yield语句。Generator函数可以返回一系列的值。</div></pre></td></tr></table></figure></p>
<p>function* f() {<br>  console.log(‘执行了！’)<br>}<br>var generator = f();<br>setTimeout(function () {<br>  generator.next()<br>}, 2000);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">*若f是普通函数，为变量generator赋值便执行。但如f为Generator函数，只有调用next方法时才会执行。</div><div class="line">且yield只能用在Generator函数中*</div><div class="line"></div><div class="line">2. next方法的参数</div><div class="line"></div><div class="line">&gt; yield语句本身无返回值（返回undefined），next方法可以带一个被当作上一个yield语句返回值的参数。</div><div class="line"></div><div class="line">3. for...of</div><div class="line"></div><div class="line">&gt;for...of循环可以自动遍历Generator函数时生成的Iterator对象且无需next方法。</div></pre></td></tr></table></figure></p>
<p>function<em> foo(){<br>    yield 1;<br>    yield 2;<br>    yield 3;<br>    yield 4;<br>    return 5<br>}<br>for(let v of foo()){console.log(v)} //1 2 3 4<br>//一旦next方法返回对象的done为true，for…of终止且不含该返回对象<br>//原生的JavaScript对象没有遍历接口，无法使用for…of循环，Generator函数为其加上接口完成遍历<br>function</em> fibonacci() {<br>  let [prev, curr] = [0, 1];<br>  for (;;) {<br>    [prev, curr] = [curr, prev + curr];<br>    yield curr;<br>  }<br>}<br>for (let n of fibonacci()) {<br>  if (n &gt; 1000) break;<br>  console.log(n);<br>}<br>/<em>除了for…of循环以外，扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，<br>它们都可以将Generator函数返回的Iterator对象，作为参数。</em>/<br>function* numbers () {<br>  yield 1<br>  yield 2<br>  return 3<br>  yield 4<br>}</p>
<p>// 扩展运算符<br>[…numbers()] // [1, 2]</p>
<p>// Array.from 方法<br>Array.from(numbers()) // [1, 2]</p>
<p>// 解构赋值<br>let [x, y] = numbers();<br>x // 1<br>y // 2</p>
<p>// for…of 循环<br>for (let n of numbers()) {<br>  console.log(n)<br>}<br>// 1<br>// 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. Generator.prototype.throw()</div><div class="line">5. Generator.prototype.return()</div><div class="line">6. yield*语句</div><div class="line">7. 作为属性的Generator函数</div></pre></td></tr></table></figure></p>
<p>let obj = {<br>  myGeneratorMethod: function* () {<br>    // ···<br>  }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">8. Generator函数的this</div><div class="line"></div><div class="line">&gt; Generator函数总是返回一个其实例且继承了其prototype对象上方法的遍历器</div></pre></td></tr></table></figure></p>
<p>function<em> g() {}<br>g.prototype.hello = function () {<br>  return ‘hi!’;<br>};<br>let obj = g();<br>obj instanceof g // true<br>obj.hello() // ‘hi!’<br>//如果把g当作普通的构造函数，并不会生效，因为g返回的总是遍历器对象，而不是this对象。<br>function</em> g() {<br>  this.a = 11;<br>}<br>let obj = g();<br>obj.a // undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">9. Generator与状态机，前者是后者的最佳结构</div></pre></td></tr></table></figure></p>
<p>var ticking = true;<br>var clock = function() {<br>  if (ticking)<br>    console.log(‘Tick!’);<br>  else<br>    console.log(‘Tock!’);<br>  ticking = !ticking;<br>}<br>//<br>var clock = function*() {<br>  while (true) {<br>    console.log(‘Tick!’);<br>    yield;<br>    console.log(‘Tock!’);<br>    yield;<br>  }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- Generator与协程(coroutine)</div><div class="line"></div><div class="line">&gt; 协程：协作的线程或函数</div><div class="line"></div><div class="line">10. 应用</div><div class="line"></div><div class="line">- 异步操作的同步化表达</div><div class="line"></div><div class="line">```function* loadUI() &#123;</div><div class="line">     showLoadingScreen();</div><div class="line">     yield loadUIDataAsynchronously();</div><div class="line">     hideLoadingScreen();</div><div class="line">   &#125;</div><div class="line">   var loader = loadUI();</div><div class="line">   // 加载UI</div><div class="line">   loader.next()</div><div class="line">   </div><div class="line">   // 卸载UI</div><div class="line">   loader.next()</div></pre></td></tr></table></figure></p>
<ul>
<li>控制流管理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Promise.resolve(step1)</div><div class="line">  .then(step2)</div><div class="line">  .then(step3)</div><div class="line">  .then(step4)</div><div class="line">  .then(function (value4) &#123;</div><div class="line">    // Do something with value4</div><div class="line">  &#125;, function (error) &#123;</div><div class="line">    // Handle any error from step1 through step4</div><div class="line">  &#125;)</div><div class="line">  .done();</div><div class="line">  //Generator更优雅</div><div class="line">function* longRunningTask(value1) &#123;</div><div class="line">  try &#123;</div><div class="line">    var value2 = yield step1(value1);</div><div class="line">    var value3 = yield step2(value2);</div><div class="line">    var value4 = yield step3(value3);</div><div class="line">    var value5 = yield step4(value4);</div><div class="line">    // Do something with value4</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    // Handle any error from step1 through step4</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>部署Iterator接口</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function* iterEntries(obj) &#123;</div><div class="line">  let keys = Object.keys(obj);</div><div class="line">  for (let i=0; i &lt; keys.length; i++) &#123;</div><div class="line">    let key = keys[i];</div><div class="line">    yield [key, obj[key]];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let myObj = &#123; foo: 3, bar: 7 &#125;;</div><div class="line"></div><div class="line">for (let [key, value] of iterEntries(myObj)) &#123;</div><div class="line">  console.log(key, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// foo 3</div><div class="line">// bar 7</div></pre></td></tr></table></figure>
<ol>
<li>作为数据结构</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function *doStuff() &#123;</div><div class="line">  yield fs.readFile.bind(null, &apos;hello.txt&apos;);</div><div class="line">  yield fs.readFile.bind(null, &apos;world.txt&apos;);</div><div class="line">  yield fs.readFile.bind(null, &apos;and-such.txt&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>function,iterator protocol</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">let fibonacci = &#123;</div><div class="line">    *[Symbol.iterator]() &#123;</div><div class="line">        let pre = 0, cur = 1</div><div class="line">        for (;;) &#123;</div><div class="line">            [ pre, cur ] = [ cur, pre + cur ]</div><div class="line">            yield cur</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">for (let n of fibonacci) &#123;</div><div class="line">    if (n &gt; 1000)</div><div class="line">        break</div><div class="line">    console.log(n)</div><div class="line">&#125;</div><div class="line">//ES5</div><div class="line">var fibonacci = &#123;</div><div class="line">      next: (function () &#123;</div><div class="line">          var pre = 0, cur = 1;</div><div class="line">          return function () &#123;</div><div class="line">              tmp = pre;</div><div class="line">              pre = cur;</div><div class="line">              cur += tmp;</div><div class="line">              return cur;</div><div class="line">          &#125;;</div><div class="line">      &#125;)()</div><div class="line">  &#125;;</div><div class="line">  var n;</div><div class="line">  for (;;) &#123;</div><div class="line">      n = fibonacci.next();</div><div class="line">      if (n &gt; 1000)</div><div class="line">          break;</div><div class="line">      console.log(n);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//direct use</div><div class="line">function* range (start, end, step) &#123;</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        yield start</div><div class="line">        start += step</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let i of range(0, 10, 2)) &#123;</div><div class="line">    console.log(i) // 0, 2, 4, 6, 8</div><div class="line">&#125;</div><div class="line">//ES5</div><div class="line">function range (start, end, step) &#123;</div><div class="line">    var list = [];</div><div class="line">    while (start &lt; end) &#123;</div><div class="line">        list.push(start);</div><div class="line">        start += step;</div><div class="line">    &#125;</div><div class="line">    return list;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var r = range(0, 10, 2);</div><div class="line">for (var i = 0; i &lt; r.length; i++) &#123;</div><div class="line">    console.log(r[i]); // 0, 2, 4, 6, 8</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//generator matching</div><div class="line">let fibonacci = function* (numbers) &#123;</div><div class="line">    let pre = 0, cur = 1</div><div class="line">    while (numbers-- &gt; 0) &#123;</div><div class="line">        [ pre, cur ] = [ cur, pre + cur ]</div><div class="line">        yield cur</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let n of fibonacci(1000))</div><div class="line">    console.log(n)</div><div class="line"></div><div class="line">let numbers = [ ...fibonacci(1000) ]</div><div class="line"></div><div class="line">let [ n1, n2, n3, ...others ] = fibonacci(1000)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">//generator control-flow</div><div class="line">function async (proc, ...params) &#123;</div><div class="line">    var iterator = proc(...params)</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">        let loop = (value) =&gt; &#123;</div><div class="line">            let result</div><div class="line">            try &#123;</div><div class="line">                result = iterator.next(value)</div><div class="line">            &#125;</div><div class="line">            catch (err) &#123;</div><div class="line">                reject(err)</div><div class="line">            &#125;</div><div class="line">            if (result.done)</div><div class="line">                resolve(result.value)</div><div class="line">            else if (   typeof result.value      === &quot;object&quot;</div><div class="line">                     &amp;&amp; typeof result.value.then === &quot;function&quot;)</div><div class="line">                result.value.then((value) =&gt; &#123;</div><div class="line">                    loop(value)</div><div class="line">                &#125;, (err) =&gt; &#123;</div><div class="line">                    reject(err)</div><div class="line">                &#125;)</div><div class="line">            else</div><div class="line">                loop(result.value)</div><div class="line">        &#125;</div><div class="line">        loop()</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  application-specific asynchronous builder</div><div class="line">function makeAsync (text, after) &#123;</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">        setTimeout(() =&gt; resolve(text), after)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  application-specific asynchronous procedure</div><div class="line">async(function* (greeting) &#123;</div><div class="line">    let foo = yield makeAsync(&quot;foo&quot;, 300)</div><div class="line">    let bar = yield makeAsync(&quot;bar&quot;, 200)</div><div class="line">    let baz = yield makeAsync(&quot;baz&quot;, 100)</div><div class="line">    return `$&#123;greeting&#125; $&#123;foo&#125; $&#123;bar&#125; $&#123;baz&#125;`</div><div class="line">&#125;, &quot;Hello&quot;).then((msg) =&gt; &#123;</div><div class="line">    console.log(&quot;RESULT:&quot;, msg) // &quot;Hello foo bar baz&quot;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//generator methods</div><div class="line">class Clz &#123;</div><div class="line">    * bar () &#123;</div><div class="line">        …</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let Obj = &#123;</div><div class="line">    * foo () &#123;</div><div class="line">        …</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The generator interface is (using <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> type syntax for exposition only):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//TypeScript</div><div class="line">interface Generator extends Iterator &#123;</div><div class="line">    next(value?: any): IteratorResult;</div><div class="line">    throw(exception: any);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>More info: <a href="https://developer.mozilla.org/en-US/docs/Web//Reference/Iteration_protocols" target="_blank" rel="external">MDN Iteration protocols</a></p>
<h3 id="Generator函数的异步应用"><a href="#Generator函数的异步应用" class="headerlink" title="Generator函数的异步应用"></a>Generator函数的异步应用</h3><blockquote>
<p>由于JS的执行环境是单线程的，没有异步编程根本没法用。</p>
</blockquote>
<ol>
<li><p>传统方法有以下四种</p>
<ol>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>Promise 对象</li>
</ol>
</li>
<li><p>基本概念</p>
</li>
</ol>
<ul>
<li>异步：一个任务不是连续完成的，先执行第一段然后执行其它任务，等做好了准备再回头执行第二段。</li>
</ul>
<blockquote>
<p>比如读取文件并处理，第一段是向操作系统发出请求，要求读取文件；然后执行其他任务，等到操作系统<br>返回文件，再接着执行任务第二阶段（处理文件）。不连续的执行即异步，连续即同步。</p>
</blockquote>
<ul>
<li>回掉函数：JS对异步编程的实现就是通过回调函数(把任务的第二阶段单独写在一个函数里，等到重新执行该任务<br>时就直接调用这个函数callback)。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.readFile(&apos;/etc/passwd&apos;, &apos;utf-8&apos;, function (err, data) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  console.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>Node 错误优先原则：执行分两个阶段，首个执行完之后任务所在的EC已经结束，在此抛出错误原来的EC已无法捕捉，<br>只能当作参数，传入第二段？？？。直观理解就是如果读取文件就出错了那还谈何打印文件，故错误优先</em></p>
<ul>
<li>Promise</li>
</ul>
<blockquote>
<p>回调函数本身无问题，问题在于多层嵌套。而Promise对象应运而生，它并非新的语法功能而是一种新的写法，将嵌套改成链式调用。<br>除此之外并无新意。且其最大的问题是代码冗余，一堆then原来的语义变得不清楚。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var readFile = require(&apos;fs-readfile-promise&apos;);</div><div class="line">readFile(fileA)</div><div class="line">.then(function (data) &#123;</div><div class="line">  console.log(data.toString());</div><div class="line">&#125;)</div><div class="line">.then(function () &#123;</div><div class="line">  return readFile(fileB);</div><div class="line">&#125;)</div><div class="line">.then(function (data) &#123;</div><div class="line">  console.log(data.toString());</div><div class="line">&#125;)</div><div class="line">.catch(function (err) &#123;</div><div class="line">  console.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>Generator函数</li>
</ol>
<blockquote>
<p>传统编程语言早有异步(多任务)的解决方案，其一叫协程(coroutine)，有点像函数又像线程。<br>协程A=》A暂停，协程B=》B交还执行权于A，yield命令是两个阶段的分界线。</p>
</blockquote>
<ul>
<li>Generator函数可以暂停执行和恢复执行，这是它封装异步任务的根本原因。除此之外还有两个特性，<br>使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function* gen(x)&#123;</div><div class="line">  var y = yield x + 2;</div><div class="line">  return y;</div><div class="line">&#125;</div><div class="line">var g = gen(1);</div><div class="line">g.next() // &#123; value: 3, done: false &#125;</div><div class="line">g.next(2) // &#123; value: 2, done: true &#125;</div><div class="line">g.throw(&apos;出错了&apos;);</div><div class="line">// 出错了</div></pre></td></tr></table></figure>
<ul>
<li>异步任务的封装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var fetch = require(&apos;node-fetch&apos;);</div><div class="line">function* gen()&#123;</div><div class="line">  var url = &apos;https://api.github.com/users/github&apos;;</div><div class="line">  var result = yield fetch(url);</div><div class="line">  console.log(result.bio);</div><div class="line">&#125;</div><div class="line">//执行这段代码的方法如下。</div><div class="line">var g = gen();</div><div class="line">var result = g.next();</div><div class="line">result.value.then(function(data)&#123;</div><div class="line">  return data.json();</div><div class="line">&#125;).then(function(data)&#123;</div><div class="line">  g.next(data);</div><div class="line">&#125;);</div><div class="line">/*可以看到，虽然 Generator 函数将异步操作表示得很简洁，</div><div class="line">但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。*/</div></pre></td></tr></table></figure>
<ol>
<li>Thunk函数：自动执行 Generator 函数的一种方法，”传值调用”（call by value）/“传名调用”（call by name）</li>
</ol>
<h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><blockquote>
<p>ES7标准引入async函数使异步操作更加方便，本质是Generator函数的语法糖。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//Generator函数</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line">var readFile = function (fileName) &#123;</div><div class="line">  return new Promise(function (resolve, reject) &#123;</div><div class="line">    fs.readFile(fileName, function(error, data) &#123;</div><div class="line">      if (error) reject(error);</div><div class="line">      resolve(data);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line">var gen = function* () &#123;</div><div class="line">  var f1 = yield readFile(&apos;/etc/fstab&apos;);</div><div class="line">  var f2 = yield readFile(&apos;/etc/shells&apos;);</div><div class="line">  console.log(f1.toString());</div><div class="line">  console.log(f2.toString());</div><div class="line">&#125;;</div><div class="line">//async 函数</div><div class="line">var asyncReadFile = async function () &#123;</div><div class="line">  var f1 = await readFile(&apos;/etc/fstab&apos;);</div><div class="line">  var f2 = await readFile(&apos;/etc/shells&apos;);</div><div class="line">  console.log(f1.toString());</div><div class="line">  console.log(f2.toString());</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><em>async其实就是将Generator函数的※替换成了async，将yield换成了await</em><br>改进如下：</p>
<ul>
<li>内置执行器</li>
</ul>
<figure class="highlight plain"><figcaption><span>result = asyncReadFile();```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 更好的语义</div><div class="line"></div><div class="line">async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</div><div class="line"></div><div class="line">- 更广的适用性</div><div class="line"></div><div class="line">co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值</div><div class="line">（数值、字符串和布尔值，但这时等同于同步操作）。</div><div class="line"></div><div class="line">- 返回值是Promise</div><div class="line"></div><div class="line">async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。</div><div class="line"></div><div class="line">2. 用法</div><div class="line"></div><div class="line">&gt;async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，</div><div class="line">等到异步操作完成，再接着执行函数体内后面的语句。</div></pre></td></tr></table></figure>
<p>function timeout(ms) {<br>  return new Promise((resolve) =&gt; {<br>    setTimeout(resolve, ms);<br>  });<br>}<br>async function asyncPrint(value, ms) {<br>  await timeout(ms);<br>  console.log(value)<br>}<br>asyncPrint(‘hello world’, 50);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 语法</div><div class="line"></div><div class="line">- 返回Promise对象</div></pre></td></tr></table></figure></p>
<p>async function f() {<br>  return ‘hello world’;<br>}<br>f().then(v =&gt; console.log(v))<br>// “hello world”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 错误处理</div></pre></td></tr></table></figure></p>
<p>async function f() {<br>  await new Promise(function (resolve, reject) {<br>    throw new Error(‘出错了’);<br>  });<br>}<br>f()<br>.then(v =&gt; console.log(v))<br>.catch(e =&gt; console.log(e))<br>// Error：出错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4. async函数的实现原理：将 Generator 函数和自动执行器，包装在一个函数里。</div><div class="line"></div><div class="line">###  Classes</div><div class="line"></div><div class="line">&gt;ES6 classes are a simple sugar over the prototype-based OO pattern(ES6类是基于原型的（Object-Oriented）模式的简单糖).  </div><div class="line">Having a single convenient declarative form makes class patterns easier to use, </div><div class="line">and encourages interoperability(互通性).  Classes support prototype-based inheritance, super </div><div class="line">calls,instance and static methods and constructors(支持基于原型的继承，super calls，instance实例及静态方法和构造器).</div></pre></td></tr></table></figure></p>
<p>//class definition<br>class Shape {<br>    constructor (id, x, y) {<br>        this.id = id<br>        this.move(x, y)<br>    }<br>    move (x, y) {<br>        this.x = x<br>        this.y = y<br>    }<br>}<br>//ES5<br>var Shape = function (id, x, y) {<br>    this.id = id;<br>    this.move(x, y);<br>};<br>Shape.prototype.move = function (x, y) {<br>    this.x = x;<br>    this.y = y;<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">//class inheritance</div><div class="line">class Rectangle extends Shape &#123;</div><div class="line">    constructor (id, x, y, width, height) &#123;</div><div class="line">        super(id, x, y)</div><div class="line">        this.width  = width</div><div class="line">        this.height = height</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class Circle extends Shape &#123;</div><div class="line">    constructor (id, x, y, radius) &#123;</div><div class="line">        super(id, x, y)</div><div class="line">        this.radius = radius</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//ES5</div><div class="line">var Rectangle = function (id, x, y, width, height) &#123;</div><div class="line">    Shape.call(this, id, x, y);</div><div class="line">    this.width  = width;</div><div class="line">    this.height = height;</div><div class="line">&#125;;</div><div class="line">Rectangle.prototype = Object.create(Shape.prototype);</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line">var Circle = function (id, x, y, radius) &#123;</div><div class="line">    Shape.call(this, id, x, y);</div><div class="line">    this.radius = radius;</div><div class="line">&#125;;</div><div class="line">Circle.prototype = Object.create(Shape.prototype);</div><div class="line">Circle.prototype.constructor = Circle;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>inheritance from expressions</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">var aggregation = (baseClass, ...mixins) =&gt; &#123;</div><div class="line">    let base = class _Combined extends baseClass &#123;</div><div class="line">        constructor (...args) &#123;</div><div class="line">            super(...args)</div><div class="line">            mixins.forEach((mixin) =&gt; &#123;</div><div class="line">                mixin.prototype.initializer.call(this)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    let copyProps = (target, source) =&gt; &#123;</div><div class="line">        Object.getOwnPropertyNames(source)</div><div class="line">            .concat(Object.getOwnPropertySymbols(source))</div><div class="line">            .forEach((prop) =&gt; &#123;</div><div class="line">            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))</div><div class="line">                return</div><div class="line">            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    mixins.forEach((mixin) =&gt; &#123;</div><div class="line">        copyProps(base.prototype, mixin.prototype)</div><div class="line">        copyProps(base, mixin)</div><div class="line">    &#125;)</div><div class="line">    return base</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Colored &#123;</div><div class="line">    initializer ()     &#123; this._color = &quot;white&quot; &#125;</div><div class="line">    get color ()       &#123; return this._color &#125;</div><div class="line">    set color (v)      &#123; this._color = v &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ZCoord &#123;</div><div class="line">    initializer ()     &#123; this._z = 0 &#125;</div><div class="line">    get z ()           &#123; return this._z &#125;</div><div class="line">    set z (v)          &#123; this._z = v &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Shape &#123;</div><div class="line">    constructor (x, y) &#123; this._x = x; this._y = y &#125;</div><div class="line">    get x ()           &#123; return this._x &#125;</div><div class="line">    set x (v)          &#123; this._x = v &#125;</div><div class="line">    get y ()           &#123; return this._y &#125;</div><div class="line">    set y (v)          &#123; this._y = v &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Rectangle extends aggregation(Shape, Colored, ZCoord) &#123;&#125;</div><div class="line">var rect = new Rectangle(7, 42)</div><div class="line">rect.z     = 1000</div><div class="line">rect.color = &quot;red&quot;</div><div class="line">console.log(rect.x, rect.y, rect.z, rect.color)</div><div class="line">//ES5</div><div class="line">var aggregation = function (baseClass, mixins) &#123;</div><div class="line">    var base = function () &#123;</div><div class="line">        baseClass.apply(this, arguments);</div><div class="line">        mixins.forEach(function (mixin) &#123;</div><div class="line">            mixin.prototype.initializer.call(this);</div><div class="line">        &#125;.bind(this));</div><div class="line">    &#125;;</div><div class="line">    base.prototype = Object.create(baseClass.prototype);</div><div class="line">    base.prototype.constructor = base;</div><div class="line">    var copyProps = function (target, source) &#123;</div><div class="line">        Object.getOwnPropertyNames(source).forEach(function (prop) &#123;</div><div class="line">            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))</div><div class="line">                return</div><div class="line">            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    mixins.forEach(function (mixin) &#123;</div><div class="line">        copyProps(base.prototype, mixin.prototype);</div><div class="line">        copyProps(base, mixin);</div><div class="line">    &#125;);</div><div class="line">    return base;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var Colored = function () &#123;&#125;;</div><div class="line">Colored.prototype = &#123;</div><div class="line">    initializer: function ()  &#123; this._color = &quot;white&quot;; &#125;,</div><div class="line">    getColor:    function ()  &#123; return this._color; &#125;,</div><div class="line">    setColor:    function (v) &#123; this._color = v; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var ZCoord = function () &#123;&#125;;</div><div class="line">ZCoord.prototype = &#123;</div><div class="line">    initializer: function ()  &#123; this._z = 0; &#125;,</div><div class="line">    getZ:        function ()  &#123; return this._z; &#125;,</div><div class="line">    setZ:        function (v) &#123; this._z = v; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var Shape = function (x, y) &#123;</div><div class="line">    this._x = x; this._y = y;</div><div class="line">&#125;;</div><div class="line">Shape.prototype = &#123;</div><div class="line">    getX: function ()  &#123; return this._x; &#125;,</div><div class="line">    setX: function (v) &#123; this._x = v; &#125;,</div><div class="line">    getY: function ()  &#123; return this._y; &#125;,</div><div class="line">    setY: function (v) &#123; this._y = v; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var _Combined = aggregation(Shape, [ Colored, ZCoord ]);</div><div class="line">var Rectangle = function (x, y) &#123;</div><div class="line">    _Combined.call(this, x, y);</div><div class="line">&#125;;</div><div class="line">Rectangle.prototype = Object.create(_Combined.prototype);</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line"></div><div class="line">var rect = new Rectangle(7, 42);</div><div class="line">rect.setZ(1000);</div><div class="line">rect.setColor(&quot;red&quot;);</div><div class="line">console.log(rect.getX(), rect.getY(),rect.getZ(), rect.getColor());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>members</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Rectangle extends Shape &#123;</div><div class="line">    …</div><div class="line">    static defaultRectangle () &#123;</div><div class="line">        return new Rectangle(&quot;default&quot;, 0, 0, 100, 100)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class Circle extends Shape &#123;</div><div class="line">    …</div><div class="line">    static defaultCircle () &#123;</div><div class="line">        return new Circle(&quot;default&quot;, 0, 0, 100)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var defRectangle = Rectangle.defaultRectangle()</div><div class="line">var defCircle    = Circle.defaultCircle()</div><div class="line">//ES5</div><div class="line">var Rectangle = function (id, x, y, width, height) &#123;</div><div class="line">    …</div><div class="line">&#125;;</div><div class="line">Rectangle.defaultRectangle = function () &#123;</div><div class="line">    return new Rectangle(&quot;default&quot;, 0, 0, 100, 100);</div><div class="line">&#125;;</div><div class="line">var Circle = function (id, x, y, width, height) &#123;</div><div class="line">    …</div><div class="line">&#125;;</div><div class="line">Circle.defaultCircle = function () &#123;</div><div class="line">    return new Circle(&quot;default&quot;, 0, 0, 100);</div><div class="line">&#125;;</div><div class="line">var defRectangle = Rectangle.defaultRectangle();</div><div class="line">var defCircle    = Circle.defaultCircle();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//getter/setter</div><div class="line">class Rectangle &#123;</div><div class="line">    constructor (width, height) &#123;</div><div class="line">        this._width  = width</div><div class="line">        this._height = height</div><div class="line">    &#125;</div><div class="line">    set width  (width)  &#123; this._width = width               &#125;</div><div class="line">    get width  ()       &#123; return this._width                &#125;</div><div class="line">    set height (height) &#123; this._height = height             &#125;</div><div class="line">    get height ()       &#123; return this._height               &#125;</div><div class="line">    get area   ()       &#123; return this._width * this._height &#125;</div><div class="line">&#125;</div><div class="line">var r = new Rectangle(50, 20)</div><div class="line">r.area === 1000</div><div class="line">//ES5</div><div class="line">var Rectangle = function (width, height) &#123;</div><div class="line">    this._width  = width;</div><div class="line">    this._height = height;</div><div class="line">&#125;;</div><div class="line">Rectangle.prototype = &#123;</div><div class="line">    set width  (width)  &#123; this._width = width;               &#125;,</div><div class="line">    get width  ()       &#123; return this._width;                &#125;,</div><div class="line">    set height (height) &#123; this._height = height;             &#125;,</div><div class="line">    get height ()       &#123; return this._height;               &#125;,</div><div class="line">    get area   ()       &#123; return this._width * this._height; &#125;</div><div class="line">&#125;;</div><div class="line">var r = new Rectangle(50, 20);</div><div class="line">r.area === 1000;</div></pre></td></tr></table></figure>
<ul>
<li>constructor方法</li>
</ul>
<blockquote>
<p>类的默认方法，通过new关键字生成对象实例时自动调用。一个类必须有constructor方法，如未定义默认添加。<br>默认返回实例对象(this)，完全可以指定另外一个对象。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Foo &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    return Object.create(null);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">new Foo() instanceof Foo</div><div class="line">// false,类的构造函数不使用new是无法调用的，这点与普通构造函数的主要区别</div></pre></td></tr></table></figure>
<ul>
<li>类的实例对象</li>
</ul>
<blockquote>
<p>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//定义类</div><div class="line">class Point &#123;</div><div class="line"></div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">var point = new Point(2, 3);</div><div class="line">point.toString() // (2, 3)</div><div class="line">point.hasOwnProperty(&apos;x&apos;) // true</div><div class="line">point.hasOwnProperty(&apos;y&apos;) // true</div><div class="line">point.hasOwnProperty(&apos;toString&apos;) // false</div><div class="line">point.__proto__.hasOwnProperty(&apos;toString&apos;) // true</div><div class="line">//类的所有实例共享同一个原型对象，同ES5一样</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>不存在变量提升</li>
<li>Class表达式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const MyClass = class Me &#123;</div><div class="line">  getClassName() &#123;</div><div class="line">    return Me.name;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">//类名为MyClass而非Me,Me只在Class内部代码可用，指代当前类，如果内部没用到可以省略</div><div class="line">//使用class关键字可以写出立即执行的Class</div><div class="line">let person = new class &#123;</div><div class="line">  constructor(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayName() &#123;</div><div class="line">    console.log(this.name);</div><div class="line">  &#125;</div><div class="line">&#125;(&apos;张三&apos;);</div><div class="line"></div><div class="line">person.sayName(); // &quot;张三&quot;</div></pre></td></tr></table></figure>
<ul>
<li>私有方法</li>
</ul>
<blockquote>
<p>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。</p>
</blockquote>
<ul>
<li>this指向</li>
</ul>
<blockquote>
<p>类的方法内部如含有this，默认指向类的实例。但必须小心，一旦单独使用可能报错。<br>类和模块内部默认全是严格模式，name属性总是返回紧跟在class关键字后边的类名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">class Logger &#123;</div><div class="line">  printName(name = &apos;there&apos;) &#123;</div><div class="line">    this.print(`Hello $&#123;name&#125;`);</div><div class="line">  &#125;</div><div class="line">  print(text) &#123;</div><div class="line">    console.log(text);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const logger = new Logger();</div><div class="line">const &#123; printName &#125; = logger;</div><div class="line">printName(); // TypeError: Cannot read property &apos;print&apos; of undefine</div><div class="line">/*printName默认指向Logger实例。若将该方法提出使用，this会指向该方法运行时环境*/</div><div class="line">class Logger &#123;</div><div class="line">//构造方法中绑定this</div><div class="line">  constructor() &#123;</div><div class="line">    this.printName = this.printName.bind(this);</div><div class="line">  &#125;</div><div class="line">//箭头函数</div><div class="line">constructor() &#123;</div><div class="line">    this.printName = (name = &apos;there&apos;) =&gt; &#123;</div><div class="line">      this.print(`Hello $&#123;name&#125;`);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//使用Proxy，获取方法的时候，自动绑定this</div><div class="line">function selfish (target) &#123;</div><div class="line">  const cache = new WeakMap();</div><div class="line">  const handler = &#123;</div><div class="line">    get (target, key) &#123;</div><div class="line">      const value = Reflect.get(target, key);</div><div class="line">      if (typeof value !== &apos;function&apos;) &#123;</div><div class="line">        return value;</div><div class="line">      &#125;</div><div class="line">      if (!cache.has(value)) &#123;</div><div class="line">        cache.set(value, value.bind(target));</div><div class="line">      &#125;</div><div class="line">      return cache.get(value);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  const proxy = new Proxy(target, handler);</div><div class="line">  return proxy;</div><div class="line">&#125;</div><div class="line">const logger = selfish(new Logger());</div></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li>class继承</li>
</ol>
<blockquote>
<p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class ColorPoint extends Point&#123;</div><div class="line"> constructor(x, y, color) &#123;</div><div class="line">    super(x, y); // 调用父类的constructor(x, y)</div><div class="line">    this.color = color;</div><div class="line">  &#125;</div><div class="line">  toString() &#123;</div><div class="line">    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述实例中constructor和toString方法都出现了super，表示父类的构造函数，用来新建父类this对象。<br>子类必须在constructor方法中调用super方法，否则新建实例报错。只因子类无自身this对象，只有继承父类的然后<br>加工。如不调用super方法子类就得不到this对象。</p>
<blockquote>
<p>ES5的继承实例先造子类实例对象this，然后将父类的方法添加到this上。ES6则完全不同，先造父类实例对象this，然后<br>再用子类构造函数修改this。</p>
</blockquote>
<p>类的prototype属性和<strong>proto</strong>属性</p>
<blockquote>
<p>多数浏览器ES5实现之中，每个对象都有一个指向构造函数的<strong>proto</strong>属性。Class作为构造函数的语法糖，同时拥有prototype和<br><strong>proto</strong>属性，故同时存在两条继承链。作为一个对象，子类B的原型（<strong>proto</strong>属性）是父类；作为构造函数，子类B的原型(prototype<br>属性)是父类的实例。</p>
<ul>
<li>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类；</li>
<li>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，指向父类的prototype属性。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">&#125;</div><div class="line">class B extends A &#123;</div><div class="line">&#125;</div><div class="line">B.__proto__ === A // true</div><div class="line">B.prototype.__proto__ === A.prototype // true</div><div class="line">//原理</div><div class="line">// B的实例继承A的实例</div><div class="line">Object.setPrototypeOf(B.prototype, A.prototype);</div><div class="line">const b = new B();</div><div class="line">// B的实例继承A的静态属性</div><div class="line">Object.setPrototypeOf(B, A);</div><div class="line"></div><div class="line">Object.setPropertypeOf=function (obj,proto)&#123;</div><div class="line">    obj.__proto__=proto;</div><div class="line">    return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Extends 的继承目标</li>
</ul>
<p>extends关键字后边可以继承多种类型的值，只要被继承者有prototype属性</p>
<ol>
<li>子类继承Object类</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class A extends Object&#123;&#125;</div><div class="line">A.__proto__===Objecdt;//true</div><div class="line">A.prototype.__proto__=Object.prototype;//true</div><div class="line">//A即构造函数Object的复制，A的实例即Object的实例</div></pre></td></tr></table></figure>
<ol>
<li>不存在任何继承</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A&#123;&#125;</div><div class="line">A.__proto__===Function.prototype;//true</div><div class="line">A.prototype.__proto__===Object.prototype;//true</div><div class="line">//A作为一个基类(不存在任何继承)，即普通函数故直接继承Function.prototype。</div><div class="line">但当A调用后返回一个空对象(Object实例)，故A.prototype.__proto__指向构造函数(Object)的prototype属性。</div></pre></td></tr></table></figure>
<ol>
<li>子类集成null</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class A extends null&#123;&#125;</div><div class="line">A.__proto__===Function.prototype;//true</div><div class="line">A.prototype.__proto__===undefined;//true</div><div class="line">//实际上是</div><div class="line">class C extends null &#123;</div><div class="line">  constructor() &#123; return Object.create(null); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Object.getPropertyOf():从子类获取父类</p>
</li>
<li><p>super关键字</p>
</li>
</ul>
<blockquote>
<p>既可以当函数使用也可以当对象使用，但用法完全不同。</p>
</blockquote>
<ol>
<li>作为函数，代表父类的构造函数,只能用在子类的构造函数中。(ES6规定子类构造函数必须执行一次super函数)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class A&#123;&#125;</div><div class="line">class B extends A&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        super();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/*super虽然代表了父类A的构造函数，但返回的是子类的实例(super内this指向B)，</div><div class="line">此时super()相当于A.prototype.constructor.call(this).*/</div></pre></td></tr></table></figure>
<ol>
<li>作为对象，指向父类的原型对象。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class A&#123;</div><div class="line">    p()&#123;</div><div class="line">        return 2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class B extends A&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        super();</div><div class="line">        console.log(super.p());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let b=new B();//2</div><div class="line">//ES6 规定，通过super调用父类的方法时，super会绑定子类的this。因此super就是this</div><div class="line">class A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.x = 1;</div><div class="line">  &#125;</div><div class="line">&#125;   </div><div class="line">class B extends A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.x = 2;</div><div class="line">    super.x = 3;</div><div class="line">    console.log(super.x); // undefined,A.prototype.x</div><div class="line">    console.log(this.x); // 3</div><div class="line">  &#125;</div><div class="line">&#125;  </div><div class="line">let b = new B();</div><div class="line">/*使用super的时候，必须显式指定是作为函数、还是作为对象;由于对象都是继承其它对象的，</div><div class="line">所以可以在任意对象中使用super关键字*/</div><div class="line">var obj = &#123;</div><div class="line">  toString() &#123;</div><div class="line">    return &quot;MyObject: &quot; + super.toString();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.toString(); // MyObject: [object Object]</div></pre></td></tr></table></figure>
<ul>
<li>实例的<strong>proto</strong>属性</li>
</ul>
<blockquote>
<p>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>prototype</strong>属性。<br>即子类原型的原型是父类的原型。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var p1 = new Point(2, 3);</div><div class="line">var p2 = new ColorPoint(2, 3, &apos;red&apos;);</div><div class="line">p2.__proto__ === p1.__proto__ // false</div><div class="line">p2.__proto__.__proto__ === p1.__proto__ // true,ColorPoint继承了Point</div><div class="line">//通过子类实例的__proto__.__proto__属性，可以修改父类实例的行为</div><div class="line">p2.__proto__.__proto__.printName = function () &#123;</div><div class="line">  console.log(&apos;Ha&apos;);</div><div class="line">&#125;;</div><div class="line">p1.printName() // &quot;Ha&quot;</div></pre></td></tr></table></figure>
<ol>
<li>原生构造函数的继承—无法继承</li>
</ol>
<ul>
<li>Boolean()</li>
<li>Number()</li>
<li>String()</li>
<li>Array()</li>
<li>Date()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Error()</li>
<li>Object()</li>
</ul>
<ol>
<li>Class的取值函数getter和存值函数setter<br>存值函数和取值函数是设置在属性的descriptor对象上的,与ES5完全一致。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lass MyClass &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  get prop() &#123;</div><div class="line">    return &apos;getter&apos;;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    console.log(&apos;setter: &apos;+value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.prop = 123;</div><div class="line">// setter: 123</div><div class="line">inst.prop</div><div class="line">// &apos;getter&apos;</div><div class="line">//prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</div></pre></td></tr></table></figure>
<ol>
<li>Class的Generator方法</li>
</ol>
<blockquote>
<p>某个方法之前加上*即为Generator函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Foo &#123;</div><div class="line">  constructor(...args) &#123;</div><div class="line">    this.args = args;</div><div class="line">  &#125;</div><div class="line">  * [Symbol.iterator]() &#123;</div><div class="line">    for (let arg of this.args) &#123;</div><div class="line">      yield arg;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">for (let x of new Foo(&apos;hello&apos;, &apos;world&apos;)) &#123;</div><div class="line">  console.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Class的静态方法</li>
</ol>
<blockquote>
<p>类相当于实例的原型，故类中定义的方法都会被实例继承。若在一个方法上加上static关键字<br>则表示该方法不会被实例继承，而是直接通过类来调用，但可以被子类继承，也可以通过super对象调用所谓的‘静态方法’。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Foo&#123;</div><div class="line">    static classMethod()&#123;</div><div class="line">        return &apos;hello&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Foo.classMethod();//&apos;hello&apos;</div><div class="line">var foo=new Foo();</div><div class="line">foo.classMethod();// TypeError: foo.classMethod is not a function</div><div class="line"> class Bar extends Foo &#123;</div><div class="line">   static classMethod() &#123;</div><div class="line">     return super.classMethod() + &apos;, too&apos;;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>Class的静态属性和实例属性</li>
</ol>
<blockquote>
<p>静态属性指Class本身的属性Class.propname,而非定义在实例对象this上的属性。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Foo&#123;</div><div class="line">    prop:2//无效</div><div class="line">    static prop:2//无效</div><div class="line">&#125;</div><div class="line">Foo.prop=1;</div><div class="line">Foo.prop;//1,只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</div></pre></td></tr></table></figure>
<p>ES7提议，Babel支持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//类的实例属性可以用等式，写入类的定义之中。</div><div class="line">class MyClass &#123;</div><div class="line">  myProp = 42;</div><div class="line">  constructor() &#123;</div><div class="line">    console.log(this.myProp); // 42</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">/*定义实例属性，之前只能写在类的constructor方法里面，如今可以不在。</div><div class="line">为了可读性的目的，对于那些在constructor里面已经定义的实例属性，</div><div class="line">新写法允许直接列出。*/</div><div class="line">class ReactCounter extends React.Component &#123;</div><div class="line">  state = &#123;</div><div class="line">    count: 0</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">//类的静态属性，只需在实例属性前加上static关键字</div><div class="line">class MyClass &#123;</div><div class="line">  static myStaticProp = 42;</div><div class="line">  constructor() &#123;</div><div class="line">    console.log(MyClass.myStaticProp); // 42</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>类的私有属性—提案，为class加了私有属性。方法是在属性名之前，使用#表示。</li>
</ol>
<blockquote>
<p>之所以引入一个新的#表示私有属性而非private关键字是因为JS是一门动态语言，使用独立符号似乎是唯一<br>可靠方法，能够准确地区分属性之公私。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  #x;</div><div class="line">  constructor(x = 0) &#123;</div><div class="line">    #x = +x;</div><div class="line">  &#125;</div><div class="line">  get x() &#123; return #x &#125;</div><div class="line">  set x(value) &#123; #x = +value &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>new.target属性—确定构造函数如何调用的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Person(name) &#123;</div><div class="line">  if (new.target !== undefined) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125; else &#123;</div><div class="line">    throw new Error(&apos;必须使用new生成实例&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 另一种写法</div><div class="line">function Person(name) &#123;</div><div class="line">  if (new.target === Person) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125; else &#123;</div><div class="line">    throw new Error(&apos;必须使用new生成实例&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var person = new Person(&apos;张三&apos;); // 正确</div><div class="line">var notAPerson = Person.call(person, &apos;张三&apos;);  // 报错</div><div class="line">//Class内调用new.target返回当前Class</div></pre></td></tr></table></figure>
<ol>
<li>Mixin模式的实现<blockquote>
<p>将多个类的接口混入(mix in)另一个类</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function mix(...mixins) &#123;</div><div class="line">  class Mix &#123;&#125;</div><div class="line"></div><div class="line">  for (let mixin of mixins) &#123;</div><div class="line">    copyProperties(Mix, mixin);</div><div class="line">    copyProperties(Mix.prototype, mixin.prototype);</div><div class="line">  &#125;</div><div class="line">  return Mix;</div><div class="line">&#125;</div><div class="line">function copyProperties(target, source) &#123;</div><div class="line">  for (let key of Reflect.ownKeys(source)) &#123;</div><div class="line">    if ( key !== &quot;constructor&quot;</div><div class="line">      &amp;&amp; key !== &quot;prototype&quot;</div><div class="line">      &amp;&amp; key !== &quot;name&quot;</div><div class="line">    ) &#123;</div><div class="line">      let desc = Object.getOwnPropertyDescriptor(source, key);</div><div class="line">      Object.defineProperty(target, key, desc);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class DistributedEdit extends mix(Loggable, Serializable) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>More info: <a href="https://developer.mozilla.org/en/docs/Web//Reference/Classes" target="_blank" rel="external">MDN Classes</a></p>
<h3 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h3><blockquote>
<p>修饰器（Decorator）是一个函数，用来修改类的行为。这是ES7的一个提案，目前Babel转码器已经支持。</p>
</blockquote>
<ol>
<li>类的修饰</li>
<li>方法的修饰</li>
<li>不能用于函数</li>
<li>core-decorators.js</li>
<li>使用修饰器实现自动发布事件</li>
<li>mixin混入</li>
<li>trait</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function factorial(n, acc = 1) &#123;</div><div class="line">    &apos;use strict&apos;;</div><div class="line">    if (n &lt;= 1) return acc;</div><div class="line">    return factorial(n - 1, n * acc);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Stack overflow in most implementations today,</div><div class="line">// but safe on arbitrary inputs in ES6</div><div class="line">factorial(100000)</div></pre></td></tr></table></figure>
<h3 id="Modules模块"><a href="#Modules模块" class="headerlink" title="Modules模块"></a>Modules模块</h3><blockquote>
<p>Language-level support for modules for component definition.<br>Codifies patterns from popular  module loaders (AMD, CommonJS).<br>Runtime behaviour defined by a host-defined default loader.<br>Implicitly async model – no code executes until requested modules are available and processed.<br>组件定义的模块的语言级支持。编译流行模块加载程序（AMD，COMMONJS）的模式。<br>由主机定义的默认加载器定义的运行时行为。隐式异步模型 - 在请求的模块可用并处理之前，不执行代码。<br>ES6在语言标准层面上实现了模块功能，完全可以取代CommonJS，AMD规范，成为B/S通用的模块解决方案。<br>模块化设计思想是尽量静态化，使得编译时就能确定模块的依赖关系以及输入和输出的变量。</p>
</blockquote>
<p>好处：</p>
<ol>
<li>不再需要UMD模块格式了，将来服务器和浏览器都会支持ES6模块格式；</li>
<li>将来浏览器的新API就能用模块格式提供，不必做成全局变量或者navigator对象的属性；</li>
<li>不再需要对象作为命名空间(如Math)，未来这些功能可以通过模块提供。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// lib/math.js</div><div class="line">export function sum(x, y) &#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line">export var pi = 3.141593;</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// app.js</div><div class="line">import * as math from &quot;lib/math&quot;;</div><div class="line">alert(&quot;2π = &quot; + math.sum(math.pi, math.pi));</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// otherApp.js</div><div class="line">import &#123;sum, pi&#125; from &quot;lib/math&quot;;</div><div class="line">alert(&quot;2π = &quot; + sum(pi, pi));</div></pre></td></tr></table></figure>
<p>Some additional features include <code>export default</code> and <code>export *</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// lib/mathplusplus.js</div><div class="line">export * from &quot;lib/math&quot;;</div><div class="line">export var e = 2.71828182846;</div><div class="line">export default function(x) &#123;</div><div class="line">    return Math.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// app.js</div><div class="line">import ln, &#123;pi, e&#125; from &quot;lib/mathplusplus&quot;;</div><div class="line">alert(&quot;2π = &quot; + ln(e)*pi*2);</div></pre></td></tr></table></figure>
<ol>
<li>严格模式—自动设定为’use strict’</li>
<li>export,export default及import命令</li>
<li>模块的整体加载</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import * as circle from &apos;./circle&apos;;</div><div class="line">console.log(&apos;圆面积：&apos; + circle.area(4));</div><div class="line">console.log(&apos;圆周长：&apos; + circle.circumference(14));</div><div class="line">//注意：整体加载的模块所在的那个对象是可以静态分析的，不允许运行时改变</div><div class="line">circle.foo = &apos;hello&apos;;//不允许</div></pre></td></tr></table></figure>
<ol>
<li>模块的继承</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// circleplus.js</div><div class="line"></div><div class="line">export * from &apos;circle&apos;;</div><div class="line">export var e = 2.71828182846;</div><div class="line">export default function(x) &#123;</div><div class="line">  return Math.exp(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>import():按需加载，条件加载，动态模块路径</li>
</ol>
<p>More MDN info: <a href="https://developer.mozilla.org/en-US/docs/Web//Reference/Statements/import" target="_blank" rel="external">import statement</a>, <a href="https://developer.mozilla.org/en-US/docs/Web//Reference/Statements/export" target="_blank" rel="external">export statement</a></p>
<h3 id="Module-Loaders"><a href="#Module-Loaders" class="headerlink" title="Module Loaders"></a>Module Loaders</h3><ol>
<li>浏览器加载</li>
</ol>
<ul>
<li>传统方法：script引入</li>
</ul>
<blockquote>
<p>默认情况下，B是同步加载JS脚本，即渲染引擎遇到script就停下来直到脚本执行完，再继续向下循环。<br>如果是外部脚本，还必须加入脚本下载时间。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//defer:整个页面渲染结束才执行，渲染完再执行；async:一旦下载完，渲染引擎就会中断渲染，执行此脚本后再继续渲染，下载完就执行。</div><div class="line">&lt;script src=&quot;path/to/myModule.js&quot; defer&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;path/to/myModule.js&quot; async&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>加载规则：ES6模块也可以使用script标签，但要加入type=’module’属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot;&gt;</div><div class="line"> import utils from &quot;./utils.js&quot;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;!-- 等同于 --&gt;</div><div class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot; defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>对于外部模块脚本，注意以下几点：</p>
<pre><code>1. 代码在模块作用域之中运行而非全局，模块内顶层变量外部不可见
2. 模块脚本自动采用严格模式，无论声明与否；
3. 模块中可以使用import及export命令处理模块
4. 模块中，顶层的this关键字返回undefined而非window
5. 同一个模块如果加载多次，只执行一次
</code></pre><figure class="highlight plain"><figcaption><span>isNotModuleScript = this !== undefined;//侦测是否在ES6模块中```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. ES6模块与CommonJS模块差异</div><div class="line"></div><div class="line">两大重大差异：</div><div class="line"></div><div class="line">- 前者输出的是值的引用，后者是拷贝</div><div class="line">- 前者是编译时输出接口，后者是运行时加载</div><div class="line"></div><div class="line">&gt; CommonJS加载的是一个在脚本运行才会生成的对象，而ES6不是对象，其对外接口只是一种静态定义，</div><div class="line">在代码静态解析阶段就会生成。ES6的import有点像Unix系统的符号连接，原始值变了，import加载的值也变。</div><div class="line">故ES6模块是动态引用，不会缓存值，模块里的变量绑定其所在的模块。</div><div class="line"></div><div class="line">3. Node加载</div><div class="line"></div><div class="line">&gt;Node 对 ES6 模块的处理比较麻烦，因为它有自己的 CommonJS 模块格式，与 ES6 模块格式是不兼容的。</div><div class="line">目前的解决方案是，将两者分开，ES6 模块和 CommonJS 采用各自的加载方案。</div><div class="line"></div><div class="line">在静态分析阶段，一个模块脚本若含import或export语句，Node便认为其为ES6模块，否则就是CommonJS模块。</div><div class="line">若不输出任何接口但希望被认为是ES6模块，可在脚本中加入```export &#123;&#125;;//不输出任何脚本的ES6标准写法</div></pre></td></tr></table></figure>
<p>ES6模块中顶层的this指向undefined；而CommonJS模块的顶层this指向当前模块。</p>
<ul>
<li>import 命令加载CommonJS模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// a.js  CommonJS模块</div><div class="line">module.exports = &#123;</div><div class="line">  foo: &apos;hello&apos;,</div><div class="line">  bar: &apos;world&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 等同于</div><div class="line">export default &#123;</div><div class="line">  foo: &apos;hello&apos;,</div><div class="line">  bar: &apos;world&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>require命令加载ES6模块<blockquote>
<p>采用require命令加载 ES6 模块时，ES6 模块的所有输出接口，会成为输入对象的属性。</p>
</blockquote>
</li>
</ul>
<ol>
<li>循环加载circular dependency</li>
</ol>
<ul>
<li>CommonJS模块加载原理<h3 id="Subclassable-Built-ins内嵌对象的亚类"><a href="#Subclassable-Built-ins内嵌对象的亚类" class="headerlink" title="Subclassable Built-ins内嵌对象的亚类"></a>Subclassable Built-ins内嵌对象的亚类</h3><blockquote>
<p>In ES6, built-ins like <code>Array</code>, <code>Date</code> and DOM <code>Element</code>s can be subclassed.<br>Object construction for a function named <code>Ctor</code> now uses two-phases (both virtually dispatched):</p>
</blockquote>
</li>
<li>Call <code>Ctor[@@create]</code> to allocate the object, installing any special behavior</li>
<li>Invoke constructor on new instance to initialize<br>The known <code>@@create</code> symbol is available via <code>Symbol.create</code>.  Built-ins now expose their <code>@@create</code> explicitly.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Pseudo-code of Array</div><div class="line">class Array &#123;</div><div class="line">    constructor(...args) &#123; /* ... */ &#125;</div><div class="line">    static [Symbol.create]() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// User code of Array subclass</div><div class="line">class MyArray extends Array &#123;</div><div class="line">    constructor(...args) &#123; super(...args); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Two-phase &apos;new&apos;:</div><div class="line">// 1) Call @@create to allocate object</div><div class="line">// 2) Invoke constructor on new instance</div><div class="line">var arr = new MyArray();</div><div class="line">arr[1] = 12;</div><div class="line">arr.length == 2</div></pre></td></tr></table></figure>
<h3 id="typed-arrays"><a href="#typed-arrays" class="headerlink" title="typed arrays"></a>typed arrays</h3><blockquote>
<p>支持任意基于字节的数据结构来实现网络协议，加密算法，文件格式操作等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Example &#123;</div><div class="line">    constructor (buffer = new ArrayBuffer(24)) &#123;</div><div class="line">        this.buffer = buffer</div><div class="line">    &#125;</div><div class="line">    set buffer (buffer) &#123;</div><div class="line">        this._buffer    = buffer</div><div class="line">        this._id        = new Uint32Array (this._buffer,  0,  1)</div><div class="line">        this._username  = new Uint8Array  (this._buffer,  4, 16)</div><div class="line">        this._amountDue = new Float32Array(this._buffer, 20,  1)</div><div class="line">    &#125;</div><div class="line">    get buffer ()     &#123; return this._buffer       &#125;</div><div class="line">    set id (v)        &#123; this._id[0] = v           &#125;</div><div class="line">    get id ()         &#123; return this._id[0]        &#125;</div><div class="line">    set username (v)  &#123; this._username[0] = v     &#125;</div><div class="line">    get username ()   &#123; return this._username[0]  &#125;</div><div class="line">    set amountDue (v) &#123; this._amountDue[0] = v    &#125;</div><div class="line">    get amountDue ()  &#123; return this._amountDue[0] &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let example = new Example()</div><div class="line">example.id = 7</div><div class="line">example.username = &quot;John Doe&quot;</div><div class="line">example.amountDue = 42.0</div></pre></td></tr></table></figure>
<h3 id="internationalization-localization"><a href="#internationalization-localization" class="headerlink" title="internationalization-localization"></a>internationalization-localization</h3><blockquote>
<p>collation整理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var list = [ &quot;ä&quot;, &quot;a&quot;, &quot;z&quot; ]</div><div class="line">var l10nDE = new Intl.Collator(&quot;de&quot;)</div><div class="line">var l10nSV = new Intl.Collator(&quot;sv&quot;)</div><div class="line">l10nDE.compare(&quot;ä&quot;, &quot;z&quot;) === -1</div><div class="line">l10nSV.compare(&quot;ä&quot;, &quot;z&quot;) === +1</div><div class="line">console.log(list.sort(l10nDE.compare)) // [ &quot;a&quot;, &quot;ä&quot;, &quot;z&quot; ]</div><div class="line">console.log(list.sort(l10nSV.compare)) // [ &quot;a&quot;, &quot;z&quot;, &quot;ä&quot; ]</div></pre></td></tr></table></figure>
<blockquote>
<p>number formatting</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var l10nEN = new Intl.NumberFormat(&quot;en-US&quot;)</div><div class="line">var l10nDE = new Intl.NumberFormat(&quot;de-DE&quot;)</div><div class="line">l10nEN.format(1234567.89) === &quot;1,234,567.89&quot;</div><div class="line">l10nDE.format(1234567.89) === &quot;1.234.567,89&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>current formatting</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var l10nUSD = new Intl.NumberFormat(&quot;en-US&quot;, &#123; style: &quot;currency&quot;, currency: &quot;USD&quot; &#125;)</div><div class="line">var l10nGBP = new Intl.NumberFormat(&quot;en-GB&quot;, &#123; style: &quot;currency&quot;, currency: &quot;GBP&quot; &#125;)</div><div class="line">var l10nEUR = new Intl.NumberFormat(&quot;de-DE&quot;, &#123; style: &quot;currency&quot;, currency: &quot;EUR&quot; &#125;)</div><div class="line">l10nUSD.format(100200300.40) === &quot;$100,200,300.40&quot;</div><div class="line">l10nGBP.format(100200300.40) === &quot;£100,200,300.40&quot;</div><div class="line">l10nEUR.format(100200300.40) === &quot;100.200.300,40 €&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>date/time formating</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var l10nEN = new Intl.DateTimeFormat(&quot;en-US&quot;)</div><div class="line">var l10nDE = new Intl.DateTimeFormat(&quot;de-DE&quot;)</div><div class="line">l10nEN.format(new Date(&quot;2015-01-02&quot;)) === &quot;1/2/2015&quot;</div><div class="line">l10nDE.format(new Date(&quot;2015-01-02&quot;)) === &quot;2.1.2015&quot;</div></pre></td></tr></table></figure>
<h3 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h3><blockquote>
<p>SIMD（发音/sim-dee/）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。<br>它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。<br>与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。</p>
</blockquote>
<h3 id="Good-Practise"><a href="#Good-Practise" class="headerlink" title="Good Practise"></a>Good Practise</h3><ol>
<li><p>块级作用域</p>
<ol>
<li>let取代var</li>
<li>全局常量和线程安全<br>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量</li>
</ol>
</li>
<li>字符串：``</li>
<li>解耦赋值：首选</li>
<li>对象：单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li>
<li>数组：使用扩展运算符配合Array.from方法</li>
<li>函数：</li>
<li>Map结构：区分Object和Map，只有模拟现实世界的实体对象采用Object。若是键值对结构首选Map</li>
<li>Class :首选</li>
<li>模块：import取代require</li>
<li>EsLint使用</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="#参考链接"></a>#参考链接</h3><p><a href="https://github.com/lukehoban/es6features#readme" target="_blank" rel="external">https://github.com/lukehoban/es6features#readme</a><br><a href="http://es6-features.org/#Constants" target="_blank" rel="external">http://es6-features.org/#Constants</a><br><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript-6&quot;&gt;&lt;a href=&quot;#ECMAScript-6&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6&quot;&gt;&lt;/a&gt;ECMAScript 6&lt;/h1&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#I
    
    </summary>
    
      <category term="JS" scheme="https://yanlee26.github.io/categories/JS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Python get started</title>
    <link href="https://yanlee26.github.io/2016/10/04/python/"/>
    <id>https://yanlee26.github.io/2016/10/04/python/</id>
    <published>2016-10-03T18:25:40.000Z</published>
    <updated>2017-07-31T14:25:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p>
</blockquote>
<ul>
<li><p>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</p>
</li>
<li><p>Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</p>
</li>
<li><p>Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</p>
</li>
<li><p>Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p>
</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li><p>易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p>
</li>
<li><p>易于阅读：Python代码定义的更清晰。</p>
</li>
<li><p>易于维护：Python的成功在于它的源代码是相当容易维护的。</p>
</li>
<li><p>一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</p>
</li>
<li><p>互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</p>
</li>
<li><p>可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</p>
</li>
<li><p>可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</p>
</li>
<li><p>数据库：Python提供所有主要的商业数据库的接口。</p>
</li>
<li><p>GUI编程：Python支持GUI可以创建和移植到许多系统调用。</p>
</li>
<li><p>可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</p>
</li>
</ol>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><ul>
<li><p>标识符，保留字同JS</p>
</li>
<li><p>行和缩进</p>
</li>
</ul>
<blockquote>
<p>不使用大括号（{}）来控制类，函数以及其他逻辑判断。python最具特色的就是用缩进来写模块。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if True:</div><div class="line">    print &quot;True&quot;</div><div class="line">else:</div><div class="line">  print &quot;False&quot;</div></pre></td></tr></table></figure>
<ul>
<li>多行语句：一般以新行作为为语句的结束符。<br>但是我们可以使用斜杠（ \）将一行的语句分为多行显示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">total = item_one + \</div><div class="line">        item_two + \</div><div class="line">        item_three</div><div class="line">#语句中包含[], &#123;&#125; 或 () 括号就不需要使用多行连接符</div><div class="line">days = [&apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,</div><div class="line">        &apos;Thursday&apos;, &apos;Friday&apos;]</div></pre></td></tr></table></figure>
<ul>
<li>引号（三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">word = &apos;word&apos;</div><div class="line">sentence = &quot;这是一个句子。&quot;</div><div class="line">paragraph = &quot;&quot;&quot;这是一个段落。</div><div class="line">包含了多个语句&quot;&quot;&quot;</div></pre></td></tr></table></figure>
<ul>
<li><p>注释（# 开头，三个单引号(‘’’)或三个双引号(“””)）     </p>
</li>
<li><p>空行：函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
</li>
</ul>
<h1 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h1><blockquote>
<p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。<br>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。<br>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>
</blockquote>
<h2 id="赋值-不需要类型声明"><a href="#赋值-不需要类型声明" class="headerlink" title="赋值(不需要类型声明)"></a>赋值(不需要类型声明)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">counter = 100 # 赋值整型变量</div><div class="line">miles = 1000.0 # 浮点型</div><div class="line">name = &quot;John&quot; # 字符串</div><div class="line"> </div><div class="line">print (counter);</div><div class="line"></div><div class="line">print (miles);</div><div class="line"></div><div class="line">print (name);</div><div class="line"></div><div class="line"># 多个变量</div><div class="line">a, b, c = 1, 2, &quot;john&quot;</div><div class="line">a = b = c = 1</div></pre></td></tr></table></figure>
<h2 id="标准数据类型-五个，在内存中存储的数据可以有多种类型"><a href="#标准数据类型-五个，在内存中存储的数据可以有多种类型" class="headerlink" title="标准数据类型(五个，在内存中存储的数据可以有多种类型)"></a>标准数据类型(五个，在内存中存储的数据可以有多种类型)</h2><ul>
<li>Numbers（数字）</li>
<li>String（字符串）</li>
<li>List（列表，Python 中使用最频繁的数据类型）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</div><div class="line">tinylist = [123, &apos;john&apos;]</div><div class="line"> </div><div class="line">print (list)               # 输出完整列表</div><div class="line">print (list[0]  )          # 输出列表的第一个元素</div><div class="line">print (list[1:3])          # 输出第二个至第三个的元素 </div><div class="line">print (list[2:])          # 输出从第三个开始至列表末尾的所有元素</div><div class="line">print (tinylist* 2)       # 输出列表两次</div><div class="line">print (list + tinylist)    # 打印组合的列表</div></pre></td></tr></table></figure>
<ul>
<li>Tuple（元组,另一个数据类型，类似于List（列表）,用”()”标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</div><div class="line">tinytuple = (123, &apos;john&apos;)</div><div class="line"> </div><div class="line">print (tuple)               # 输出完整列表</div><div class="line">print (tuple[0]  )          # 输出列表的第一个元素</div><div class="line">print (tuple[1:3])          # 输出第二个至第三个的元素 </div><div class="line">print (tuple[2:])          # 输出从第三个开始至列表末尾的所有元素</div><div class="line">print (tinytuple* 2)       # 输出列表两次</div><div class="line">print (tuple + tinytuple)    # 打印组合的列表</div></pre></td></tr></table></figure>
<ul>
<li>Dictionary（字典,列表是有序的对象结合，字典是无序的对象集合。字典当中的元素是通过键来存取的，而不是通过偏移存取。字典用”{ }”标识。字典由索引(key)和它对应的值value组成。）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dict = &#123;&#125;</div><div class="line">dict[&apos;one&apos;] = &quot;This is one&quot;</div><div class="line">dict[2] = &quot;This is two&quot;</div><div class="line"> </div><div class="line">tinydict = &#123;&apos;name&apos;: &apos;john&apos;,&apos;code&apos;:6734, &apos;dept&apos;: &apos;sales&apos;&#125;</div><div class="line"> </div><div class="line"> </div><div class="line">print (dict[&apos;one&apos;])          # 输出键为&apos;one&apos; 的值</div><div class="line">print (dict[2])              # 输出键为 2 的值</div><div class="line">print (tinydict)             # 输出完整的字典</div><div class="line">print (tinydict.keys())      # 输出所有键</div><div class="line">print (tinydict.values())    # 输出所有值</div></pre></td></tr></table></figure>
<h2 id="数据类型转换：只需要将数据类型作为函数名即可"><a href="#数据类型转换：只需要将数据类型作为函数名即可" class="headerlink" title="数据类型转换：只需要将数据类型作为函数名即可"></a>数据类型转换：只需要将数据类型作为函数名即可</h2><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul>
<li>算术运算符</li>
<li>比较（关系）运算符</li>
<li>赋值运算符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**=	幂赋值运算符	c **= a 等效于 c = c ** a</div><div class="line">//=	取整除赋值运算符	c //= a 等效于 c = c // a</div></pre></td></tr></table></figure>
<ul>
<li><p>逻辑运算符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and not or</div></pre></td></tr></table></figure>
</li>
<li><p>位运算符</p>
</li>
<li>成员运算符(字符串，列表或元组。in/not in)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = 10</div><div class="line">b = 20</div><div class="line">list = [1, 2, 3, 4, 5 ];</div><div class="line"></div><div class="line">if ( a in list ):</div><div class="line">   print (&quot;1 - variable a in the list &quot; )</div><div class="line">else:</div><div class="line">   print (&quot;1 - variable a not in the  list &quot;)</div><div class="line"></div><div class="line">if ( b not in list ):</div><div class="line">   print (&quot;2 - variable b not in the  list &quot;)</div><div class="line">else:</div><div class="line">   print (&quot;2 - variable b in the list &quot; )</div><div class="line"># modify the value of a</div><div class="line">a = 2</div><div class="line">if ( a in list ):</div><div class="line">   print (&quot;3 - variable a in the list &quot; )</div><div class="line">else:</div><div class="line">   print (&quot;3 - variable a not in the  list &quot;)</div></pre></td></tr></table></figure>
<ul>
<li>身份运算符(比较两个对象的存储单元 is/is not)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">a = 20</div><div class="line">b = 20</div><div class="line"></div><div class="line">if ( a is b ):</div><div class="line">   print (&quot;1 - a and b are  the same log&quot;)</div><div class="line">else:</div><div class="line">   print (&quot;1 - a and b are not the same log&quot;)</div><div class="line"></div><div class="line">if ( id(a) is not id(b) ):</div><div class="line">   print (&quot;2 - a and b are  the same log&quot;)</div><div class="line">else:</div><div class="line">   print (&quot;2 - a and b are not the same log&quot;)</div><div class="line"></div><div class="line"># modify the value of b</div><div class="line">b = 30</div><div class="line">if ( a is b ):</div><div class="line">   print (&quot;3 - a and b are  the same log&quot;)</div><div class="line">else:</div><div class="line">   print (&quot;3 - a and b are not the same log&quot;)</div><div class="line"></div><div class="line">if ( a is not b ):</div><div class="line">   print (&quot;4 - a and b are not the same log&quot;)</div><div class="line">else:</div><div class="line">   print (&quot;4 - a and b are  the same log&quot;)</div></pre></td></tr></table></figure>
<ul>
<li>运算符优先级</li>
</ul>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if ( var  == 100 ) : print (&quot;变量 var 的值为100&quot; )</div><div class="line"></div><div class="line">if condition：</div><div class="line">    Execute the statement...</div><div class="line">elseif：</div><div class="line">    Execute the statement...</div><div class="line">else：</div><div class="line">Execute the statement...</div></pre></td></tr></table></figure>
<h1 id="循环语句-没有do-while循环"><a href="#循环语句-没有do-while循环" class="headerlink" title="循环语句(没有do-while循环)"></a>循环语句(没有do-while循环)</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><h2 id="pass语句-不做任何事情，一般用做占位语句"><a href="#pass语句-不做任何事情，一般用做占位语句" class="headerlink" title="pass语句(不做任何事情，一般用做占位语句)"></a>pass语句(不做任何事情，一般用做占位语句)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for letter in &apos;Python&apos;:</div><div class="line">   if letter == &apos;h&apos;:</div><div class="line">      pass</div><div class="line">      print (&apos;This is the block of pass &apos;)</div><div class="line">   print (&apos;The current letter is :&apos;, letter)</div><div class="line"></div><div class="line">print (&quot;Good bye!&quot;)</div></pre></td></tr></table></figure>
<h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><p>Python 支持四种不同的数值类型：</p>
<ul>
<li><p>整型(Int) 通常被称为是整型或整数，是正或负整数，不带小数点。</p>
</li>
<li><p>长整型(long integers)无限大小的整数，整数最后是一个大写或小写的L。</p>
</li>
<li><p>浮点型(floating point real values)浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</p>
</li>
<li><p>复数( (complex numbers))复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p>
</li>
</ul>
<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ul>
<li>访问字符串中的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var1 = &apos;Hello World!&apos;</div><div class="line">var2 = &quot;Python Runoob&quot;</div><div class="line"></div><div class="line">print (&quot;var1[0]: &quot;, var1[0])</div><div class="line">print (&quot;var2[1:5]: &quot;, var2[1:5])</div></pre></td></tr></table></figure>
<ul>
<li>更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var1 = &apos;Hello World!&apos;</div><div class="line"></div><div class="line">print (&quot;更新字符串 :- &quot;, var1[:6] + &apos;Runoob!&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>字符串运算符</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">operator</th>
<th>describe</th>
<th style="text-align:right">instance</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td>字符串连接</td>
<td style="text-align:right">‘a + b’ HelloPython’</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td>重复输出字符串</td>
<td style="text-align:right">a * 2’HelloHello’</td>
</tr>
<tr>
<td style="text-align:left">[]</td>
<td>通过索引获取字符串中字符</td>
<td style="text-align:right">a[1]’e’</td>
</tr>
<tr>
<td style="text-align:left">[:]</td>
<td>截取字符串中的一部分</td>
<td style="text-align:right">a[1:4]’ell’</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td>成员运算符 - 如果字符串中包含给定的字符返回 True</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td>成员运算符 - 如果字符串中不包含给定的字符返回 True</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">r/R</td>
<td>原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td>格式字符串</td>
<td style="text-align:right">print “My name is %s and weight is %d kg!” % (‘Zara’, 21)</td>
</tr>
</tbody>
</table>
<h1 id="日期和时间-time-和-calendar-模块"><a href="#日期和时间-time-和-calendar-模块" class="headerlink" title="日期和时间( time 和 calendar 模块)"></a>日期和时间( time 和 calendar 模块)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import time;  # 引入time模块</div><div class="line"></div><div class="line">ticks = time.time()</div><div class="line">print (ticks)</div></pre></td></tr></table></figure>
<h2 id="时间元祖"><a href="#时间元祖" class="headerlink" title="时间元祖"></a>时间元祖</h2><table>
<thead>
<tr>
<th style="text-align:left">list</th>
<th>Field</th>
<th style="text-align:right">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td>year</td>
<td style="text-align:right">2008</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td>month</td>
<td style="text-align:right">1-12</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td>day</td>
<td style="text-align:right">1-31</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td>hour</td>
<td style="text-align:right">0-23</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td>minutes</td>
<td style="text-align:right">0-59</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td>seconds</td>
<td style="text-align:right">0-59</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td>day of week</td>
<td style="text-align:right">0-6</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td>day of year</td>
<td style="text-align:right">1-366</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td>summer time</td>
<td style="text-align:right">-1, 0, 1, -1是决定是否为夏令时的旗帜</td>
</tr>
</tbody>
</table>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def printme( str ):</div><div class="line">   print (str)</div><div class="line">   return</div><div class="line"></div><div class="line">printme(&apos;hello&apos;)</div><div class="line">printme(&apos;python&apos;)</div></pre></td></tr></table></figure>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><blockquote>
<p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。<br>模块让你能够有逻辑地组织你的 Python 代码段。<br>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。<br>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p>
</blockquote>
<h2 id="import-from-import-from-import"><a href="#import-from-import-from-import" class="headerlink" title="import,from-import,from-import*"></a>import,from-import,from-import*</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import module1[, module2[,... moduleN]</div><div class="line"># 从模块中导入一个指定的部分到当前命名空间中</div><div class="line">from modname import name1[, name2[, ... nameN]]</div><div class="line"># 把一个模块的所有内容全都导入到当前的命名空间也是可行的</div><div class="line">from modname import *</div></pre></td></tr></table></figure>
<h2 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h2><blockquote>
<p>变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。<br>一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。</p>
</blockquote>
<h2 id="dir-函数，排好序的字符串列表，内容是一个模块里定义过的名字。"><a href="#dir-函数，排好序的字符串列表，内容是一个模块里定义过的名字。" class="headerlink" title="dir()函数，排好序的字符串列表，内容是一个模块里定义过的名字。"></a>dir()函数，排好序的字符串列表，内容是一个模块里定义过的名字。</h2><h2 id="globals-和-locals-函数"><a href="#globals-和-locals-函数" class="headerlink" title="globals() 和 locals() 函数"></a>globals() 和 locals() 函数</h2><h2 id="reload-函数"><a href="#reload-函数" class="headerlink" title="reload() 函数"></a>reload() 函数</h2><h1 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h1><h1 id="file方法"><a href="#file方法" class="headerlink" title="file方法"></a>file方法</h1><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yanlee26.github.io/categories/Python/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>SCSS</title>
    <link href="https://yanlee26.github.io/2016/09/24/scss/"/>
    <id>https://yanlee26.github.io/2016/09/24/scss/</id>
    <published>2016-09-23T19:45:24.000Z</published>
    <updated>2017-07-31T14:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><h3 id="get-started…"><a href="#get-started…" class="headerlink" title="get started…"></a>get started…</h3><ol>
<li>变量<blockquote>
<p>定义变量以便于维护</p>
</blockquote>
</li>
</ol>
<p><code>$fontStack:    Helvetica, sans-serif;
$primaryColor: #333;
body {
  font-family: $fontStack;
  color: $primaryColor;
}
// css
body {
  font-family: Helvetica, sans-serif;
  color: #333;
}</code></p>
<ol>
<li>嵌套<blockquote>
<p>选择器嵌套，层次分明</p>
</blockquote>
</li>
</ol>
<p>`<br>nav {<br>  ul {<br>    margin: 0;<br>    padding: 0;<br>    list-style: none;<br>  }<br>  li { display: inline-block; }<br>  a {<br>    display: block;<br>    padding: 6px 12px;<br>    text-decoration: none;<br>  }<br>}<br>//css<br>nav ul {<br>  margin: 0;<br>  padding: 0;<br>  list-style: none;<br>}</p>
<p>nav li {<br>  display: inline-block;<br>}</p>
<p>nav a {<br>  display: block;<br>  padding: 6px 12px;<br>  text-decoration: none;<br>}<br>`</p>
<ol>
<li>导入<blockquote>
<p>导入其它sass文件，优于css的@import</p>
</blockquote>
</li>
</ol>
<p><code>//_reset.scss
html,
body,
ul,
ol {
   margin: 0;
  padding: 0;
}
//base.scss
@import &#39;reset&#39;;
body {
  font-size: 100% Helvetica, sans-serif;
  background-color: #efefef;
}</code></p>
<ol>
<li>mixin<blockquote>
<p>让css3的编写锦上添花</p>
</blockquote>
</li>
</ol>
<p><code>@mixin box-sizing ($sizing) {
    -webkit-box-sizing:$sizing;     
       -moz-box-sizing:$sizing;
            box-sizing:$sizing;
}
.box-border{
    border:1px solid #ccc;
    @include box-sizing(border-box);
}
//css
.box-border {
  border: 1px solid #ccc;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}</code></p>
<ol>
<li>扩展/继承<blockquote>
<p>@extend 优雅实现代码组合声明</p>
</blockquote>
</li>
</ol>
<p>`<br>.message {<br>  border: 1px solid #ccc;<br>  padding: 10px;<br>  color: #333;<br>}<br>.success {<br>  @extend .message;<br>  border-color: green;<br>}<br>.error {<br>  @extend .message;<br>  border-color: red;<br>}<br>//css<br>.message, .success, .error, .warning {<br>  border: 1px solid #cccccc;<br>  padding: 10px;<br>  color: #333;<br>}</p>
<p>.success {<br>  border-color: green;<br>}</p>
<p>.error {<br>  border-color: red;<br>}</p>
<p>.warning {<br>  border-color: yellow;<br>}<br>`</p>
<ol>
<li>四则运算<br>`<br>.container { width: 100%; }</li>
</ol>
<p>article[role=”main”] {<br>  float: left;<br>  width: 600px / 960px * 100%;<br>}</p>
<p>aside[role=”complimentary”] {<br>  float: right;<br>  width: 300px / 960px * 100%;<br>}<br>//css<br>.container {<br>  width: 100%;<br>}</p>
<p>article[role=”main”] {<br>  float: left;<br>  width: 62.5%;<br>}</p>
<p>aside[role=”complimentary”] {<br>  float: right;<br>  width: 31.25%;<br>}<br>`</p>
<ol>
<li>颜色变换<br><code>$linkColor: #08c;
a {
 text-decoration:none;
 color:$linkColor;
 &amp;:hover{
   color:darken($linkColor,10%);
 }
}
//css
a {
text-decoration: none;
color: #0088cc;
}
a:hover {
color: #006699;
}</code><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3></li>
<li>文件后缀名<ul>
<li>sass:不使用{}及；</li>
<li>scss:同css，首选</li>
</ul>
</li>
<li>导入<code>@import</code><blockquote>
<p>导入css和css用法一样不再编译，导入scss会合并编译</p>
</blockquote>
</li>
<li>注释<code>标准注释/**/，编译到css；单行注释//不编译</code></li>
<li>变量<blockquote>
<p>$开头紧跟变量名，变量名值以：分隔，！表示默认值</p>
</blockquote>
</li>
</ol>
<p>`<br>$fontSize: 12px;<br>body{<br>    font-size:$fontSize;<br>}<br>$baseLineHeight:        2;</p>
<p>$baseLineHeight:        1.5 !default;<br>body{<br>    line-height: $baseLineHeight;<br>}<br>//css<br>body{<br>    line-height:2;<br>}<br>//特殊变量：变量作为属性或在某些特殊情况下等则必须要以#{$variables}形式使用<br>$borderDirection:       top !default;<br>$baseFontSize:          12px !default;<br>$baseLineHeight:        1.5 !default;</p>
<p>//应用于class和属性<br>.border-#{$borderDirection}{<br>  border-#{$borderDirection}:1px solid #ccc;<br>}<br>//应用于复杂的属性值<br>body{<br>    font:#{$baseFontSize}/#{$baseLineHeight};<br>}<br>`</p>
<ol>
<li><p>多值变量</p>
<blockquote>
<p>多值类型分list和map类型，list类似js数组，map类似对象<br>`<br>$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值<br>a{<br>color:nth($linkColor,1);</p>
</blockquote>
<p>&amp;:hover{<br> color:nth($linkColor,2);<br>}<br>}<br>//css<br>a{<br>color:#08c;<br>}<br>a:hover{<br>color:#333;<br>}<br>$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);<br>@each $header, $size in $headings {<br>#{$header} {<br> font-size: $size;<br>}<br>}<br>//css<br>h1 {<br>font-size: 2em;<br>}<br>h2 {<br>font-size: 1.5em;<br>}<br>h3 {<br>font-size: 1.2em;<br>}<br>`</p>
</li>
<li>全局变量：！global</li>
<li>嵌套与挑出@at-root,@at-root (without: …)和@at-root (with: …)</li>
<li>混合@mixin<br>`<br>@mixin center-block {<br> margin-left:auto;<br> margin-right:auto;<br>}<br>.demo{<br> @include center-block;<br>}<br>@mixin opacity($opacity:50) {<br>opacity: $opacity / 100;<br>filter: alpha(opacity=$opacity);<br>}<br>@mixin opacity($opacity:50) {<br>opacity: $opacity / 100;<br>filter: alpha(opacity=$opacity);<br>}</li>
</ol>
<p>//css style<br>.opacity{<br>  @include opacity; //参数使用默认值<br>}<br>.opacity-80{<br>  @include opacity(80); //传递参数<br>}<br>//多个参数<br>@mixin horizontal-line($border:1px dashed #ccc, $padding:10px){<br>    border-bottom:$border;<br>    padding-top:$padding;<br>    padding-bottom:$padding;<br>}<br>.imgtext-h li{<br>    @include horizontal-line(1px solid #ccc);<br>}<br>.imgtext-h–product li{<br>    @include horizontal-line($padding:15px);<br>}<br>//@content<br>@mixin max-screen($res){<br>  @media only screen and ( max-width: $res )<br>  {<br>    @content;<br>  }<br>}</p>
<p>@include max-screen(480px) {<br>  body { color: red }<br>}<br>`</p>
<ol>
<li>继承@extent</li>
<li>占位选择器%<blockquote>
<p>如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中<br>不管是否使用了@extend去继承相应的样式，都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用。</p>
</blockquote>
</li>
</ol>
<p>`<br>%ir{<br>  color: transparent;<br>  text-shadow: none;<br>  background-color: transparent;<br>  border: 0;<br>}<br>%clearfix{<br>  @if $lte7 {<br>    *zoom: 1;<br>  }<br>  &amp;:before,<br>  &amp;:after {<br>    content: “”;<br>    display: table;<br>    font: 0/0 a;<br>  }<br>  &amp;:after {<br>    clear: both;<br>  }<br>}</p>
<p>#header{<br>  h1{<br>    @extend %ir;<br>    width:300px;<br>  }<br>}<br>.ir{<br>  @extend %ir;<br>}<br>//css</p>
<p>#header h1,<br>.ir{<br>  color: transparent;<br>  text-shadow: none;<br>  background-color: transparent;<br>  border: 0;<br>}<br>`</p>
<ol>
<li>函数<br>`<br>$baseFontSize:      10px !default;<br>$gray:              #ccc !defualt;        </li>
</ol>
<p>// pixels to rems<br>@function pxToRem($px) {<br>  @return $px / $baseFontSize * 1rem;<br>}</p>
<p>body{<br>  font-size:$baseFontSize;<br>  color:lighten($gray,10%);<br>}<br>.test{<br>  font-size:pxToRem(16px);<br>  color:darken($gray,10%);<br>}<br>`</p>
<ol>
<li>运算<br>$baseFontSize:          14px !default;<br>$baseLineHeight:        1.5 !default;<br>$baseGap:               $baseFontSize * $baseLineHeight !default;<br>$halfBaseGap:           $baseGap / 2  !default;<br>$samllFontSize:         $baseFontSize - 2px  !default;</li>
</ol>
<p>//grid<br>$_columns:                     12 !default;      // Total number of columns<br>$_column-width:                60px !default;   // Width of a single column<br>$_gutter:                      20px !default;     // Width of the gutter<br>$_gridsystem-width:            $_columns * ($_column-width + $_gutter); //grid system width<code>
</code></p>
<ol>
<li>条件和循环<br>`<br>$lte7: true;<br>$type: monster;<br>.ib{<br>display:inline-block;<br>@if $lte7 {<pre><code>*display:inline;
*zoom:1;
</code></pre>}<br>}<br>p {<br>@if $type == ocean {<br>color: blue;<br>} @else if $type == matador {<br>color: red;<br>} @else if $type == monster {<br>color: green;<br>} @else {<br>color: black;<br>}<br>}<br>//css<br>.ib{<br>display:inline-block;<br><em>display:inline;
</em>zoom:1;<br>}<br>p {<br>color: green;<br>}<br>//三目运算<br>if($condition, $if_true, $if_false)<br>//for:@for $var from <start> through <end>和@for $var from <start> to <end><br>@for $i from 1 through 3 {<br>.item-#{$i} { width: 2em * $i; }<br>}<br>//css<br>.item-1 {<br>width: 2em;<br>}<br>.item-2 {<br>width: 4em;<br>}<br>.item-3 {<br>width: 6em;<br>}<br>//each:@each $var in <list or="" map=""><br>$animal-list: puma, sea-slug, egret, salamander;<br>@each $animal in $animal-list {<br>.#{$animal}-icon {<br>background-image: url(‘/images/#{$animal}.png’);<br>}<br>}<br>`</list></end></start></end></start></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SASS&quot;&gt;&lt;a href=&quot;#SASS&quot; class=&quot;headerlink&quot; title=&quot;SASS&quot;&gt;&lt;/a&gt;SASS&lt;/h1&gt;&lt;h3 id=&quot;get-started…&quot;&gt;&lt;a href=&quot;#get-started…&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="CSS" scheme="https://yanlee26.github.io/categories/CSS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>FLEX布局</title>
    <link href="https://yanlee26.github.io/2016/08/24/flex/"/>
    <id>https://yanlee26.github.io/2016/08/24/flex/</id>
    <published>2016-08-23T19:45:24.000Z</published>
    <updated>2017-07-31T14:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
</blockquote>
<p>通过笔者大量实践，发现flex布局屡试不爽，尤其在移动端自适应方面。但处于其大量的属性记忆混乱，今天图文并茂梳理如下。</p>
<h2 id="语法及概念部分"><a href="#语法及概念部分" class="headerlink" title="语法及概念部分"></a>语法及概念部分</h2><p><img src="http://img.mukewang.com/58b27b7c00012f3c12430476.jpg" alt="图片描述"></p>
<h2 id="实例演示部分"><a href="#实例演示部分" class="headerlink" title="实例演示部分"></a>实例演示部分</h2><pre><code>结合笛卡尔坐标系（仅考虑一个item情况，其它情况可以据此的排列组合实现）
</code></pre><p><img src="http://img.mukewang.com/58b27bb400017ac206010476.jpg" alt="图片描述"></p>
<p>##css部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line">/*骰子的布局*/</div><div class="line">.box &#123;</div><div class="line">  display: flex;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  border: 1px solid #ccc;</div><div class="line">  border-radius: 2px;</div><div class="line">&#125;</div><div class="line">.box .item&#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 10px;</div><div class="line">  height: 10px;</div><div class="line">  margin:3px;</div><div class="line">  border-radius: 50%;</div><div class="line">  background: #000;</div><div class="line">&#125;</div><div class="line">/*中上(1,0)*/</div><div class="line">.c2&#123;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div><div class="line">/*右上(2,0)*/</div><div class="line">.c3&#123;</div><div class="line">  justify-content: flex-end;</div><div class="line">&#125;</div><div class="line">/*左间(0,1)*/</div><div class="line">.c4&#123;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div><div class="line">/*左下(0,2)*/</div><div class="line">.c5&#123;</div><div class="line">  align-items: flex-end;</div><div class="line">&#125;</div><div class="line">/*中间(1,1)*/</div><div class="line">.c6&#123;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div><div class="line">/*右间(2,1)*/</div><div class="line">.c7&#123;</div><div class="line">  justify-content: flex-end;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*中下(1,2)*/</div><div class="line">.c8&#123;</div><div class="line">  justify-content: center;</div><div class="line">  align-items: flex-end;</div><div class="line">&#125;</div><div class="line">/*右下(2,2)*/</div><div class="line">.c9&#123;</div><div class="line">  justify-content: flex-end;</div><div class="line">    align-items: flex-end;</div><div class="line">&#125;</div><div class="line">/*两个*/</div><div class="line">/*space-between*/</div><div class="line">.c21&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line">/*两个flex-direction+column*/</div><div class="line">.c22&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line">/*2.3两个space-between+flex-direction+ align-items*/</div><div class="line">.c23&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">  flex-direction: column;</div><div class="line">  align-items: center;</div><div class="line">&#125;</div><div class="line">/*2.4两个space-between+flex-direction+ align-items*/</div><div class="line">.c24&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">  flex-direction: column;</div><div class="line">   align-items: flex-end;</div><div class="line">&#125;</div><div class="line">/*2.5两个space-between+flex-direction+ align-items*/</div><div class="line"></div><div class="line">.c25 .item:nth-child(2) &#123;</div><div class="line">   align-self: center;</div><div class="line">&#125;</div><div class="line">/*2.6两个space-between+flex-direction+ align-items*/</div><div class="line">.c26&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line">.c26 .item:nth-child(2) &#123;</div><div class="line">   align-self:  flex-end;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*3.1三个align-self：center+flex-end*/</div><div class="line"></div><div class="line">.c31 .item:nth-child(2) &#123;</div><div class="line">   align-self:  center;</div><div class="line">&#125;</div><div class="line">.c31 .item:nth-child(3) &#123;</div><div class="line">   align-self:  flex-end;</div><div class="line">&#125;</div><div class="line">/*4.1四个*/</div><div class="line">.c41 &#123;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  justify-content: flex-end;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div><div class="line">/*4.2四个*/</div><div class="line">.c42 &#123;</div><div class="line">  flex-wrap: wrap;</div><div class="line">  align-content: space-between;</div><div class="line">&#125;</div><div class="line">.column &#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display: flex;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line">/*6.1六个*/</div><div class="line">.c61&#123;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div><div class="line">.row&#123;</div><div class="line">  flex-basis: 100%;</div><div class="line">  display:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(2)&#123;</div><div class="line">  justify-content: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.row:nth-child(3)&#123;</div><div class="line">  justify-content: space-between;</div><div class="line">&#125;</div><div class="line">/*九个*/</div><div class="line">.c9&#123;</div><div class="line">  flex-wrap: wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/*网格布局*/</div><div class="line">/*基本*/</div><div class="line">.Grid &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line">/*百分比布局*/</div><div class="line">.Grid-cell.u-full &#123;</div><div class="line">  flex: 0 0 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of2 &#123;</div><div class="line">  flex: 0 0 50%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of3 &#123;</div><div class="line">  flex: 0 0 33.3333%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Grid-cell.u-1of4 &#123;</div><div class="line">  flex: 0 0 25%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*圣杯布局圣杯布局（Holy Grail Layout）*/</div><div class="line">.fh &#123;</div><div class="line">    display: flex;</div><div class="line">    min-height: 98vh;</div><div class="line">    flex-direction: column;</div><div class="line">    margin: 1rem;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh-header &#123;</div><div class="line">    display: flex;</div><div class="line">    flex: 1.2;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh&gt;.fh-middle &#123;</div><div class="line">    flex: 1;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">    margin: 1rem 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh&gt;.fh-footer &#123;</div><div class="line">    flex: 2.5;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh-content &#123;</div><div class="line">    flex: 1;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh-nav &#123;</div><div class="line">    /* 边栏的宽度设为20rem */</div><div class="line">    flex: 0 0 20rem;</div><div class="line">    border: 1px solid #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fh-nav &#123;</div><div class="line">    /* 导航放到最左边 */</div><div class="line">    order: -1;</div><div class="line">    margin-right: 1rem;</div><div class="line">&#125;</div><div class="line">/*输入框布局*/</div><div class="line">.InputAddOn &#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.InputAddOn-field &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line">/*悬挂式布局*/</div><div class="line">.Media &#123;</div><div class="line">  display: flex;</div><div class="line">  align-items: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Media-figure &#123;</div><div class="line">  margin-right: 1em;</div><div class="line">&#125;</div><div class="line">/*固定低栏*/</div><div class="line">.Site &#123;</div><div class="line">  display: flex;</div><div class="line">  min-height: 100vh;</div><div class="line">  flex-direction: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.Site-content &#123;</div><div class="line">  flex: 1;</div><div class="line">&#125;</div><div class="line">/*流式布局*/</div><div class="line">.parent &#123;</div><div class="line">  width: 200px;</div><div class="line">  height: 150px;</div><div class="line">  background-color: black;</div><div class="line">  display: flex;</div><div class="line">  flex-flow: row wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.child &#123;</div><div class="line">  box-sizing: border-box;</div><div class="line">  background-color: white;</div><div class="line">  flex: 0 0 25%;</div><div class="line">  height: 50px;</div><div class="line">  border: 1px solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="html部分"><a href="#html部分" class="headerlink" title="html部分"></a>html部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;fh-main&lt;/title&gt;</div><div class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;flex.css&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body &gt;</div><div class="line">&lt;h4&gt;骰子的布局（左0中1右2，上0间1下2）&lt;/h4&gt;</div><div class="line">&lt;p&gt;1.1一个左上(0,0):justify-content:flex-start(default);&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c1&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.2一个中上(1,0):justify-content:center;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c2&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.3一个右上(2,0):justify-content:flex-end;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c3&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.4一个左间(0,1) </div><div class="line">  :align-items: center;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c4&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.5一个左下(0,2):align-items: flex-end;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c5&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.6一个中间(1,1):justify-content: center;align-items:center;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c6&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.7一个右间(2,1):justify-content:flex-end;align-items:center;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c7&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;1.8一个中下(1,2) :justify-content:center;align-items:flex-end;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c8&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;  </div><div class="line">&lt;p&gt;1.9一个右下(2,2) justify-content: flex-end;</div><div class="line">  align-items: flex-end;&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c9&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.1两个space-between&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c21&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.2两个space-between+flex-direction&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c22&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.3两个space-between+flex-direction+ align-items&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c23&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.4两个space-between+flex-direction+ align-items：flex-end&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c24&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.5两个align-self&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c25&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;2.6两个align-self&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c26&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;p&gt;3.1三个align-self：center+flex-end&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c31&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;4.1四个&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c41&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;4.2四个&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c42&quot;&gt;</div><div class="line">    &lt;span class=&quot;column&quot;&gt;</div><div class="line">      &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">      &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">    &lt;span class=&quot;column&quot;&gt;</div><div class="line">      &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">      &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;p&gt;6.1六个&lt;/p&gt;</div><div class="line">&lt;div class=&quot;box c61&quot;&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div class=&quot;row&quot;&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p&gt;9九个&lt;/p&gt;</div><div class="line">  &lt;div class=&quot;box c9&quot;&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;h2&gt;网格布局&lt;/h2&gt;</div><div class="line"></div><div class="line">&lt;p&gt;2.1基本网格布局&lt;/p&gt;</div><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;Grid-cell&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;Grid-cell&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;Grid-cell&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p&gt;2.2百分比布局&lt;/p&gt;</div><div class="line">&lt;div class=&quot;Grid&quot;&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;u-1of4&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</div><div class="line">  &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;u-1of3&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;h2&gt;圣杯布局&lt;/h2&gt;</div><div class="line">&lt;div class=&quot;fh&quot;&gt;</div><div class="line">  &lt;header class=&quot;fh-header&quot;&gt;</div><div class="line">    &lt;nav class=&quot;fh-nav&quot;&gt;nav&lt;/nav&gt;</div><div class="line">    &lt;main class=&quot;fh-content&quot;&gt;mian&lt;/main&gt;</div><div class="line">  &lt;/header&gt;</div><div class="line">  &lt;div class=&quot;fh-middle&quot;&gt;middle&lt;/div&gt;</div><div class="line">  &lt;footer class=&quot;fh-footer&quot;&gt;footer&lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h2&gt;输入框的布局&lt;/h2&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;InputAddOn&quot;&gt;</div><div class="line">  &lt;span class=&quot;InputAddOn-item&quot;&gt;icon&lt;/span&gt;</div><div class="line">  &lt;input class=&quot;InputAddOn-field&quot;&gt;</div><div class="line">  &lt;button class=&quot;InputAddOn-item&quot;&gt;btn&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h2&gt;悬挂式布局&lt;/h2&gt;</div><div class="line">&lt;div class=&quot;Media&quot;&gt;</div><div class="line">  &lt;img class=&quot;Media-figure&quot; src=&quot;a/img&quot; alt=&quot;aa&quot;&gt;</div><div class="line">  &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h2&gt;固定低栏&lt;/h2&gt;</div><div class="line">&lt;div class=&quot;site&quot;&gt;</div><div class="line">  &lt;header&gt;header&lt;/header&gt;</div><div class="line">  &lt;main class=&quot;Site-content&quot;&gt;main &lt;/main&gt;</div><div class="line">  &lt;footer&gt;footer&lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h2&gt;流式布局&lt;/h2&gt;</div><div class="line">&lt;div class=&quot;parent&quot;&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">  &lt;span class=&quot;child&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过笔者大量实践，发现flex布
    
    </summary>
    
      <category term="CSS" scheme="https://yanlee26.github.io/categories/CSS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Prefesional JS</title>
    <link href="https://yanlee26.github.io/2016/06/08/prefessionalJS/"/>
    <id>https://yanlee26.github.io/2016/06/08/prefessionalJS/</id>
    <published>2016-06-08T13:28:24.000Z</published>
    <updated>2017-08-24T14:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS高级教程总结"><a href="#JS高级教程总结" class="headerlink" title="JS高级教程总结"></a>JS高级教程总结</h1><h3 id="Chapter3-基本概念"><a href="#Chapter3-基本概念" class="headerlink" title="Chapter3 基本概念"></a>Chapter3 基本概念</h3><ul>
<li>3.4数据类型</li>
</ul>
<ol>
<li>五种简单类型（基本数据类型）：</li>
</ol>
<p>Null,Undefined,String,Number,Boolean，symbol（ES6）</p>
<blockquote>
<p>判断：<code>typeof</code></p>
</blockquote>
<ol>
<li>1 Undefined:undefined</li>
</ol>
<blockquote>
<p>变量声明而未初始化（显式初始化变量是好习惯）</p>
</blockquote>
<ol>
<li>2 Null:null</li>
</ol>
<blockquote>
<p>空指针，此即typeof（null）===undefined的根本原因</p>
</blockquote>
<ul>
<li>由于ES数据类型具有动态性，故没必要定义其它类型 </li>
</ul>
<ol>
<li>一种对象类型：Object（一组数据和功能的集合）</li>
</ol>
<p>判断:<code>instanceof</code></p>
<blockquote>
<p>ES 中Object类型是所有其它实例的基础，Object类型所<br>具有的所有属性和方法同样存在于具体对象中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">constructor:保存用于创建当前对象的函数（构造函数即Object）</div><div class="line">hasOwnProperty():检查给定的属性是否在当前对象实例中</div><div class="line">isPrototypeOf():检查传入的对象是否是传入对象的原型</div><div class="line">propertyIsEnumerable():是否可通过for-in枚举</div><div class="line">toLocalString():返回对象字符串表示（与本区对应）</div><div class="line">toString():返回对象字符串表示</div><div class="line">valueOf():返回对象的字符串，数值或者布尔值表示。同toString</div></pre></td></tr></table></figure>
<ul>
<li>3.5操作符</li>
</ul>
<ol>
<li><p>一元操作符</p>
</li>
<li><p>递增递减：++a,a++: 前/后置操作时决定变量值在执行操作前/后改变</p>
</li>
<li>加减：a+=n,a-=n</li>
<li>位操作符：NOT(~),OR(|),AND(&amp;),XOR(^),(&lt;&lt;),(&gt;&gt;),(&gt;&gt;&gt;)</li>
<li>布尔操作符：!,&amp;&amp;,||</li>
<li>算术性操作符：+-*/</li>
<li>关系操作符：&gt;,&lt;</li>
<li>相等操作符 ：<br> a. 相等与否（操作数成立则true）：==,!=<br> b. 全等与否（比较之前不转换操作数）：===,!==</li>
<li>条件操作符：variable=boolean_expression?true_value:false_value</li>
<li>赋值操作符：+=，-=，*=，/=，%=，&lt;&lt;=,&gt;&gt;=,&gt;&gt;&gt;=</li>
<li>逗号操作符：var a,b,c</li>
</ol>
<ul>
<li>语句</li>
</ul>
<blockquote>
<ol>
<li>if(condition) statement1 else statement2</li>
<li>do{statement}while(expression)</li>
<li>while(expression) statement</li>
<li>for(initialization;expression;post-loop-expression) statement</li>
<li>for(property in expression) statement</li>
<li>label:statement</li>
<li>break/continue:break 立即跳出循环（强制继续执行循环后语句），continue立即退出<br>循环（当前循环），但从循环顶部继续执行</li>
<li>with(expression) statement</li>
<li>switch(expression){<br>case value:statement1<br>break;<br>case value:statement2<br>break;<br>…<br>case default<br>break;<br>}</li>
</ol>
</blockquote>
<ul>
<li><ol>
<li>7 函数-可以封装任意条语句，在任何地方任何时候执行</li>
</ol>
</li>
</ul>
<blockquote>
<p>没有重载：可以为一函数编写两个定义，只要定义的签名（接受的参数类型和数量）不同即可<br>ES中函数没有签名，真正重载不可能做到只能模拟<br>function add(n){<br>return n+100<br>}<br>function add(n){<br>return n+200<br>}//覆盖掉上一个<br>var result=add(100);//300</p>
</blockquote>
<h3 id="Chapter4-变量作用域及内存"><a href="#Chapter4-变量作用域及内存" class="headerlink" title="Chapter4 变量作用域及内存"></a>Chapter4 变量作用域及内存</h3><blockquote>
<p>JS 变量松散的本质决定了它只是在特定时间用于保存特定值的一个名字而已</p>
</blockquote>
<ol>
<li>1 基本类型（简单的数据段）和引用类型（可能有多个值构成的对象）</li>
</ol>
<blockquote>
<p>因可以操作保存在变量中的实际值，基本数据类型按值访问；<br>引用类型值保存在内存中，不同于其它语言，JS不允许直接访问内存中的位置（操作实际对象）。<br>当复制保存着某个变量时，操作的是对象的引用；但在为对象添加属性时，操作的是实际的对象<br>访问变量的方式有按值和按引用两种，而参数只能按值传递。ES中所有函数的参数都是按值传递的！</p>
</blockquote>
<p><a href="https://q.cnblogs.com/q/39352/" target="_blank" rel="external">JS函数参数按值传递的</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function setName(obj)&#123;obj.name=&apos;yl&apos;;obj=&#123;&#125;;obj.name=&apos;hello&apos;&#125; </div><div class="line">var p=&#123;&#125;;setName(p);p.name;//&apos;yl&apos;</div><div class="line">//即使在内部修改了参数的值，但原始的引用仍然不变。实际上，当函数内部重写obj时，该变量引用的就是</div><div class="line">一个在函数执行完立即销毁的局部变量了。完全可以把ES函数的参数想象成局部变量</div></pre></td></tr></table></figure>
<blockquote>
<p>执行环境和作用域（execution context&amp; scope）<br>EC:决定了变量或函数有权访问的其它数据，决定了它们各自的行为；每个EC都有一个与之关联的变量对象（vo）<br>,环境中定义的所有变量和函数都保存在这个对象中。虽然无法访问该对象，但解析器在处理数据时会在后台使用它。<br>某个执行环境中的所有代码执行完毕后，该环境被销毁，其中的所有变量和函数定义也随之而去。<br>每个函数都有自己的执行环境，当执行流进入一个函数时，函数环境就会被推入一个环境栈中；函数执行之后，栈将其<br>弹出，把控制权返回给之前的执行环境。<br>Scope:当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）,以保证对执行环境有权访问的<br>所有变量和函数的有序访问。其前端始终是当前执行的代码所在环境的变量对象。全局执行环境的变量对象始终都是作用<br>域链中的最后一个对象。<br>这些环境之间的联系是线性的有次序的，每个环境都可以向上搜索sc，以查询变量和函数名；但反之不行。<br>那sc可以延长吗？ 可以。。。<br>利用try-catch,with语句</p>
</blockquote>
<ol>
<li>2 无块级作用域</li>
</ol>
<blockquote>
<ol>
<li>声明变量：使用var声明的变量会自动被添加到最近的执行环境中（在函数内部是局部环境，with语句中是<br>函数环境，如果忘记var则被添加到全局环境）2.查询标识符：当在某个环境中为了读取或写入而引用一个标识符<br>时，必须通过搜索来确定标识符实际代表什么。</li>
</ol>
</blockquote>
<ol>
<li>3 垃圾回收GC</li>
</ol>
<blockquote>
<p>标记清除(mark-sweep)和引用计数(reference-counting)<br>mark-sweep:变量进入环境即将变量标记为‘进入环境’，逻辑上永远无法释放进入环境变量所占用的内存；当变量<br>离开时，记‘离开环境’</p>
</blockquote>
<h3 id="Chapter-5-引用类型"><a href="#Chapter-5-引用类型" class="headerlink" title="Chapter 5 引用类型"></a>Chapter 5 引用类型</h3><blockquote>
<p>引用类型的值（对象）是引用类型的一个实例，ES中引用类型是用于将数据和功能组织在一起的一种数据结构。<br>常被不妥当地称为类，有时候也称对象定义。</p>
</blockquote>
<ol>
<li>1 Object</li>
<li>2 Array</li>
</ol>
<ul>
<li>检测：Array.isArray();instanceof Array</li>
<li>转换：toString(),join()方法</li>
<li>栈方法：push,pop</li>
<li>队列方法：shift,unshift</li>
<li>排序sort(),reverse()</li>
<li>操作方法：concat(),splice()<br>  a. delete:splice(0,2);b:insert:splice(0,2,’red’,’blue’);c:replace:splice(2,1,’a’,’b’)</li>
<li>位置方法：indexOf(),lastIndexOf()</li>
<li>迭代方法：every(),filter(),map(),forEach(),some()</li>
<li>归并：reduce(),reduceRight()</li>
</ul>
<ol>
<li><p>3 Date:<br>Date.parse():接收一个表示日期字符串的参数，然后尝试解析成毫秒数<br>Date.UTC()：同样返回时间戳，在构建时与parse使用不同的信息。</p>
<blockquote>
<p>日期和时间都是基于本地时区而非GMT来创建</p>
</blockquote>
</li>
<li><p>4 RegExp</p>
</li>
<li>5 Function</li>
</ol>
<blockquote>
<p>ES中函数即对象，每个函数都是Function的一个实例，函数名是指向函数对象的一个指针，与其它引用类型一样有属性和方法</p>
</blockquote>
<ul>
<li><ol>
<li>5.1 没有重载<br>上述重载案例与下边等价：</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var add=function(n)&#123;return n+100&#125;;</div><div class="line">add=function(n)&#123;return n+200&#125;//覆盖上个</div></pre></td></tr></table></figure>
<ul>
<li>5.5.2函数声明与函数表达式</li>
</ul>
<blockquote>
<p>js引擎（解析器）会率先读取函数声明，并使其在执行任何代码之前可用；而对<br>函数表达式则同解析普通语句一样，等到解析器执行到其所在代码行，才被解释执行。</p>
</blockquote>
<ul>
<li><p>5.5.3 作为值的函数（ES中函数也是变量，所以可作为值使用）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function createComparisonFunction(propertyName) &#123;</div><div class="line">           return function(object1, object2)&#123;</div><div class="line">               var value1 = object1[propertyName];</div><div class="line">               var value2 = object2[propertyName];</div><div class="line">       </div><div class="line">               if (value1 &lt; value2)&#123;</div><div class="line">                   return -1;</div><div class="line">               &#125; else if (value1 &gt; value2)&#123;</div><div class="line">                   return 1;</div><div class="line">               &#125; else &#123;</div><div class="line">                   return 0;</div><div class="line">               &#125;</div><div class="line">           &#125;;</div><div class="line">       &#125;</div><div class="line">       var data = [&#123;name: &quot;Zachary&quot;, age: 28&#125;, &#123;name: &quot;Nicholas&quot;, age: 29&#125;];</div><div class="line">       data.sort(createComparisonFunction(&quot;name&quot;));</div><div class="line">       alert(data[0].name);  //Nicholas</div><div class="line">       data.sort(createComparisonFunction(&quot;age&quot;));</div><div class="line">       alert(data[0].name);  //Zachary</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li>5.4 函数内部属性：arguments，this</li>
</ol>
</li>
<li><ol>
<li>5.5 函数属性和方法</li>
</ol>
</li>
</ul>
<blockquote>
<p>每个函数都包含两个属性：length（函数希望接收的参数个数）和prototype（对ES中引用类型而言，prototype保存了<br>其所有实例的属性和方法，即toString(),valueOf()等方法实际上保存在prototype名下，只不过通过各自对象的实例访问）</p>
<p>每个函数都包含两个非继承而来的方法：call(),apply():用途是在特定作用域中调用函数，实际上是设置函数体内this指向。<br>ES5中还有一个bind方法，用于创建一个函数实例，其this值会被绑定到<br>传给bind函数的值。</p>
<p>另外每个函数继承的toString(),toLocalString()，valueOf()始终返回函数代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function sayColor=function()&#123;alert(this.color)&#125;</div><div class="line">window.color=&apos;red&apos;;</div><div class="line">var o=&#123;color:&apos;blue&apos;&#125;;</div><div class="line">var objSayColor=sayColor.bind(o);</div><div class="line">objSayColor();//&apos;blue&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>5.5.6 基本包装对象</li>
</ul>
<blockquote>
<p>ES提供了三个特殊的引用类型（Boolean,Number,String），与其它引用类型类似但也具有各自基本类型相应的行为<br>注意：引用类型和基本类型主要区别就是对象生命周期：使用new操作符创建的引用类型实例，在执行流离开当前作用域之前<br>一直保存在内存中。而自动创建的基本包装对象，只存在于一行代码执行的瞬间，然后立即销毁。即我们不能给基本类型添加<br>属性和方法。<br>Object构造函数如工厂方法一样，根据传入值的类型返回基本包装对象实例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var obj=new Object(&apos;hello&apos;);obj instanceOf String;//true</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>6.1 Boolean </li>
</ol>
</li>
</ul>
<blockquote>
<p>Boolean实例重写了valueOf()方法并返回true/false；重写了toString()方法，返回’true’/‘false’<br>注意：布尔表达式中所有对象都会被转换为true</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a=new Boolean(true)</div><div class="line">undefined</div><div class="line">a</div><div class="line">Boolean &#123;[[PrimitiveValue]]: true&#125;</div><div class="line">a.toString()</div><div class="line">&quot;true&quot;</div><div class="line">a.valueOf()</div><div class="line">true</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>6.2 Number</li>
</ol>
</li>
</ul>
<blockquote>
<p>方法：toFixed(),toExponential(),toPrecision()</p>
</blockquote>
<ul>
<li><ol>
<li>6.3 String</li>
</ol>
</li>
</ul>
<ol>
<li>字符方法</li>
</ol>
<blockquote>
<p>charAt(),charCodeAt()</p>
</blockquote>
<ol>
<li>字符操作方法</li>
</ol>
<blockquote>
<p>concat(),slice(),subString(),substr(),</p>
</blockquote>
<ol>
<li>字符串位置方法</li>
</ol>
<blockquote>
<p>indexOf(),lastIndexOf()</p>
</blockquote>
<ol>
<li><p>trim(),trimLeft(),trimRight()方法</p>
</li>
<li><p>大小写转换方法</p>
</li>
</ol>
<blockquote>
<p>toLocalUpperCase(),toUpperCase(),toLowerCase()</p>
</blockquote>
<ol>
<li>模式匹配方法</li>
</ol>
<blockquote>
<p>search(),replace(),match(),split()</p>
</blockquote>
<ol>
<li>localeCompare()方法，fromCharCode()方法</li>
</ol>
<ul>
<li><ol>
<li>7 单体内置对象</li>
</ol>
</li>
</ul>
<blockquote>
<p>定义：由ES实现提供的不依赖于宿主环境的对象，即在ES程序执行之前既存在了</p>
</blockquote>
<ol>
<li>Global对象（兜底对象，任何不属于其它对象的属性和方法都是它的属性和方法）</li>
</ol>
<blockquote>
<p>如isNaN()，isFinite(),parseInt(),parseFloat(),encodeURI(),encodeURIComponent()<br>eval(),window对象，Math对象（min(),max(),ceil(),floor(),random()）</p>
</blockquote>
<h3 id="Chapter-6-面向对象-Object-Oriented-Programing"><a href="#Chapter-6-面向对象-Object-Oriented-Programing" class="headerlink" title="Chapter 6 面向对象 Object Oriented Programing"></a>Chapter 6 面向对象 Object Oriented Programing</h3><blockquote>
<p>ES对象：包含基本值，对象或函数的无序属性的集合。</p>
</blockquote>
<ol>
<li><p>1.1 属性类型（数据属性+访问器属性）</p>
</li>
<li><p>数据属性：</p>
</li>
</ol>
<ul>
<li>[[Configurable]]:是否可配置，delete(true)</li>
<li>[[Enumerable]]: 是否可枚举，for-in(true)</li>
<li>[[Writable]]:是否可写(true)</li>
<li>[[Writable]]:包含这个属性的数据值（undefined）</li>
</ul>
<blockquote>
<p>ES5中Object.defineProperty(object,propertyName,descriptor)方法，包含属性所在对象，属性名，描述符对象三个参数，可以修改对象的默认特性。<br>注意：一旦把属性定义为不可配置的就再也甭能把它设置成可配置的了。</p>
</blockquote>
<ol>
<li>访问器特性，对象的属性：</li>
</ol>
<blockquote>
<p>不包含数据值，包含一对getter，setter函数（非必须），有以下四个特性。访问器属性不能直接定义，必须用<br>Object.defineProperty()定义，Object.defineProperties()可以定义多个属性</p>
<ul>
<li>[[Configurable]]:同上(true)</li>
<li>[[Enumerable]]:同上(true)</li>
<li>[[Get]]:读取属性时调用的函数（undefined）</li>
<li>[[Set]]:写入属性时调用的函数（undefined）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var book = &#123;</div><div class="line">    _year: 2004,</div><div class="line">    edition: 1</div><div class="line">&#125;;</div><div class="line">Object.defineProperty(book, &quot;year&quot;, &#123;</div><div class="line">    get: function()&#123;</div><div class="line">        return this._year;</div><div class="line">    &#125;,</div><div class="line">    set: function(newValue)&#123;</div><div class="line">    </div><div class="line">        if (newValue &gt; 2004) &#123;</div><div class="line">            this._year = newValue;</div><div class="line">            this.edition += newValue - 2004;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">book.year = 2005;</div><div class="line">alert(book.edition);   //2</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ol>
<li>1.3 读取属性特性</li>
</ol>
<blockquote>
<p>Object.getOwnPropertyDescriptor()方法，两个参数属性所在的对象+读取其描述符的属性名，返回一对象.<br>JS中可以针对任何对象（BOM，DOM），使用该方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var descriptor = Object.getOwnPropertyDescriptor(book, &quot;_year&quot;);</div><div class="line">alert(descriptor.value);          //2004</div><div class="line">alert(descriptor.configurable);   //false</div><div class="line">alert(typeof descriptor.get);     //&quot;undefined&quot;</div><div class="line">var descriptor = Object.getOwnPropertyDescriptor(book, &quot;year&quot;);</div><div class="line">alert(descriptor.value);          //undefined</div><div class="line">alert(descriptor.enumerable);     //false</div><div class="line">alert(typeof descriptor.get);     //&quot;function&quot;</div><div class="line">```        </div><div class="line"></div><div class="line">6. 2 创建对象</div><div class="line"></div><div class="line">6. 2.1 工厂模式---用函数来封装以特定接口创建对象的细节</div><div class="line"></div><div class="line">&gt; 特点：虽然解决了创建多个相似对象的问题，但却没有解决对象识别问题(怎样知道对象类型)。</div></pre></td></tr></table></figure>
<p>function createPerson(name, age, job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName = function(){<br>        alert(this.name);<br>    };<br>    return o;<br>}<br>var person1 = createPerson(“Nicholas”, 29, “Software Engineer”);<br>var person2 = createPerson(“Greg”, 27, “Doctor”);<br>person1.sayName();   //“Nicholas”<br>person2.sayName();   //“Greg”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 2.2 构造函数模式---如Object，Array这样的原生构造函数，运行时会自动出现在EC中，也可创建自定义的。</div></pre></td></tr></table></figure></p>
<p>function Person(name, age, job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = function(){<br>        alert(this.name);<br>    };<br>}<br>var person1 = new Person(“Nicholas”, 29, “Software Engineer”);<br>var person2 = new Person(“Greg”, 27, “Doctor”);<br>person1.sayName();   //“Nicholas”<br>person2.sayName();   //“Greg”<br>alert(person1 instanceof Object);  //true<br>alert(person1 instanceof Person);  //true<br>alert(person2 instanceof Object);  //true<br>alert(person2 instanceof Person);  //true<br>alert(person1.constructor == Person);  //true<br>alert(person2.constructor == Person);  //true<br>alert(person1.sayName == person2.sayName);  //false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 特点：没有显式创建对象，没有return语句，直接将属性和方法赋给this，首字母大写，必须使用new构建实例。</div><div class="line">优点：可以将构造函数的实例标识为一种特定的类型；</div><div class="line">缺点：每个方法都要在每个实例上创建一遍，不同实例上同名函数是不同的。</div></pre></td></tr></table></figure></p>
<p>this.sayName=new Function(‘alert(this.name)’);//与声明函数逻辑上等价<br>person1.sayName===person2.sayName;//false<br>//优化，但此时全局函数有些名不副实<br>this.sayName=sayName;<br>function sayName(){}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 2.3 原型模式</div><div class="line"></div><div class="line">&gt; 我们创建的每个函数，都有一个指向一个对象的且是一个指针的prototype属性，其作用是包含可以有特定</div><div class="line">类型所有实例共享的属性和方法。即prototype通过调用构造函数而创建的那个实例的原型对象。此时可以将所有实例共享其所包含的属性和方法。</div><div class="line">优点：让任意实例共享其原型对象所包含的所有属性和方法。</div><div class="line">缺点：省略了为构造函数传递初始化参数这一环节，导致所有实例默认获得相同属性，对于包含引用类型的属性而言，问题不可忽视</div></pre></td></tr></table></figure></p>
<p>//原型模式案例<br>function Person(){}<br>Person.prototype.name = “Nicholas”;<br>Person.prototype.age = 29;<br>Person.prototype.job = “Software Engineer”;<br>Person.prototype.sayName = function(){<br>    alert(this.name);<br>};</p>
<p>var person1 = new Person();<br>person1.sayName();   //“Nicholas”</p>
<p>var person2 = new Person();<br>person2.sayName();   //“Nicholas”</p>
<p>alert(person1.sayName == person2.sayName);  //true</p>
<p>alert(Person.prototype.isPrototypeOf(person1));  //true<br>alert(Person.prototype.isPrototypeOf(person2));  //true</p>
<p>//only works if Object.getPrototypeOf() is available<br>if (Object.getPrototypeOf){<br>    alert(Object.getPrototypeOf(person1) == Person.prototype);  //true<br>    alert(Object.getPrototypeOf(person1).name);  //“Nicholas”<br>}<br>//虽然可以通过实例访问原型中的值，但不能通过对象实例重写原型中的值。只是‘屏蔽’<br>person1.name = “Greg”;<br>alert(person1.name);   //“Greg” – from instance<br>alert(person2.name);   //“Nicholas” – from prototype<br>//使用delete操作符完全可以删除该属性<br>delete person1.name;<br>alert(person1.name);   //“Nicholas” - from the prototype<br>//hasOwnProperty（）,in操作符结合<br>function hasPrototypeProperty(object,name){return !object.hasOwnProperty(name)&amp;&amp;(name in object)}<br>//ES5中的Object.keys()方法用于取得对象上所有可枚举的对象属性，接收一个对象为参数返回一个包含所有可枚举属性的字符串数组<br>var keys=Object.keys(Person.prototype)<br>//简化的原型语法,对象字面量形式创建的对象，但此时constructor不再指向Person了<br>//此种写法本质上重写了默认的prototype对象，因此constructor属性也就变成了新对象的constructor属性（指向Object）<br>Person.prototype={<br>constructor:Person,//加上此句话重设constructor，此举导致constructor的[[Enumerable]]被设置为true，默认false<br>    name:’Tom’,<br>    age:’18’,<br>    say:function(){}<br>}<br>//要消除此bug还需要再加这句话<br>Object.defineProperty(Person.prptotype,’constructor’,{<br>enumerable:false,<br>value:Person<br>})<br>//原生对象的原型<br>Array.prototype===[].<strong>proto</strong><br>String.prototype===’’.<strong>proto</strong><br>Object.prototype==={}.<strong>proto</strong><br>//此方法困境<br>Person.prototype = {<br>        constructor: Person,<br>        name : “Nicholas”,<br>        age : 29,<br>        job : “Software Engineer”,<br>        friends : [“Shelby”, “Court”],<br>        sayName : function () {<br>            alert(this.name);<br>        }<br>    };<br>var person1 = new Person();<br>var person2 = new Person();<br>person1.friends.push(“Van”);<br>alert(person1.friends);    //“Shelby,Court,Van”<br>alert(person2.friends);    //“Shelby,Court,Van”<br>alert(person1.friends === person2.friends);  //true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6. 2.4 组合使用构造函数和原型模式---用途广泛，认可度最高，首选</div></pre></td></tr></table></figure>
<p>function Person(name, age, job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.friends = [“Shelby”, “Court”];<br>}<br>Person.prototype = {<br>    constructor: Person,<br>    sayName : function () {<br>        alert(this.name);<br>    }<br>};<br>var person1 = new Person(“Nicholas”, 29, “Software Engineer”);<br>var person2 = new Person(“Greg”, 27, “Doctor”);<br>person1.friends.push(“Van”);<br>alert(person1.friends);    //“Shelby,Court,Van”<br>alert(person2.friends);    //“Shelby,Court”<br>alert(person1.friends === person2.friends);  //false<br>alert(person1.sayName === person2.sayName);  //true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">6. 2.5 动态原型模式</div><div class="line"></div><div class="line">&gt; 把所有信息封装在构造函数中，通过构造函数初始化原型，保持了同时使用构造函数和原型的优点。即</div><div class="line">可以通过检查某个应该存在的方法是否有效来决定是否需要初始化原型.</div><div class="line">谨记：此时不能使用对象字面量重写原型，否则会切断实例与新原型之间的联系</div></pre></td></tr></table></figure></p>
<p>function Person(name, age, job){<br>    //properties<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;</p>
<pre><code>//methods
if (typeof this.sayName != &quot;function&quot;){

    Person.prototype.sayName = function(){
        alert(this.name);
    };

}
</code></pre><p>}<br>var friend = new Person(“Nicholas”, 29, “Software Engineer”);<br>friend.sayName();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 2.6 寄生构造函数模式</div><div class="line"></div><div class="line">&gt; 返回的对象与构造函数或者构造函数与原型属性之间没关系。</div></pre></td></tr></table></figure></p>
<p>function SpecialArray(){<br>    //create the array<br>    var values = new Array();</p>
<pre><code>//add the values
values.push.apply(values, arguments);

//assign the method
values.toPipedString = function(){
    return this.join(&quot;|&quot;);
};

//return it
return values;        
</code></pre><p>}</p>
<p>var colors = new SpecialArray(“red”, “blue”, “green”);<br>alert(colors.toPipedString()); //“red|blue|green”<br>alert(colors instanceof SpecialArray);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 2.7 稳妥构造函数模式</div></pre></td></tr></table></figure></p>
<p>function Person(name,age,job){<br>var o=new Object;<br>o.sayName=function(){alert(name)}<br>return o<br>}<br>var p1=new Person(‘yl’,26,’software engineer’);<br>p1.sayName();//‘yl’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">6. 3 继承（接口继承和实现继承（ES仅支持此继承））---依赖原型链继承</div><div class="line">6. 3.1 原型链</div><div class="line"></div><div class="line">&gt; 基本思想：利用原型让一个引用类型继承另一个引用类型的属性和方法。</div></pre></td></tr></table></figure></p>
<p>function SuperType(){<br>    this.property = true;<br>}</p>
<p>SuperType.prototype.getSuperValue = function(){<br>    return this.property;<br>};</p>
<p>function SubType(){<br>    this.subproperty = false;<br>}</p>
<p>//inherit from SuperType<br>SubType.prototype = new SuperType();</p>
<p>SubType.prototype.getSubValue = function (){<br>    return this.subproperty;<br>};</p>
<p>var instance = new SubType();<br>alert(instance.getSuperValue());   //true</p>
<p>alert(instance instanceof Object);      //true<br>alert(instance instanceof SuperType);   //true<br>alert(instance instanceof SubType);     //true</p>
<p>alert(Object.prototype.isPrototypeOf(instance));    //true<br>alert(SuperType.prototype.isPrototypeOf(instance)); //true<br>alert(SubType.prototype.isPrototypeOf(instance));   //true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 3.2 借用构造函数</div></pre></td></tr></table></figure></p>
<p>function SuperType(){<br>    this.colors = [“red”, “blue”, “green”];<br>}</p>
<p>function SubType(){<br>    //inherit from SuperType<br>    SuperType.call(this);<br>}<br>//传递参数<br>    function SubType(){<br>            //inherit from SuperType passing in an argument<br>            SuperType.call(this, “Nicholas”);</p>
<pre><code>    //instance property
    this.age = 29;
}
</code></pre><p>var instance1 = new SubType();<br>instance1.colors.push(“black”);<br>alert(instance1.colors);    //“red,blue,green,black”</p>
<p>var instance2 = new SubType();<br>alert(instance2.colors);    //“red,blue,green”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">6. 3.3 组合继承</div><div class="line"></div><div class="line">&gt; 使用原型链实现对原型属性和方法的继承，通过借用构造函数实现对实例属性的继承</div></pre></td></tr></table></figure></p>
<p>function SuperType(name){<br>    this.name = name;<br>    this.colors = [“red”, “blue”, “green”];<br>}</p>
<p>SuperType.prototype.sayName = function(){<br>    alert(this.name);<br>};</p>
<p>function SubType(name, age){<br>    SuperType.call(this, name);</p>
<pre><code>this.age = age;
</code></pre><p>}</p>
<p>SubType.prototype = new SuperType();</p>
<p>SubType.prototype.sayAge = function(){<br>    alert(this.age);<br>};</p>
<p>var instance1 = new SubType(“Nicholas”, 29);<br>instance1.colors.push(“black”);<br>alert(instance1.colors);  //“red,blue,green,black”<br>instance1.sayName();      //“Nicholas”;<br>instance1.sayAge();       //29</p>
<p>var instance2 = new SubType(“Greg”, 27);<br>alert(instance2.colors);  //“red,blue,green”<br>instance2.sayName();      //“Greg”;<br>instance2.sayAge();       //27<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6. 3.4 原型式继承</div></pre></td></tr></table></figure></p>
<p>var person = {<br>    name: “Nicholas”,<br>    friends: [“Shelby”, “Court”, “Van”]<br>};</p>
<p>var anotherPerson = Object.create(person);<br>anotherPerson.name = “Greg”;<br>anotherPerson.friends.push(“Rob”);</p>
<p>var yetAnotherPerson = Object.create(person);<br>yetAnotherPerson.name = “Linda”;<br>yetAnotherPerson.friends.push(“Barbie”);</p>
<p>alert(person.friends);   //“Shelby,Court,Van,Rob,Barbie”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">6. 3.5 寄生式继承</div><div class="line"></div><div class="line">6. 3.6 寄生组合式继承</div></pre></td></tr></table></figure></p>
<p>function object(o){<br>    function F(){}<br>    F.prototype = o;<br>    return new F();<br>}</p>
<p>function inheritPrototype(subType, superType){<br>    var prototype = object(superType.prototype);   //create object<br>    prototype.constructor = subType;               //augment object<br>    subType.prototype = prototype;                 //assign object<br>}</p>
<p>function SuperType(name){<br>    this.name = name;<br>    this.colors = [“red”, “blue”, “green”];<br>}</p>
<p>SuperType.prototype.sayName = function(){<br>    alert(this.name);<br>};</p>
<p>function SubType(name, age){<br>    SuperType.call(this, name);</p>
<pre><code>this.age = age;
</code></pre><p>}</p>
<p>inheritPrototype(SubType, SuperType);</p>
<p>SubType.prototype.sayAge = function(){<br>    alert(this.age);<br>};</p>
<p>var instance1 = new SubType(“Nicholas”, 29);<br>instance1.colors.push(“black”);<br>alert(instance1.colors);  //“red,blue,green,black”<br>instance1.sayName();      //“Nicholas”;<br>instance1.sayAge();       //29<br>var instance2 = new SubType(“Greg”, 27);<br>alert(instance2.colors);  //“red,blue,green”<br>instance2.sayName();      //“Greg”;<br>instance2.sayAge();       //27<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter 7 函数表达式(与函数声明的区别)</div><div class="line"></div><div class="line">7. 1 递归</div><div class="line"></div><div class="line">arguments.callee是一个指向正在执行函数的指针，实现递归</div></pre></td></tr></table></figure></p>
<p>function factorial(num){<br>    if (num &lt;= 1){<br>        return 1;<br>    } else {<br>        //return num<em>factorial(num-1)<br>        return num </em> arguments.callee(num-1);<br>    }<br>}<br>var anotherFactorial = factorial;<br>factorial = null;<br>//alert(anotherFactorial(4));  //error<br>alert(anotherFactorial(4));  //24<br>// //严格模式下debug—使用命名函数表达式<br>var factorial=(function f(num){<br>if(num&lt;-1){return 1}<br>else{return num*f(num-1)}<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. 2 闭包closure</div><div class="line"></div><div class="line">&gt; 匿名函数与闭包：前者-创建一个函数并赋值给变量；后者-有权访问另一个函数作用域中变量的函数（在一个函数内创建另一函数）。</div><div class="line">原理：明白作用域链的概念，当某函数被调用时，会创建一个EC及相应的作用域链；</div><div class="line">然后使用arguments和其它命名参数的值来初始化函数的活动对象（activation object）</div><div class="line">此时，外部函数作用域链处于第二位，再外的第三位，。。。，最外到全局执行环境。</div><div class="line">其实，作用域链包含两级变量对象--本地活动对象和全局变量对象，其本质是一个指向</div><div class="line">变量对象的指针列表，仅仅引用并不包含变量对象。</div><div class="line"></div><div class="line">7. 2.1 闭包与变量</div><div class="line"></div><div class="line">&gt; 闭包的副作用：只能取得包含函数中任何变量的最后一个值。</div></pre></td></tr></table></figure></p>
<p>function createFunctions(){<br>        var result = new Array();<br>        for (var i=0; i &lt; 10; i++){<br>            result[i] = function(){<br>                return i;<br>            };<br>        }<br>        return result;<br>    }<br>var funcs = createFunctions();<br>    //every function outputs 10<br>    //原因：每个函数作用域链中都保存着createFunctions()函数的活动对象，它们引用的是<br>    同一个变量i。当createFunction（）函数返回后，i都是10.<br>    for (var i=0; i &lt; funcs.length; i++){<br>        document.write(funcs<a href="">i</a> + “<br>“);<br>    }<br>//解决方案如下：创建一个匿名函数强制让闭包行为符合预期（函数参数是按值传递的）<br>for (var i=0; i &lt; 10; i++){<br>                    result[i] = function(num){<br>                        return function(){<br>                            return num;<br>                        };<br>                    }(i);<br>                }<br>//或者用ES6语法变var i为let i<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7.2.2 关于this对象</div><div class="line"></div><div class="line">&gt; this对象是在运行时基于函数的执行环境绑定的：在全局下this===window；当函数被作为某个对象的方法</div><div class="line">调用时，this===调用其的对象。但匿名函数的作用域具有全局性，其this对象通常指向window；除非通过call（）</div><div class="line">apply()改变。</div></pre></td></tr></table></figure></p>
<p>var name = “The Window”;<br>var object = {<br>    name : “My Object”,<br>    getNameFunc : function(){<br>        //var that=this;<br>        return function(){<br>            return this.name;<br>            //return that.name;<br>        };<br>    }<br>};<br>alert(object.getNameFunc()());  //“The Window”<br>//细微变化可能改变this<br>var name=’window’;<br>var obj={name:’obj’,getName:function(){return this.name}}<br>obj.getName();//‘obj’<br>(obj.getName)();//‘obj’<br>(obj.getName=obj.getName)();//‘window’,this得不到维持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 原因分析：每个函数在调用时都会自动取得两个特殊变量this和arguments；内部函数在搜索</div><div class="line">此二变量时只会搜索到其活动对象为之，故永不可能直接访问外部函数中此二变量。一种解决方式是把外部作用</div><div class="line">域中this对象保存在闭包中。如上注释部分。</div><div class="line"></div><div class="line">7. 2.3 内存泄漏</div><div class="line"></div><div class="line">&gt; 闭包会引用包含函数的整个活动对象！即使闭包不直接引用ele，包含函数的活动对象也仍然</div><div class="line">会保存一个引用。</div></pre></td></tr></table></figure>
<p>function assignHandler(){<br>    var ele=document.getElementById(‘xx’);<br>    var id=ele.id;//抽出闭包中循环引用的变量<br>    ele.onclick=function(){}<br>    ele=null;//清除对dom对象的引用<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. 2.4 模仿块级作用域</div><div class="line"></div><div class="line">&gt; JS 从不会告诉你是否声明了同一个变量；只会无视后续声明（会执行声明的初始化），匿名函数可以</div><div class="line">模仿块级作用域并避免此问题。并且只要做到闭包中没有指向匿名函数的引用，就可以减少闭包占用内存的问题。</div></pre></td></tr></table></figure></p>
<p>(function(){//block scope})();<br>var someFunction=function(){//block scope}<br>function(){//block scope}();//error ,函数声明不能跟（），js将function当作函数声明的开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. 2.5 private variables私有变量</div><div class="line"></div><div class="line">&gt; 事实上，JS中没有私有成员的概念；所有对象的属性都是公有的。但有个私有变量的概念---任何在函数</div><div class="line">中定义的变量。</div><div class="line">特权方法（privileged method）: 有权访问私有变量和私有函数的公有方法。有以下两种</div><div class="line">但在函数中定义特权有个缺点：必须使用构造函数模式实现，其缺点是每个实例都会创建一组新方法，使用静态私有变量</div><div class="line">可以避免此问题（私有变量和函数是由实例共享的，作为一个闭包总是保存着对包含作用域的引用）。</div></pre></td></tr></table></figure></p>
<p>//模式一：在构造函数中定义特权方法，将特权方法作为闭包（有权访问在构造函数中的所有属性和方法）<br>function MyObject(){<br>    //私有变量和私有函数<br>    var privateVariable=10;<br>    function privateFunction(){<br>        return false;<br>    }<br>    //特权方法<br>    this.publicMethod=functionn(){<br>        privateVariable++;<br>        return privateFunciton();<br>    }<br>}<br>// 使用静态私有变量<br>(function(){<br>    var name = “”;<br>    Person = function(value){<br>        name = value;<br>    };<br>    Person.prototype.getName = function(){<br>        return name;<br>    };<br>    Person.prototype.setName = function (value){<br>        name = value;<br>    };<br>})();<br>var person1 = new Person(“Nicholas”);<br>alert(person1.getName());   //“Nicholas”<br>person1.setName(“Greg”);<br>alert(person1.getName());   //“Greg”<br>var person2 = new Person(“Michael”);<br>alert(person1.getName());   //“Michael”<br>alert(person2.getName());   //“Michael”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">7. 4.2 模块模式</div><div class="line"></div><div class="line">&gt; 上述模式用于为自定义类型创建私有变量和特权方法，而模块模式则是为单例创建私有变量和特权的方法。</div></pre></td></tr></table></figure>
<p>function BaseComponent(){<br>}</p>
<p>function OtherComponent(){<br>}</p>
<p>var application = function(){</p>
<p>//private variables and functions<br>var components = new Array();</p>
<p>//initialization<br>components.push(new BaseComponent());</p>
<p>//public interface<br>return {<br>getComponentCount : function(){<br>return components.length;<br>},</p>
<p>registerComponent : function(component){<br>if (typeof component == “object”){<br>    components.push(component);<br>}<br>}<br>};<br>}();</p>
<p>application.registerComponent(new OtherComponent());<br>//增强的模块模式<br>function BaseComponent(){<br>}</p>
<p>function OtherComponent(){<br>}</p>
<p>var application = function(){</p>
<pre><code>//private variables and functions
var components = new Array();

//initialization
components.push(new BaseComponent());

//create a local copy of application
var app = new BaseComponent();

//public interface
app.getComponentCount = function(){
    return components.length;
};

app.registerComponent = function(component){
    if (typeof component == &quot;object&quot;){
        components.push(component);
    }
};

//return it
return app;
</code></pre><p>}();<br>alert(application instanceof BaseComponent);<br>application.registerComponent(new OtherComponent());<br>alert(application.getComponentCount());  //2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter 8 BOM</div><div class="line"></div><div class="line">8. 1 window对象</div><div class="line"></div><div class="line">8. 1.1 global scope</div><div class="line"></div><div class="line">&gt; 定义的全局变量和在window上直接定义的变量细微差别就是前者不可以用delete操作符删除</div><div class="line">var a=&apos;hello&apos;;window.b=&apos;world&apos;;delete window.a;//false;delete window.b;//true</div><div class="line">因var 添加的window属性的[[Configurable]]===false</div><div class="line"></div><div class="line">8. 1.2 窗口关系及框架</div><div class="line">8. 1.3 窗口位置</div></pre></td></tr></table></figure></p>
<p>//使用下边代码可以跨浏览器取得窗口左边和上边位置。<br>var leftPos = (typeof window.screenLeft == “number”) ?<br>                          window.screenLeft : window.screenX;<br>var topPos = (typeof window.screenTop == “number”) ?<br>                    window.screenTop : window.screenY;<br>alert(“Left: “ + leftPos);<br>alert(“Top: “ + topPos);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8.1.4 窗口大小</div></pre></td></tr></table></figure></p>
<p>var pageWidth = window.innerWidth,<br>    pageHeight = window.innerHeight;<br>    if (typeof pageWidth != “number”){<br>        if (document.compatMode == “CSS1Compat”){<br>            pageWidth = document.documentElement.clientWidth;<br>            pageHeight = document.documentElement.clientHeight;<br>        } else {<br>            pageWidth = document.body.clientWidth;<br>            pageHeight = document.body.clientHeight;<br>        }<br>    }<br>    alert(“Width: “ + pageWidth);<br>    alert(“Height: “ + pageHeight);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8. 1.5 导航和打开</div></pre></td></tr></table></figure></p>
<p>window.open();<br>// 接收四个参数：URL，窗口目标，一个特性字符串，布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">8. 1.6 setInterval()和setTimeOut()</div><div class="line">8. 1.7 系统对话框：alert(),confirm(),prompt()</div><div class="line">8. 2 location 对象</div></pre></td></tr></table></figure></p>
<p>window.location===document.location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">8. 3 navigator对象</div><div class="line">8. 4 screen对象</div><div class="line">8. 5 history对象</div><div class="line"></div><div class="line">###  Chapter 9 客户端检查</div><div class="line"></div><div class="line">###  Chapter 10 DOM</div><div class="line"></div><div class="line">&gt; DOM是针对HTML和XML文档的一个API，描绘了一个层次化的节点树，允许开发人员增删改</div><div class="line">查页面的一部分。注意IE中的DOM对象都是以COM对象的形式实现的。</div><div class="line"></div><div class="line">10. 1 节点层次</div><div class="line"></div><div class="line">&gt; DOM树：DOM可以将HTML，XML文档描述成一个由多层次节点构成的结构。节点分几种不同的类型，</div><div class="line">每种类型分别表示文档中不同的信息及标记。每个节点都有自己的特点数据和方法且与其它节点存在</div><div class="line">关系，由此构成了层次，所有页面标记则表现为一个以特定节点为根节点的树形结构。每一段标记</div><div class="line">都可以通过树中一个节点来表示（html元素由元素节点表示，attribute由属性节点表示，documentType由文档</div><div class="line">类型节点表示，commit由注释节点表示）。</div><div class="line"></div><div class="line">10. 1.1 Node类型（12种）</div><div class="line">    1. **Node.ELEMENT_NODE(1)**;</div><div class="line">    2. **Node.ATTRIBUTE_NODE(2)**;</div><div class="line">    3. **Node.TEXT_NODE(3);**</div><div class="line">    4. Node.ENTITY_REFERENCE_NODE(5);</div><div class="line">    6. Node.ENTITY_NODE(6);</div><div class="line">    7. Node.PROCESSING_INSTRUCTION_NODE(7);</div><div class="line">    8. **Node.COMMIT_NODE(8);**</div><div class="line">    9. **Node.DOCUMENT_NODE(9);**</div><div class="line">    10. **Node.DOCUMENT_TYPE_NODE(10);**</div><div class="line">    11. Node.DOCUMENT_FRAGMENT_NODE(11);</div><div class="line">    12. Node.NOTATION_NODE(12);</div><div class="line"></div><div class="line">###  Chapter11 DOM扩展</div><div class="line"></div><div class="line">&gt; DOM扩展主要是selectorsAPI和H5</div><div class="line"></div><div class="line">- querySelector()</div><div class="line">- querySelectorAll()</div><div class="line">- matchesSelector()</div><div class="line">- 元素遍历</div><div class="line">    1. childElementCount:返回子元素（不含文本节点和注释）个数；</div><div class="line">    2. firstElementChild:指向首子元素；</div><div class="line">    3. lastElementChild:指向首尾元素；</div><div class="line">    4. previousElementSibling:指向前一个同辈元素；</div><div class="line">    5. nextElementSibling:指向后一个同辈元素；</div><div class="line"></div><div class="line">11. 3HTML5</div><div class="line"></div><div class="line">&gt; H5规范围绕如何使用新增标记定义了大量的JS API。其中一些与DOM重叠，定义了浏览器应该支持的DOM扩展</div><div class="line"></div><div class="line">11. 3.1与类相关的扩充</div><div class="line"></div><div class="line">- getElementByClassName():返回带有指定类的所有元素的NodeList；</div><div class="line">- classList():</div><div class="line">    1. div.classList.remove(&apos;user&apos;):删除类集中某类</div><div class="line">    2. div.classList.add(&apos;user&apos;):添加类集中某类</div><div class="line">    3. div.classList.toggle(&apos;user&apos;):切换类集中某类</div><div class="line">    4. div.classList.contains(&apos;user&apos;):查询类集中某类</div><div class="line">11. 3.2焦点管理</div></pre></td></tr></table></figure></p>
<p>var btn=document.getElementById(‘my-button’);<br>btn.focus();<br>document.hasFocus();//true<br>//通过检查文档是否活得了焦点来判断用户是否在与页面交互<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">11. 3.3 HTMLDocument的变化</div><div class="line"></div><div class="line">- readyState属性：loading（加载中）,complete(已完成)</div><div class="line">- compatMode兼容模式</div></pre></td></tr></table></figure></p>
<p>alert(document.compatMode==’CSS1Compat’?’Standards Mode’:’Quicks Mode’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- head 属性</div><div class="line"></div><div class="line">```var head=document.head||document.getElementsByTagName(&apos;head&apos;[0])</div></pre></td></tr></table></figure></p>
<ol>
<li>3.4 字符集属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">11. 3.5自定义数据属性data-</div><div class="line"></div><div class="line">&gt; 目的是为元素提供与渲染无关的信息，或者提供语义信息，可以任意添加随便命名，但要以data-开头。</div><div class="line"></div><div class="line">11 .3.6插入标记</div><div class="line"></div><div class="line">&gt; DOM操作的福音：虽然DOM操作可以实现细致入微的控制，但非常繁琐，使用插入标记</div><div class="line">技术直接插入html字符串不仅简单而且高效。但多说浏览器中插入的script脚本并不会</div><div class="line">执行（除非指定defer属性且位于（微软所谓的）作用域之后）</div><div class="line"></div><div class="line">- innerHTML</div></pre></td></tr></table></figure>
<p>document.querySelector(‘div’).innerHTML=’<script defer>alert(“hi”)</script>‘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- outerHTML</div><div class="line">- insertAdjacentHTML()</div><div class="line"></div><div class="line">###  Chapter12 DOM2和DOM3</div><div class="line"></div><div class="line">###  Chapter13 事件处理程序</div><div class="line"></div><div class="line">13. 2.2 DOM0级事件处理程序</div><div class="line"></div><div class="line">&gt; 介绍：传统方式，将一个函数赋值给一个事件处理程序属性。特点：简单，跨</div><div class="line">浏览器。首先要取得要操作对象的引用。</div><div class="line">DOM0级事件处理程序被称为元素的方法，因此时事件处理程序是在元素作用域中执行的。</div></pre></td></tr></table></figure></p>
<p>var btn=document.getElementById(‘xx’);<br>btn.onclick=functin(){}；<br>btn.onclick=null;//删除事件处理程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">13. 2.3 DOM2级事件处理程序</div><div class="line"></div><div class="line">&gt; DOM2定义了两个方法用于指定和删除处理程序的操作：addEventListener()和removeEventListener()</div><div class="line">所有DOM节点都包含这两个方法且接受三个参数：事件名，函数，布尔值（true:捕获，false冒泡）</div><div class="line">多数情况下将事件处理程序添加到事件流的冒泡阶段，可以最大限度地兼容各种浏览器。</div></pre></td></tr></table></figure></p>
<p>btn.addEventListener(‘click’,function(){<br>},false);<br>btn.removeEventListener(‘click’,function(){<br>},false);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13. 2.4IE事件处理程序</div></pre></td></tr></table></figure></p>
<p>btn.attach(‘onclick’,function(){});<br>btn.detach(‘onclick’,function(){});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">13. 2.5跨浏览器事件处理程序</div><div class="line"></div><div class="line">13. 3事件对象</div><div class="line"></div><div class="line">&gt; 触发DOM上某事件时会产生一个包含与事件相关信息的事件对象。</div><div class="line">只有在事件处理程序执行期间，event对象才会存在，否则立即销毁。</div></pre></td></tr></table></figure></p>
<p>btn.onclick=function(event){alert(event.type)}<br>btn.addEventListener(‘click’,function(event){alert(event.type)}<br>//stopPropagation用于阻止事件在DOM上传播（捕获或冒泡）<br>var btn = document.getElementById(“myBtn”);<br>        btn.onclick = function(event){<br>            alert(“Clicked”);<br>            event.stopPropagation();<br>        };</p>
<pre><code>document.body.onclick = function(event){
    alert(&quot;Body clicked&quot;);
};
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">13. 4事件类型</div><div class="line">13. 4.1 UI事件：不一定与用户操作有关的事件。包括DOMActive(非html事件),load,unload,abort</div><div class="line">error,select,resize,scroll事件。</div></pre></td></tr></table></figure>
<p>var isSurpported=document.implementation.hasFeature(‘HTMLEventts’,’2.0’);<br>var isSurpported=document.implementation.hasFeature(‘UIEvent’,’3.0’);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">13. 4.2 焦点事件：blur,focusIn,focusOut,focus</div><div class="line"></div><div class="line">13. 4.3 鼠标与滚轮事件：click,dbclick,mousedown,mouseenter,mouseleave,mousemove,</div><div class="line">mouseout,mouseover,mouseup</div><div class="line"></div><div class="line">13. 4.4键盘与文本事件：keydowm,keyup,keypress</div><div class="line"></div><div class="line">13. 4.5 复合事件</div><div class="line"></div><div class="line">13. 4.6 变动事件</div><div class="line"></div><div class="line">13. 4.7 HTML5事件：contextmenu,beforeunload,DOMContentloaded,readystatechange</div><div class="line">pageshow,pagehide,haschange</div><div class="line"></div><div class="line">13. 4.8 设备事件</div><div class="line"></div><div class="line">13. 4.9 触摸与手势事件touchEvents</div><div class="line"></div><div class="line">- 触摸事件</div><div class="line">    1. touchstart</div><div class="line">    2. touchmove</div><div class="line">    3. touchend</div><div class="line">    4. touchcancel</div><div class="line">- 手势事件</div><div class="line">    1. gesturestart</div><div class="line">    2. gesturechange</div><div class="line">    3. gestureend</div><div class="line"></div><div class="line">13. 5 内存和性能</div><div class="line"></div><div class="line">&gt;每个函数都是对象，会占用内存，内存中对象越多性能越差；必须事先指定所有事件</div><div class="line">处理程序而导致的DOM访问次数，会延迟整个页面的交互就绪时间。解决之道是使用事件委托或</div><div class="line">移除事件处理程序。</div><div class="line"></div><div class="line">- 事件委托：只需在DOM树中尽量最高的层次上添加一个事件处理程序</div></pre></td></tr></table></figure></p>
<p>(function(){<br>var list = document.getElementById(“myLinks”);<br>        EventUtil.addHandler(list, “click”, function(event){<br>            event = EventUtil.getEvent(event);<br>            var target = EventUtil.getTarget(event);<br>            switch(target.id){<br>                case “doSomething”:<br>                    document.title = “I changed the document’s title”;<br>                    break;</p>
<pre><code>            case &quot;goSomewhere&quot;:
                location.href = &quot;http://www.wrox.com&quot;;
                break;

            case &quot;sayHi&quot;:
                alert(&quot;hi&quot;);
                break;
        }
    });
})();
btn.onclick=function(){
    //过河
    btn.onclick=null;//拆桥
    //...
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">13. 6模拟事件</div><div class="line"></div><div class="line">- DOM中的事件模拟：document.createEvent()方法创建对象。</div></pre></td></tr></table></figure>
<p>(function(){<br>        var btn = document.getElementById(“myBtn”);<br>        var btn2 = document.getElementById(“myBtn2”);</p>
<pre><code>    EventUtil.addHandler(btn, &quot;click&quot;, function(event){
        alert(&quot;Clicked!&quot;);
        alert(event.screenX);   //100
    });

    EventUtil.addHandler(btn2, &quot;click&quot;, function(event){
        //create event object
        var event = document.createEvent(&quot;MouseEvents&quot;);
        //initialize the event object
        event.initMouseEvent(&quot;click&quot;, true, true, document.defaultView, 0, 100, 0, 0, 0, false, 
                             false, false, false, 0, btn2);
        //fire the event
        btn.dispatchEvent(event);
    });
})();
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter 14 表单脚本</div><div class="line"></div><div class="line">- 自动切换焦点</div></pre></td></tr></table></figure>
<p><body></body></p>
<p><form method="post" action="http://www.nczonline.net"><br>    <p>Enter your telephone number:</p><br>    <input type="text" name="tel1" id="txtTel1" size="3" maxlength="3"><br>    <input type="text" name="tel2" id="txtTel2" size="3" maxlength="3"><br>    <input type="text" name="tel3" id="txtTel3" size="4" maxlength="4"></form></p>
<pre><code>&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;
</code></pre><p></p>
<p><script type="text/javascript"><br>(function(){</p>
<pre><code>function tabForward(event){            
    event = EventUtil.getEvent(event);
    var target = EventUtil.getTarget(event);

    if (target.value.length == target.maxLength){
        var form = target.form;

        for (var i=0, len=form.elements.length; i &lt; len; i++) {
            if (form.elements[i] == target) {
                if (form.elements[i+1]){
                    form.elements[i+1].focus();
                }
                return;
            }
        }
    }
}

var textbox1 = document.getElementById(&quot;txtTel1&quot;),
    textbox2 = document.getElementById(&quot;txtTel2&quot;),
    textbox3 = document.getElementById(&quot;txtTel3&quot;);

EventUtil.addHandler(textbox1, &quot;keyup&quot;, tabForward);        
EventUtil.addHandler(textbox2, &quot;keyup&quot;, tabForward);        
EventUtil.addHandler(textbox3, &quot;keyup&quot;, tabForward);        
</code></pre><p>})();<br></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 14. 4 表单序列化</div></pre></td></tr></table></figure></p>
<p> function serialize(form){<br>    var parts = [],<br>        field = null,<br>        i,<br>        len,<br>        j,<br>        optLen,<br>        option,<br>        optValue;</p>
<pre><code>for (i=0, len=form.elements.length; i &lt; len; i++){
    field = form.elements[i];

    switch(field.type){
        case &quot;select-one&quot;:
        case &quot;select-multiple&quot;:

            if (field.name.length){
                for (j=0, optLen = field.options.length; j &lt; optLen; j++){
                    option = field.options[j];
                    if (option.selected){
                        optValue = &quot;&quot;;
                        if (option.hasAttribute){
                            optValue = (option.hasAttribute(&quot;value&quot;) ? option.value : option.text);
                        } else {
                            optValue = (option.attributes[&quot;value&quot;].specified ? option.value : option.text);
                        }
                        parts.push(encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(optValue));
                    }
                }
            }
            break;

        case undefined:     //fieldset
        case &quot;file&quot;:        //file input
        case &quot;submit&quot;:      //submit button
        case &quot;reset&quot;:       //reset button
        case &quot;button&quot;:      //custom button
            break;

        case &quot;radio&quot;:       //radio button
        case &quot;checkbox&quot;:    //checkbox
            if (!field.checked){
                break;
            }
            /* falls through */

        default:
            //don&apos;t include form fields without names
            if (field.name.length){
                parts.push(encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(field.value));
            }
    }
}        
return parts.join(&quot;&amp;&quot;);
</code></pre><p>}</p>
<p>var btn = document.getElementById(“serialize-btn”);<br>EventUtil.addHandler(btn, “click”, function(event){<br>    var form = document.forms[0];<br>    alert(serialize(form));<br>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter 15 Canvas</div><div class="line"></div><div class="line">###  Chapter 16 HTML5脚本编程</div><div class="line"></div><div class="line">- 16. 1 cross-document messaging XDM: 在来自不同域的页面间传递消息。</div><div class="line">- 16. 2 原生拖放(事件)</div><div class="line">    1. dragestart；</div><div class="line">    2. drag;</div><div class="line">    3. dragend;</div><div class="line">- 16. 3 媒体元素</div><div class="line">- 16. 4 历史状态管理</div><div class="line"></div><div class="line">###  Chapter17 错误与调试</div><div class="line"></div><div class="line">- 17.2 错误处理</div><div class="line">错误类型：</div><div class="line">1. Error：基类型，供开发人员抛出自定义错误</div><div class="line">2. EvalError：错误会使用eval()函数抛出</div><div class="line"></div><div class="line">` new eval();eval=foo;`</div><div class="line"></div><div class="line">3. RangeError：错误超出相应范围时触发</div><div class="line"></div><div class="line">`var items1=new Array(-20);var items2=new Array(Number.MAX_VALUE);`</div><div class="line"></div><div class="line">4. ReferenceError：找不到对象时抛出</div><div class="line"></div><div class="line">`var obj=x;`</div><div class="line"></div><div class="line">5. SyntaxError：语法错误</div><div class="line"></div><div class="line">`eval(&quot;a++b&quot;)`</div><div class="line"></div><div class="line">6. TypeError：类型错误，变量中保存意外类型或者访问不存在的方法时。</div><div class="line"></div><div class="line">`var o=new 12;alert(&apos;love&apos; in true);Function.prototype.toString.call(&apos;name&apos;)`</div><div class="line">7. URIError：使用encodeURI()或者decodeURI()格式错误时抛出。</div></pre></td></tr></table></figure></p>
<p>//想知道错误类型可以如此利用try-catch语句<br>try{<br>    someFunction();<br>}catch(error){<br>    if(error instanceof TypeError){}<br>    else if(error instanceof SyntaxError){}<br>    else{…}<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter 18 JS与XML</div><div class="line">###  Chapter 19 E4X</div><div class="line">###  Chapter 20 JSON</div><div class="line"></div><div class="line">&gt; JSON:Javascript Object Notation,JS对象表示法，JS的利用了JS中的一些</div><div class="line">模式来表示结构化数据的一个严格的子集。仅是一种数据格式不是一种语言。</div><div class="line">- JSON语法：三种类型</div><div class="line">    1. 简单值：与JS相同的语法，可在JSON中表示字符串，布尔值，数值和null（不支持undefined）</div><div class="line">    2. 对象：一种无序的键值对的复杂数据结构类型，值可以是简单值也可以是对象。</div><div class="line">    3. 数组：一种有序的值的列表的复杂的数据结构类型，通过索引访问元素。</div><div class="line">JSON不支持变量，函数或者对象实例，仅仅是一种表示结构化数据的格式，虽与JS中表示数据的</div><div class="line">某些语法相同，但并不局限于JS范畴。</div><div class="line">- 20. 2解析与序列化</div></pre></td></tr></table></figure></p>
<p>JSON.parse();<br>JSON.stringify();<br>toJSON();<br>var book = {<br>    title: “Professional JavaScript”,<br>    authors: [<br>        “Nicholas C. Zakas”<br>    ],<br>    edition: 3,<br>    year: 2011,<br>    toJSON: function(){<br>        return this.title;<br>    }<br>   };<br>    var jsonText = JSON.stringify(book, [“title”, “edition”]);<br>            var jsonText = JSON.stringify(book, function(key, value){<br>                switch(key){<br>                    case “authors”:<br>                        return value.join(“,”)</p>
<pre><code>                case &quot;year&quot;:
                    return 5000;

                case &quot;edition&quot;:
                    return undefined;

                default:
                    return value;
            }
        });
var jsonText=JSON.stringify(book,null,4);
</code></pre><p>//toJSON()作为函数过滤器的补充，把一个对象传给JSON.stringify()，序列化顺序如下：<br>//1. (存在toJSON)?调用该方法:返回对象本身；<br>// 2.若提供了第二个参数则应用该函数过滤器（传入步骤1的值）<br>//3.对上一步返回的每一个值序列化<br>//4. 若传入了第三个参数则执行相应格式化<br> var book = {<br>                       “title”: “Professional JavaScript”,<br>                        “authors”: [<br>                            “Nicholas C. Zakas”<br>                        ],<br>                        edition: 3,<br>                        year: 2011,<br>                        releaseDate: new Date(2011, 11, 1)<br>                   };<br>           var jsonText = JSON.stringify(book);<br>        //{“title”:”Professional JavaScript”,”authors”:[“Nicholas C. Zakas”],”edition”:3,”year”:2011,”releaseDate”:”2011-11-30T16:00:00.000Z”}<br>   var bookCopy = JSON.parse(jsonText, function(key, value){<br>       if (key == “releaseDate”){<br>           //return undefined;<br>           return new Date(value);<br>       } else {<br>           return value;<br>       }<br>   });<br>   console.log(“releaseDate” in bookCopy);<br>   console.log(bookCopy.releaseDate.getFullYear());//2011<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">###  Chapter 21 Ajax与Comet</div><div class="line"></div><div class="line">&gt; Ajax:Asynchronous JS + XML:能够向服务器请求额外的数据而无须刷新页面，带来更好的用户体验。</div><div class="line">其核心是XMLHttpRequest(XHR)对象,其为向服务器发送请求和解析服务器响应提供了流畅的接口。能够</div><div class="line">以异步方式从服务器取得更多的信息。虽然名字中包含XML，但Ajax通信与数据格式无关；无须刷新整个</div><div class="line">页面即可从服务器取得数据，不局限于XML。</div></pre></td></tr></table></figure></p>
<p>function createXHR(){<br>    if (typeof XMLHttpRequest != “undefined”){<br>        return new XMLHttpRequest();<br>    } else if (typeof ActiveXObject != “undefined”){<br>        if (typeof arguments.callee.activeXString != “string”){<br>            var versions = [“MSXML2.XMLHttp.6.0”, “MSXML2.XMLHttp.3.0”,<br>                            “MSXML2.XMLHttp”],<br>                i, len;</p>
<pre><code>        for (i=0,len=versions.length; i &lt; len; i++){
            try {
                new ActiveXObject(versions[i]);
                arguments.callee.activeXString = versions[i];
                break;
            } catch (ex){
                //skip
            }
        }
    }

    return new ActiveXObject(arguments.callee.activeXString);
} else {
    throw new Error(&quot;No XHR object available.&quot;);
}
</code></pre><p>}<br>//如果XHR对象存在就可以写下边代码了<br>var xhr = createXHR();<br>//URL是相对执行代码的当前页面，open方法并非真正发送请求而是启动一个备发送的请求<br>xhr.open(“get”, “example.txt”, false);<br>//send()接收一个参数作为请求主题发送数据，颥不需要发送则必须传入null<br>//responseText:作为响应主题被返回的文本<br>//responseXML:如响应内容类型是’text/xml’或’application/xml’该属性将保存包含着相应数据<br>的XML DOM文档<br>//status:响应的http状态<br>//statusText：http状态说明<br>xhr.send(null);<br>if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304){<br>    alert(xhr.statusText);<br>    alert(xhr.responseText);<br>} else {<br>    alert(“Request was unsuccessful: “ + xhr.status);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###  Chapter22 高级技巧</div><div class="line"></div><div class="line">- 22. 1.4函数绑定bind()</div><div class="line">- 22. 1.5函数柯里化（function curring）</div><div class="line">- 22. 2防篡改对象</div><div class="line">    22. 2.1 不可扩展对象</div><div class="line">        1. Object.preventExtensions();</div><div class="line">        2. Object.extensible()</div><div class="line">    22. 2.2密封对象：Object.seal()</div><div class="line">    22. 2.3冻结对象:Object.freeze() </div><div class="line"></div><div class="line">###  Chapter 23 离线存储与客户端存储</div><div class="line"></div><div class="line">&gt; 开发离线web应用步骤：</div><div class="line">1. 确保应用知道设备能否上网；</div><div class="line">2. 应用必须能够访问一定的资源；</div><div class="line">3. 必须有一块本地空间用于保存数据，能否上网都不妨碍读写。</div></pre></td></tr></table></figure></p>
<p> EventUtil.addHandler(window, “online”, function(){<br>            document.getElementById(“status”).innerHTML = “Online”;<br>        });<br>        EventUtil.addHandler(window, “offline”, function(){<br>            document.getElementById(“status”).innerHTML = “Offline”;<br>        });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">23. 3数据存储</div><div class="line"></div><div class="line">###  Good Practise</div><div class="line"></div><div class="line">- 可维护性</div><div class="line">    1. 可理解性：其他人可以接手代码并理解它的意图和一般途径，无须作者的完整解释</div><div class="line">    2. 直观性：一目了然，不管其操作过程多么复杂</div><div class="line">    3. 可适应性：以一种数据上的变化不要求完全重写的方法撰写</div><div class="line">    4. 可扩展性：架构上已考虑未来允许对核心功能的扩展</div><div class="line">    5. 可调试性：当有地方出错时，提供足够信息来尽可能直接反馈问题所在</div><div class="line">- 代码约定</div><div class="line">    1. 可读性：</div><div class="line">        1. 函数和方法：每个要有注释，描述其目的和用于完成任务所可能使用的算法</div><div class="line">        2. 大段代码：描述下任务的注释</div><div class="line">        3. 复杂算法： </div><div class="line">        4. hack：处理兼容性等问题</div><div class="line">    2. 变量和命名</div><div class="line">        1. 变量名为名词（car，person）；</div><div class="line">        2. 函数名以动词开始（getName）,返回布尔值的以is开头</div><div class="line">        3. 使用合乎逻辑的名字</div><div class="line">    3. 变量类型透明</div><div class="line">        1. 初始化：var found=false,count=-1,name=&apos;&apos;</div><div class="line">        2. 匈牙利标记法指定变量类型： var bFound,iCount,sName,pPerson</div><div class="line">        3. 使用注释</div><div class="line">- 松散耦合</div><div class="line">    1. 解耦html/JS</div><div class="line">    2. 解耦css/JS</div><div class="line">    3. 解耦应用逻辑/事件处理程序:分离原则</div><div class="line">        1. 勿将event对象传给其它方法，只传给来自event对象中所需的数据；</div><div class="line">        2. 任何可以在应用层面的动作都应该可以在不执行任何事件处理程序的情况下进行；</div><div class="line">        3. 任何事件处理程序都应该处理事件，然后将处理转交给应用逻辑。</div></pre></td></tr></table></figure></p>
<p>function validateValue(value){<br>    value=5*parseInt(value);<br>    if(value&gt;10){<br>        //<br>    }<br>}<br>function handleKeyPress(){<br>    event=EventUtil.getEvent(event);<br>    if(event.keyCode==13){<br>        //<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">- 编程事件</div><div class="line">    1. 尊重对象所有权</div><div class="line">        1. 不要为实例或原型添加属性，方法</div><div class="line">        2. 不要重定义已存在的方法</div><div class="line">    2.  避免全局变量</div><div class="line">        1. 单一的全局量的延伸便是命名空间的概念</div><div class="line">           YAHOO.util.DOM,YAHOO.util.Event,YAHOO.lang</div><div class="line">    3. 避免与null比较</div><div class="line">    4. 使用常量：将数据和使用逻辑分离</div><div class="line">        1. 重复值：任何在多处用到的值都应是常量；</div><div class="line">        2. 用户界面字符串</div><div class="line">        3. URLs</div><div class="line">        4. 任何可能会改变的值</div><div class="line">- 性能</div><div class="line">    1. 注意作用域</div><div class="line">        1. 避免全局查找</div><div class="line">        2. 避免with</div><div class="line">    2. 选择正确的方法</div><div class="line">        1. 避免没必要的查找</div><div class="line">        2. 优化循环</div><div class="line">        3. 展开循环</div><div class="line">        4. 避免双重解释</div><div class="line">        5. 其它注意事项</div><div class="line">            1. 原生方法较快：</div><div class="line">            2. switch语句较快</div><div class="line">            3. 位运算符较快</div><div class="line">- 最小化语句树</div><div class="line">    1. 多个变量声明</div><div class="line">    2. 插入迭代值</div><div class="line">    3. 使用数组和对象字面量</div><div class="line">- 优化DOM交互</div><div class="line">    1. 最小化现场更新</div><div class="line">    2. 使用innerHTML</div><div class="line">    3. 使用事件代理</div><div class="line">    4. 注意HTMLCollection</div><div class="line">- 部署</div><div class="line">    1. 构建过程</div><div class="line">        1. 知识产权问题</div><div class="line">        2. 文件大小</div><div class="line">        3. 代码组织</div><div class="line">    2. 验证</div><div class="line">    3. 压缩</div><div class="line">        1. 文件压缩</div><div class="line">            1. 删除所有空白</div><div class="line">            2. 删除所有注释</div><div class="line">            3. 缩短变量名</div><div class="line">        2.HTTP 压缩</div><div class="line">###  Chapter25 新兴API</div><div class="line">###  ES Harmony</div><div class="line"></div><div class="line">- 一般性变化</div><div class="line">    1. 常量：const</div><div class="line">    2. 块级作用域及其它作用域</div><div class="line">        let关键字：使用let定义的变量在定义它的代码之外没有定义。</div><div class="line">- 函数</div><div class="line"></div><div class="line">1. 剩余参数与分布函数</div></pre></td></tr></table></figure></p>
<p>function sum(n1,n2,…ns){<br>    var result=n1+n2;<br>    for(let i=0,len=ns.length;i<len;i++){ result+="n[i]" }="" return="" result;="" var="" result="sum(...[1,2,3,4,4]);" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 默认参数值</div></pre></td></tr></table></len;i++){></p>
<p>function sum(n1,n2=0){<br>    return n1+n2;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 生成器</div></pre></td></tr></table></figure></p>
<p>function myNumbers(){<br>    for(var i=0;i<10;i++){ yield="" i*2;="" }="" var="" generator="myNumbers()" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 数组及其它</div><div class="line">1. 迭代器</div></pre></td></tr></table></10;i++){></p>
<p>var colors=[‘yellow’,’blue’,’red’];<br>var iterator=new Iterator(colors)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 数组领悟</div></pre></td></tr></table></figure></p>
<p>var numbers=[1,3,4,4,5];<br>var duplicate=[i for each (i in numbers) if(i%2==0)]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 解构赋值</div></pre></td></tr></table></figure></p>
<p>var value1=5,value2=10;<br>[value1,value2]=[value2,value1]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- 新对象类型</div><div class="line">    1. 代理对象</div></pre></td></tr></table></figure></p>
<pre><code>var proxy=Proxy.create(handler);
var proxy=Proxy.create(handler,myObject);
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">捕捉器7种：</div><div class="line">    1. getOwnPropertyDescriptor</div><div class="line">    2. getPropertyDescriptor</div><div class="line">    3. getOwnPropertyNames</div><div class="line">    4. getPropertyName</div><div class="line">    5. defineProperty</div><div class="line">    6. delete</div><div class="line">    7. fix</div><div class="line">派生捕捉器6种</div><div class="line">    1. has</div><div class="line">    2. hasOwn</div><div class="line">    3. get</div><div class="line">    4. set</div><div class="line">    5. enumerate</div><div class="line">    6. keys</div><div class="line">2. 代理函数</div></pre></td></tr></table></figure>

var proxy=Proxy.createFunction(handler,function(){}.function(){})
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 映射map与集合set</div></pre></td></tr></table></figure>

var map=new Map();
map.set(&apos;name&apos;,&apos;Yl&apos;);
map.has(&apos;name&apos;);//true
var set=new Set();
set.add(&apos;name&apos;);
set.has(&apos;name&apos;);//true
set.delete(&apos;name&apos;)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4. weakMap</div></pre></td></tr></table></figure>

var key={},map=new WeakMap();
map.set(key,&apos;hello&apos;);
//解除对键的引用而删除该值
key=null
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    5. StructType</div><div class="line">    6. ArrayType</div><div class="line">- 类</div></pre></td></tr></table></figure>
</code></pre><p>class Person {<br>    constructor(name,age){<br>        public name=name;<br>        //public age=age;<br>        private age=age;<br>        get title(){<br>            return innerTitle=’’<br>        }<br>        set title(value){<br>            innerTitle=value;<br>        }<br>    }<br>    sayName(){<br>        alert(this.name)<br>    }<br>    getOlder(years){<br>        alert(this.age+=years)<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 私有成员</div><div class="line">2. getter,setter</div><div class="line">3. 继承</div></pre></td></tr></table></figure></p>
<p>class Employee extends Person<br>class Employee prototype basePerson<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 模块</div></pre></td></tr></table></figure></p>
<p>module MyModule={<br>    export let myobject={};<br>    export function hello(){};<br>    function goodbye(){}<br>}<br>import myobject from MyModule<br>import * from MyModule<br>//直接使用<br>console.log(MyModule.hello)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">外部模块</div></pre></td></tr></table></figure></p>
<p>module MyModule from ‘a.js’<br>import myobject from MyModule<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">###  严格模式</div><div class="line"></div><div class="line">```use strit</div></pre></td></tr></table></figure></p>
<ul>
<li>变量：禁止意外创建全局变量</li>
<li>对象：<ol>
<li>为只读属性赋值==&gt;TypeError</li>
<li>对不可配置的属性使用delete==&gt;TypeError</li>
<li>为不可扩展的对象添加属性==&gt;TypeError</li>
<li>使用对象字面量时属性名必须唯一</li>
</ol>
</li>
<li>函数<ol>
<li>命名函数的参数必须唯一</li>
<li>淘汰了arguments.callee,arguments.caller</li>
</ol>
</li>
<li>eval():在包含上下文中不再创建变量或函数</li>
<li>eval与arguments：不可作为变量引用</li>
<li>抑制this：函数的this始终是指定值，无论指定值是什么</li>
<li>其它：禁用with语句</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS高级教程总结&quot;&gt;&lt;a href=&quot;#JS高级教程总结&quot; class=&quot;headerlink&quot; title=&quot;JS高级教程总结&quot;&gt;&lt;/a&gt;JS高级教程总结&lt;/h1&gt;&lt;h3 id=&quot;Chapter3-基本概念&quot;&gt;&lt;a href=&quot;#Chapter3-基本概念&quot; c
    
    </summary>
    
      <category term="JS" scheme="https://yanlee26.github.io/categories/JS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Framework resharpe</title>
    <link href="https://yanlee26.github.io/2016/06/04/framework/"/>
    <id>https://yanlee26.github.io/2016/06/04/framework/</id>
    <published>2016-06-03T23:22:22.000Z</published>
    <updated>2017-08-23T23:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-常用封装总结"><a href="#js-常用封装总结" class="headerlink" title="js 常用封装总结"></a>js 常用封装总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div></pre></td><td class="code"><pre><div class="line">//自制框架</div><div class="line">//定义一个对象 - 名字是$$</div><div class="line">var $$ = function () &#123;</div><div class="line">&#125;;</div><div class="line">//第二种写法</div><div class="line">$$.prototype = &#123;</div><div class="line">    $q:function (str) &#123;</div><div class="line">        return document.querySelector(str)</div><div class="line">    &#125;,</div><div class="line">    $qa:function (str) &#123;</div><div class="line">        return document.querySelectorAll(str)</div><div class="line">    &#125;,</div><div class="line">    $id: function (str) &#123;</div><div class="line">        return document.getElementById(str)</div><div class="line">    &#125;,</div><div class="line">    $tag: function (tag) &#123;</div><div class="line">        return document.getElementsByTagName(tag)</div><div class="line">    &#125;,</div><div class="line">    //去除左边空格</div><div class="line">    ltrim: function (str) &#123;</div><div class="line">        return str.replace(/(^\s*)/g, &apos;&apos;);</div><div class="line">    &#125;,</div><div class="line">    //去除右边空格</div><div class="line">    rtrim: function (str) &#123;</div><div class="line">        return str.replace(/(\s*$)/g, &apos;&apos;);</div><div class="line">    &#125;,</div><div class="line">    //去除空格</div><div class="line">    trim: function (str) &#123;</div><div class="line">        return str.replace(/(^\s*)|(\s*$)/g, &apos;&apos;);</div><div class="line">    &#125;,</div><div class="line">    //ajax</div><div class="line">    myAjax: function (URL, fn) &#123;</div><div class="line">        var xhr = createXHR();	//返回了一个对象，这个对象IE6兼容。</div><div class="line">        xhr.onreadystatechange = function () &#123;</div><div class="line">            if (xhr.readyState === 4) &#123;</div><div class="line">                if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status == 304) &#123;</div><div class="line">                    fn(xhr.responseText);</div><div class="line">                &#125; else &#123;</div><div class="line">                    alert(&quot;错误的文件！&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        xhr.open(&quot;get&quot;, URL, true);</div><div class="line">        xhr.send();</div><div class="line">        //闭包形式，因为这个函数只服务于ajax函数，所以放在里面</div><div class="line">        function createXHR() &#123;</div><div class="line">            if (typeof XMLHttpRequest != &quot;undefined&quot;) &#123;</div><div class="line">                return new XMLHttpRequest();</div><div class="line">            &#125; else if (typeof ActiveXObject != &quot;undefined&quot;) &#123;</div><div class="line">                if (typeof arguments.callee.activeXString != &quot;string&quot;) &#123;</div><div class="line">                    var versions = [&quot;MSXML2.XMLHttp.6.0&quot;, &quot;MSXML2.XMLHttp.3.0&quot;,</div><div class="line">                            &quot;MSXML2.XMLHttp&quot;</div><div class="line">                        ],</div><div class="line">                        i, len;</div><div class="line">                    for (i = 0, len = versions.length; i &lt; len; i++) &#123;</div><div class="line">                        try &#123;</div><div class="line">                            new ActiveXObject(versions[i]);</div><div class="line">                            arguments.callee.activeXString = versions[i];</div><div class="line">                            break;</div><div class="line">                        &#125; catch (ex) &#123;</div><div class="line">                            //skip</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return new ActiveXObject(arguments.callee.activeXString);</div><div class="line">            &#125; else &#123;</div><div class="line">                throw new Error(&quot;No XHR object available.&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //tab</div><div class="line">    tab: function (id) &#123;</div><div class="line">        var box = document.getElementById(id);</div><div class="line">        var spans = box.getElementsByTagName(&apos;span&apos;);</div><div class="line">        var lis = box.getElementsByTagName(&apos;li&apos;);</div><div class="line">        for (var i = 0; i &lt; spans.length; i++) &#123;</div><div class="line">            spans[i].index = i;</div><div class="line">            spans[i].onmouseover = function () &#123;</div><div class="line">                for (var i = 0; i &lt; spans.length; i++) &#123;</div><div class="line">                    spans[i].className = &apos;&apos;;</div><div class="line">                    lis[i].className = &apos;&apos;;</div><div class="line">                &#125;</div><div class="line">                this.className = &apos;select&apos;;</div><div class="line">                lis[this.index].className = &apos;select&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //简单的数据绑定formateString</div><div class="line">    formateString: function (str, data) &#123;</div><div class="line">        return str.replace(/@\((\w+)\)/g, function (match, key) &#123;</div><div class="line">            return typeof data[key] === &quot;undefined&quot; ? &apos;&apos; : data[key]</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    //给一个对象扩充功能</div><div class="line">    extendMany: function () &#123;</div><div class="line">        var key, i = 0, len = arguments.length, target = null, copy;</div><div class="line">        if (len === 0) &#123;</div><div class="line">            return;</div><div class="line">        &#125; else if (len === 1) &#123;</div><div class="line">            target = this;</div><div class="line">        &#125; else &#123;</div><div class="line">            i++;</div><div class="line">            target = arguments[0];</div><div class="line">        &#125;</div><div class="line">        for (; i &lt; len; i++) &#123;</div><div class="line">            for (key in arguments[i]) &#123;</div><div class="line">                copy = arguments[i][key];</div><div class="line">                target[key] = copy;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return target;</div><div class="line">    &#125;,</div><div class="line">    extend: function (tar, source) &#123;</div><div class="line">        for (var i in source) &#123;</div><div class="line">            tar[i] = source[i];</div><div class="line">        &#125;</div><div class="line">        return tar;</div><div class="line">    &#125;,</div><div class="line">    random: function (begin, end) &#123;</div><div class="line">        return Math.floor(Math.random() * (end - begin)) + begin;</div><div class="line">    &#125;,</div><div class="line">    isNumber: function (val) &#123;</div><div class="line">        return typeof val === &apos;number&apos; &amp;&amp; isFinite(val)</div><div class="line">    &#125;,</div><div class="line">    isBoolean: function (val) &#123;</div><div class="line">        return typeof val === &quot;boolean&quot;;</div><div class="line">    &#125;,</div><div class="line">    isString: function (val) &#123;</div><div class="line">        return typeof val === &quot;string&quot;;</div><div class="line">    &#125;,</div><div class="line">    isUndefined: function (val) &#123;</div><div class="line">        return typeof val === &quot;undefined&quot;;</div><div class="line">    &#125;,</div><div class="line">    isObj: function (str) &#123;</div><div class="line">        if (str === null || typeof str === &apos;undefined&apos;) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return typeof str === &apos;object&apos;;</div><div class="line">    &#125;,</div><div class="line">    isNull: function (val) &#123;</div><div class="line">        return val === null;</div><div class="line">    &#125;,</div><div class="line">    isArray: function (arr) &#123;</div><div class="line">        if (arr === null || typeof arr === &apos;undefined&apos;) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return arr.constructor === Array;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">//在框架中实例化</div><div class="line">$$ = new $$();</div><div class="line">$$.extend($$, &#123;</div><div class="line">    $id: function(id) &#123;</div><div class="line">        return document.getElementById(id);</div><div class="line">    &#125;,</div><div class="line">    $tag: function(tag, context) &#123;</div><div class="line">        if (typeof context == &apos;string&apos;) &#123;</div><div class="line">            context = $$.$id(context);</div><div class="line">        &#125;</div><div class="line">        if (context) &#123;</div><div class="line">            return context.getElementsByTagName(tag);</div><div class="line">        &#125; else &#123;</div><div class="line">            return document.getElementsByTagName(tag);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    $class: function(className, context) &#123;</div><div class="line">        var i = 0,</div><div class="line">            len, dom = [],</div><div class="line">            arr = [];</div><div class="line">        if ($$.isString(context)) &#123;</div><div class="line">            context = document.getElementById(context);</div><div class="line">        &#125; else &#123;</div><div class="line">            context = document;</div><div class="line">        &#125;</div><div class="line">        if (context.getElementsByClassName) &#123;</div><div class="line">            return context.getElementsByClassName(className);</div><div class="line">        &#125; else &#123;</div><div class="line">            dom = context.getElementsByTagName(&apos;*&apos;);</div><div class="line">            for (i; len = dom.length, i &lt; len; i++) &#123;</div><div class="line">                if (dom[i].className) &#123;</div><div class="line">                    arr.push(dom[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return arr;</div><div class="line">    &#125;,</div><div class="line">    $group: function(content) &#123;</div><div class="line">        var result = [],</div><div class="line">            doms = [];</div><div class="line">        var arr = $$.trim(content).split(&apos;,&apos;);</div><div class="line">        for (var i = 0, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">            var item = $$.trim(arr[i])</div><div class="line">            var first = item.charAt(0)</div><div class="line">            var index = item.indexOf(first)</div><div class="line">            if (first === &apos;.&apos;) &#123;</div><div class="line">                doms = $$.$class(item.slice(index + 1));</div><div class="line">                pushArray(doms, result)</div><div class="line">            &#125; else if (first === &apos;#&apos;) &#123;</div><div class="line">                doms = [$$.$id(item.slice(index + 1))] ;</div><div class="line">                pushArray(doms, result)</div><div class="line">            &#125; else &#123;</div><div class="line">                doms = $$.$tag(item);</div><div class="line">                pushArray(doms, result)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">        function pushArray(doms, result) &#123;</div><div class="line">            for (var j = 0, domlen = doms.length; j &lt; domlen; j++) &#123;</div><div class="line">                result.push(doms[j])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    $cengci: function(select) &#123;</div><div class="line">        var sel = $$.trim(select).split(&apos; &apos;);</div><div class="line">        var result = [];</div><div class="line">        var context = [];</div><div class="line">        for (var i = 0, len = sel.length; i &lt; len; i++) &#123;</div><div class="line">            result = [];</div><div class="line">            var item = $$.trim(sel[i]);</div><div class="line">            var first = sel[i].charAt(0)</div><div class="line">            var index = item.indexOf(first)</div><div class="line">            if (first === &apos;#&apos;) &#123;</div><div class="line">                pushArray([$$.$id(item.slice(index + 1))]);</div><div class="line">                context = result;</div><div class="line">            &#125; else if (first === &apos;.&apos;) &#123;</div><div class="line">                if (context.length) &#123;</div><div class="line">                    for (var j = 0, contextLen = context.length; j &lt; contextLen; j++) &#123;</div><div class="line">                        pushArray($$.$class(item.slice(index + 1), context[j]));</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    pushArray($$.$class(item.slice(index + 1)));</div><div class="line">                &#125;</div><div class="line">                context = result;</div><div class="line">            &#125; else &#123;</div><div class="line">                if (context.length) &#123;</div><div class="line">                    for (var j = 0, contextLen = context.length; j &lt; contextLen; j++) &#123;</div><div class="line">                        pushArray($$.$tag(item, context[j]));</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    pushArray($$.$tag(item));</div><div class="line">                &#125;</div><div class="line">                context = result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return context;</div><div class="line">        function pushArray(doms) &#123;</div><div class="line">            for (var j = 0, domlen = doms.length; j &lt; domlen; j++) &#123;</div><div class="line">                result.push(doms[j])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    $select: function(str) &#123;</div><div class="line">        var result = [];</div><div class="line">        var item = $$.trim(str).split(&apos;,&apos;);</div><div class="line">        for (var i = 0, glen = item.length; i &lt; glen; i++) &#123;</div><div class="line">            var select = $$.trim(item[i]);</div><div class="line">            var context = [];</div><div class="line">            context = $$.$cengci(select);</div><div class="line">            pushArray(context);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">        function pushArray(doms) &#123;</div><div class="line">            for (var j = 0, domlen = doms.length; j &lt; domlen; j++) &#123;</div><div class="line">                result.push(doms[j])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    $all: function(selector, context) &#123;</div><div class="line">        context = context || document;</div><div class="line">        return context.querySelectorAll(selector);</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">$$.extend($$, &#123;</div><div class="line">    css: function(context, key, value) &#123;</div><div class="line">        console.log(&apos;dfdfd&apos;)</div><div class="line">        var dom = $$.isString(context) ? $$.$all(context) : context;</div><div class="line">        //Èç¹ûÊÇÊý×é</div><div class="line">        if (dom.length) &#123;</div><div class="line">            //ÏÈ¹Ç¼Ü¹Ç¼Ü -- Èç¹ûÊÇ»ñÈ¡Ä£Ê½ -- Èç¹ûÊÇÉèÖÃÄ£Ê½</div><div class="line">            //Èç¹ûvalue²»Îª¿Õ£¬Ôò±íÊ¾ÉèÖÃ</div><div class="line">            if (value) &#123;</div><div class="line">                for (var i = dom.length - 1; i &gt;= 0; i--) &#123;</div><div class="line">                    setStyle(dom[i], key, value);</div><div class="line">                &#125;</div><div class="line">                //            Èç¹ûvalueÎª¿Õ£¬Ôò±íÊ¾»ñÈ¡</div><div class="line">            &#125; else &#123;</div><div class="line">                return getStyle(dom[0]);</div><div class="line">            &#125;</div><div class="line">            //Èç¹û²»ÊÇÊý×é</div><div class="line">        &#125; else &#123;</div><div class="line">            if (value) &#123;</div><div class="line">                setStyle(dom, key, value);</div><div class="line">            &#125; else &#123;</div><div class="line">                return getStyle(dom);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        function getStyle(dom) &#123;</div><div class="line">            if (dom.currentStyle) &#123;</div><div class="line">                return dom.currentStyle[key];</div><div class="line">            &#125; else &#123;</div><div class="line">                return getComputedStyle(dom, null)[key];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        function setStyle(dom, key, value) &#123;</div><div class="line">            dom.style[key] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    cssNum: function(context, key) &#123;</div><div class="line">        return parseFloat($$.css(context, key))</div><div class="line">    &#125;,</div><div class="line">    show: function(content) &#123;</div><div class="line">        var doms = $$.$all(content)</div><div class="line">        for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">            $$.css(doms[i], &apos;display&apos;, &apos;block&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    hide: function(content) &#123;</div><div class="line">        var doms = $$.$all(content)</div><div class="line">        for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">            $$.css(doms[i], &apos;display&apos;, &apos;none&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    Width: function(id) &#123;</div><div class="line">        return $$.$id(id).clientWidth</div><div class="line">    &#125;,</div><div class="line">    Height: function(id) &#123;</div><div class="line">        return $$.$id(id).clientHeight</div><div class="line">    &#125;,</div><div class="line">    scrollWidth: function(id) &#123;</div><div class="line">        return $$.$id(id).scrollWidth</div><div class="line">    &#125;,</div><div class="line">    scrollHeight: function(id) &#123;</div><div class="line">        return $$.$id(id).scrollHeight</div><div class="line">    &#125;,</div><div class="line">    scrollTop: function(id) &#123;</div><div class="line">        return $$.$id(id).scrollTop</div><div class="line">    &#125;,</div><div class="line">    scrollLeft: function(id) &#123;</div><div class="line">        return $$.$id(id).scrollLeft</div><div class="line">    &#125;,</div><div class="line">    screenHeight: function() &#123;</div><div class="line">        return window.screen.height</div><div class="line">    &#125;,</div><div class="line">    screenWidth: function() &#123;</div><div class="line">        return window.screen.width</div><div class="line">    &#125;,</div><div class="line">    wWidth: function() &#123;</div><div class="line">        return document.documentElement.clientWidth</div><div class="line">    &#125;,</div><div class="line">    wHeight: function() &#123;</div><div class="line">        return document.documentElement.clientHeight</div><div class="line">    &#125;,</div><div class="line">    wScrollHeight: function() &#123;</div><div class="line">        return document.body.scrollHeight</div><div class="line">    &#125;,</div><div class="line">    wScrollWidth: function() &#123;</div><div class="line">        return document.body.scrollWidth</div><div class="line">    &#125;,</div><div class="line">    wScrollTop: function() &#123;</div><div class="line">        var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;</div><div class="line">        return scrollTop</div><div class="line">    &#125;,</div><div class="line">    wScrollLeft: function() &#123;</div><div class="line">        var scrollLeft = document.body.scrollLeft || (document.documentElement &amp;&amp; document.documentElement.scrollLeft);</div><div class="line">        return scrollLeft</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">$$.extend($$, &#123;</div><div class="line">    attr: function(content, key, value) &#123;</div><div class="line">        var dom = $$.$all(content);</div><div class="line">        if (dom.length) &#123;</div><div class="line">            if (value) &#123;</div><div class="line">                for (var i = 0, len = dom.length; i &lt; len; i++) &#123;</div><div class="line">                    dom[i].setAttribute(key, value);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                return dom[0].getAttribute(key);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (value) &#123;</div><div class="line">                dom.setAttribute(key, value);</div><div class="line">            &#125; else &#123;</div><div class="line">                return dom.getAttribute(key);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    addClass: function(context, name) &#123;</div><div class="line">        var doms = $$.$all(context);</div><div class="line">        if (doms.length) &#123;</div><div class="line">            for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">                addName(doms[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            addName(doms);</div><div class="line">        &#125;</div><div class="line">        function addName(dom) &#123;</div><div class="line">            dom.className = dom.className + &apos; &apos; + name;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    removeClass: function(context, name) &#123;</div><div class="line">        var doms = $$.$all(context);</div><div class="line">        if (doms.length) &#123;</div><div class="line">            for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">                removeName(doms[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            removeName(doms);</div><div class="line">        &#125;</div><div class="line">        function removeName(dom) &#123;</div><div class="line">            dom.className = dom.className.replace(name, &apos;&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    hasClass: function(context, name) &#123;</div><div class="line">        var doms = $$.$all(context)</div><div class="line">        var flag = true;</div><div class="line">        for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">            flag = flag &amp;&amp; check(doms[i], name)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return flag;</div><div class="line">        //ÅÐ¶¨µ¥¸öÔªËØ</div><div class="line">        function check(element, name) &#123;</div><div class="line">            return -1 &lt; (&quot; &quot; + element.className + &quot; &quot;).indexOf(&quot; &quot; + name + &quot; &quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    getClass: function(id) &#123;</div><div class="line">        var doms = $$.$all(id)</div><div class="line">        return $$.trim(doms[0].className).split(&quot; &quot;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">$$.extend($$, &#123;</div><div class="line">    html: function(context, value) &#123;</div><div class="line">        var doms = $$.$all(context);</div><div class="line">        if (value) &#123;</div><div class="line">            for (var i = 0, len = doms.length; i &lt; len; i++) &#123;</div><div class="line">                doms[i].innerHTML = value;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            return doms[0].innerHTML</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">$$.extend($$, &#123;</div><div class="line">    on: function (id, type, fn) &#123;</div><div class="line">        var dom = $$.isString(id) ? document.getElementById(id) : id;</div><div class="line">        if (dom.addEventListener) &#123;</div><div class="line">            dom.addEventListener(type, fn, false);</div><div class="line">        &#125; else if (dom.attachEvent) &#123;</div><div class="line">            dom.attachEvent(&apos;on&apos; + type, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    un: function (id, type, fn) &#123;</div><div class="line">        var dom = $$.isString(id) ? document.getElementById(id) : id;</div><div class="line">        if (dom.removeEventListener) &#123;</div><div class="line">            dom.removeEventListener(type, fn);</div><div class="line">        &#125; else if (dom.detachEvent) &#123;</div><div class="line">            dom.detachEvent(type, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    click: function (id, fn) &#123;</div><div class="line">        this.on(id, &apos;click&apos;, fn);</div><div class="line">    &#125;,</div><div class="line">    mouseover: function (id, fn) &#123;</div><div class="line">        this.on(id, &apos;mouseover&apos;, fn);</div><div class="line">    &#125;,</div><div class="line">    mouseout: function (id, fn) &#123;</div><div class="line">        this.on(id, &apos;mouseout&apos;, fn);</div><div class="line">    &#125;,</div><div class="line">    hover: function (id, fnOver, fnOut) &#123;</div><div class="line">        if (fnOver) &#123;</div><div class="line">            this.on(id, &quot;mouseover&quot;, fnOver);</div><div class="line">        &#125;</div><div class="line">        if (fnOut) &#123;</div><div class="line">            this.on(id, &quot;mouseout&quot;, fnOut);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    delegate: function (pid, eventType, selector, fn) &#123;</div><div class="line">        //参数处理</div><div class="line">        var parent = $$.$id(pid);</div><div class="line">        function handle(e) &#123;</div><div class="line">            var target = $$.GetTarget(e);</div><div class="line">            if (target.nodeName.toLowerCase() === selector || target.id === selector || target.className.indexOf(selector) != -1) &#123;</div><div class="line">                fn.call(target);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        parent[eventType] = handle;</div><div class="line">    &#125;,</div><div class="line">    //事件基础</div><div class="line">    getEvent: function (event) &#123;</div><div class="line">        return event ? event : window.event;</div><div class="line">    &#125;,</div><div class="line">    //获取目标</div><div class="line">    GetTarget: function (event) &#123;</div><div class="line">        var e = $$.getEvent(event);</div><div class="line">        return e.target || e.srcElement;</div><div class="line">    &#125;,</div><div class="line">    //组织默认行为</div><div class="line">    preventDefault: function (event) &#123;</div><div class="line">        var event = $$.getEvent(event);</div><div class="line">        if (event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125; else &#123;</div><div class="line">            event.returnValue = false;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    //阻止冒泡</div><div class="line">    stopPropagation: function (event) &#123;</div><div class="line">        var event = $$.getEvent(event);</div><div class="line">        if (event.stopPropagation) &#123;</div><div class="line">            event.stopPropagation();</div><div class="line">        &#125; else &#123;</div><div class="line">            event.cancelBubble = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">$$.extend($$, &#123;</div><div class="line">    eq: function() &#123;&#125;,</div><div class="line">    first: function() &#123;&#125;,</div><div class="line">    last: function() &#123;&#125;,</div><div class="line">    append: function() &#123;&#125;,</div><div class="line">    empty: function() &#123;&#125;,</div><div class="line">    remove: function() &#123;&#125;,</div><div class="line">    clone: function() &#123;&#125;</div><div class="line">&#125;);</div><div class="line">$$.extend($$, &#123;</div><div class="line">    sjson: function(json) &#123;</div><div class="line">        return JSON.stringify(json);</div><div class="line">    &#125;,</div><div class="line">    json: function(str) &#123;</div><div class="line">        return eval(str);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">$$.cache = &#123;</div><div class="line">    data: [],</div><div class="line">    get: function(key) &#123;</div><div class="line">        console.log(&apos;111&apos;)</div><div class="line">        var value = null;</div><div class="line">        console.log(this.data)</div><div class="line">        for (var i = 0, len = this.data.length; i &lt; len; i++) &#123;</div><div class="line">            var item = this.data[i]</div><div class="line">            if (key == item.key) &#123;</div><div class="line">                value = item.value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        console.log(&apos;get&apos; + value)</div><div class="line">        return value;</div><div class="line">    &#125;,</div><div class="line">    add: function(key, value) &#123;</div><div class="line">        var json = &#123; key: key, value: value &#125;;</div><div class="line">        this.data.push(json);</div><div class="line">    &#125;,</div><div class="line">    delete: function(key) &#123;</div><div class="line">        var status = false;</div><div class="line">        for (var i = 0, len = this.data.length; i &lt; len; i++) &#123;</div><div class="line">            var item = this.data[i]</div><div class="line">            if (item.key.trim() == key) &#123;</div><div class="line">                this.data.splice(i, 1);</div><div class="line">                status = true;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return status;</div><div class="line">    &#125;,</div><div class="line">    update: function(key, value) &#123;</div><div class="line">        var status = false;</div><div class="line">        for (var i = 0, len = this.data.length; i &lt; len; i++) &#123;</div><div class="line">            var item = this.data[i]</div><div class="line">            if (item.key.trim() === key.trim()) &#123;</div><div class="line">                item.value = value.trim();</div><div class="line">                status = true;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return status;</div><div class="line">    &#125;,</div><div class="line">    isExist: function(key) &#123;</div><div class="line">        for (var i = 0, len = this.data.length; i &lt; len; i++) &#123;</div><div class="line">            var item = this.data[i]</div><div class="line">            if (key === item.key) &#123;</div><div class="line">                return true;</div><div class="line">            &#125; else &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$$.cookie = &#123;</div><div class="line">    setCookie: function(name, value, days, path) &#123;</div><div class="line">        var name = escape(name);</div><div class="line">        var value = escape(value);</div><div class="line">        var expires = new Date();</div><div class="line">        expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);</div><div class="line">        path = path == &quot;&quot; ? &quot;&quot; : &quot;;path=&quot; + path;</div><div class="line">        _expires = (typeof hours) == &quot;string&quot; ? &quot;&quot; : &quot;;expires=&quot; + expires.toUTCString();</div><div class="line">        document.cookie = name + &quot;=&quot; + value + _expires + path;</div><div class="line">    &#125;,</div><div class="line">    getCookie: function(name) &#123;</div><div class="line">        var name = escape(name);</div><div class="line">        var allcookies = document.cookie;</div><div class="line">        name += &quot;=&quot;;</div><div class="line">        var pos = allcookies.indexOf(name);</div><div class="line">        if (pos != -1) &#123;</div><div class="line">            var start = pos + name.length;</div><div class="line">            var end = allcookies.indexOf(&quot;;&quot;, start);</div><div class="line">            if (end == -1) end = allcookies.length;</div><div class="line">            var value = allcookies.substring(start, end);</div><div class="line">            return unescape(value);</div><div class="line">        &#125; else return &quot;&quot;;</div><div class="line">    &#125;,</div><div class="line">    deleteCookie: function(name, path) &#123;</div><div class="line">        var name = escape(name);</div><div class="line">        var expires = new Date(0);</div><div class="line">        path = path == &quot;&quot; ? &quot;&quot; : &quot;;path=&quot; + path;</div><div class="line">        document.cookie = name + &quot;=&quot; + &quot;;expires=&quot; + expires.toUTCString() + path;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$$.store = (function() &#123;</div><div class="line">    var api = &#123;&#125;,</div><div class="line">        win = window,</div><div class="line">        doc = win.document,</div><div class="line">        localStorageName = &apos;localStorage&apos;,</div><div class="line">        globalStorageName = &apos;globalStorage&apos;,</div><div class="line">        storage;</div><div class="line">    api.set = function(key, value) &#123;&#125;;</div><div class="line">    api.get = function(key) &#123;&#125;;</div><div class="line">    api.remove = function(key) &#123;&#125;;</div><div class="line">    api.clear = function() &#123;&#125;;</div><div class="line"></div><div class="line">    if (localStorageName in win &amp;&amp; win[localStorageName]) &#123;</div><div class="line">        storage = win[localStorageName];</div><div class="line">        api.set = function(key, val) &#123; storage.setItem(key, val) &#125;;</div><div class="line">        api.get = function(key) &#123;</div><div class="line">            return storage.getItem(key) &#125;;</div><div class="line">        api.remove = function(key) &#123; storage.removeItem(key) &#125;;</div><div class="line">        api.clear = function() &#123; storage.clear() &#125;;</div><div class="line"></div><div class="line">    &#125; else if (globalStorageName in win &amp;&amp; win[globalStorageName]) &#123;</div><div class="line">        storage = win[globalStorageName][win.location.hostname];</div><div class="line">        api.set = function(key, val) &#123; storage[key] = val &#125;;</div><div class="line">        api.get = function(key) &#123;</div><div class="line">            return storage[key] &amp;&amp; storage[key].value &#125;;</div><div class="line">        api.remove = function(key) &#123; delete storage[key] &#125;;</div><div class="line">        api.clear = function() &#123;</div><div class="line">            for (var key in storage) &#123; delete storage[key] &#125; &#125;;</div><div class="line"></div><div class="line">    &#125; else if (doc.documentElement.addBehavior) &#123;</div><div class="line">        function getStorage() &#123;</div><div class="line">            if (storage) &#123;</div><div class="line">                return storage &#125;</div><div class="line">            storage = doc.body.appendChild(doc.createElement(&apos;div&apos;));</div><div class="line">            storage.style.display = &apos;none&apos;;</div><div class="line">            // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx</div><div class="line">            // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx</div><div class="line">            storage.addBehavior(&apos;#default#userData&apos;);</div><div class="line">            storage.load(localStorageName);</div><div class="line">            return storage;</div><div class="line">        &#125;</div><div class="line">        api.set = function(key, val) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            storage.setAttribute(key, val);</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;;</div><div class="line">        api.get = function(key) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            return storage.getAttribute(key);</div><div class="line">        &#125;;</div><div class="line">        api.remove = function(key) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            storage.removeAttribute(key);</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;</div><div class="line">        api.clear = function() &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            var attributes = storage.XMLDocument.documentElement.attributes;;</div><div class="line">            storage.load(localStorageName);</div><div class="line">            for (var i = 0, attr; attr = attributes[i]; i++) &#123;</div><div class="line">                storage.removeAttribute(attr.name);</div><div class="line">            &#125;</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return api;</div><div class="line">&#125;)();</div><div class="line">var store = (function () &#123;</div><div class="line">    var api               = &#123;&#125;,</div><div class="line">        win               = window,</div><div class="line">        doc               = win.document,</div><div class="line">        localStorageName  = &apos;localStorage&apos;,</div><div class="line">        globalStorageName = &apos;globalStorage&apos;,</div><div class="line">        storage;</div><div class="line">    api.set    = function (key, value) &#123;&#125;;</div><div class="line">    api.get    = function (key)        &#123;&#125;;</div><div class="line">    api.remove = function (key)        &#123;&#125;;</div><div class="line">    api.clear  = function ()           &#123;&#125;;</div><div class="line">    if (localStorageName in win &amp;&amp; win[localStorageName]) &#123;</div><div class="line">        storage    = win[localStorageName];</div><div class="line">        api.set    = function (key, val) &#123; storage.setItem(key, val) &#125;;</div><div class="line">        api.get    = function (key)      &#123; return storage.getItem(key) &#125;;</div><div class="line">        api.remove = function (key)      &#123; storage.removeItem(key) &#125;;</div><div class="line">        api.clear  = function ()         &#123; storage.clear() &#125;;</div><div class="line"></div><div class="line">    &#125; else if (globalStorageName in win &amp;&amp; win[globalStorageName]) &#123;</div><div class="line">        storage    = win[globalStorageName][win.location.hostname];</div><div class="line">        api.set    = function (key, val) &#123; storage[key] = val &#125;;</div><div class="line">        api.get    = function (key)      &#123; return storage[key] &amp;&amp; storage[key].value &#125;;</div><div class="line">        api.remove = function (key)      &#123; delete storage[key] &#125;;</div><div class="line">        api.clear  = function ()         &#123; for (var key in storage ) &#123; delete storage[key] &#125; &#125;;</div><div class="line"></div><div class="line">    &#125; else if (doc.documentElement.addBehavior) &#123;</div><div class="line">        function getStorage() &#123;</div><div class="line">            if (storage) &#123; return storage &#125;</div><div class="line">            storage = doc.body.appendChild(doc.createElement(&apos;div&apos;));</div><div class="line">            storage.style.display = &apos;none&apos;;</div><div class="line">            // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx</div><div class="line">            // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx</div><div class="line">            storage.addBehavior(&apos;#default#userData&apos;);</div><div class="line">            storage.load(localStorageName);</div><div class="line">            return storage;</div><div class="line">        &#125;</div><div class="line">        api.set = function (key, val) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            storage.setAttribute(key, val);</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;;</div><div class="line">        api.get = function (key) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            return storage.getAttribute(key);</div><div class="line">        &#125;;</div><div class="line">        api.remove = function (key) &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            storage.removeAttribute(key);</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;</div><div class="line">        api.clear = function () &#123;</div><div class="line">            var storage = getStorage();</div><div class="line">            var attributes = storage.XMLDocument.documentElement.attributes;;</div><div class="line">            storage.load(localStorageName);</div><div class="line">            for (var i=0, attr; attr = attributes[i]; i++) &#123;</div><div class="line">                storage.removeAttribute(attr.name);</div><div class="line">            &#125;</div><div class="line">            storage.save(localStorageName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return api;</div><div class="line">&#125;)();</div><div class="line">Function.prototype.before = function( func ) &#123;</div><div class="line">    var __self = this;</div><div class="line">    return function() &#123;</div><div class="line">        if ( func.apply( this, arguments ) === false ) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return __self.apply( this, arguments );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Function.prototype.after = function( func ) &#123;</div><div class="line">    var __self = this;</div><div class="line">    return function() &#123;</div><div class="line">        var ret = __self.apply( this, arguments );</div><div class="line">        if( ret === false) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        func.apply( this, arguments );</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js-常用封装总结&quot;&gt;&lt;a href=&quot;#js-常用封装总结&quot; class=&quot;headerlink&quot; title=&quot;js 常用封装总结&quot;&gt;&lt;/a&gt;js 常用封装总结&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="JS" scheme="https://yanlee26.github.io/categories/JS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>道德经：人生之向导，智慧之源泉</title>
    <link href="https://yanlee26.github.io/2016/06/04/bibleInLife/"/>
    <id>https://yanlee26.github.io/2016/06/04/bibleInLife/</id>
    <published>2016-06-03T18:25:20.000Z</published>
    <updated>2017-07-31T14:25:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【道德经】"><a href="#【道德经】" class="headerlink" title="【道德经】"></a><center>【道德经】</center></h1><blockquote>
<p>老子</p>
<p>###【第一章】<br>　　道可道，非常道。名可名，非常名。<br>　　无名天地之始；有名万物之母。<br>　　故常无，欲以观其妙；常有，欲以观其徼。<br>　　此两者，同出而异名，同谓之玄。玄之又玄，众妙之门。</p>
<p>###【第二章】<br>　　天下皆知美之为美，斯恶已。皆知善之为善，斯不善已。<br>　　有无相生，难易相成，长短相形，高下相盈，音声相和，前后相随。恒也。<br>　　是以圣人处无为之事，行不言之教；万物作而弗始，生而弗有，为而弗恃，功成而不居。夫唯弗居，是以不去。</p>
<p>###【第三章】<br>　　不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。<br>　　是以圣人之治，虚其心，实其腹，弱其志，强其骨。常使民无知无欲。使夫智者不敢为也。为无为，则无不治。</p>
<p>###【第四章】<br>　　道冲，而用之或不盈。渊兮，似万物之宗；湛兮，似或存。吾不知谁之子，象帝之先[1]。</p>
<p>###【第五章】<br>　　天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。<br>　　天地之间，其犹橐龠乎？虚而不屈，动而愈出。<br>　　多言数穷，不如守中。</p>
<p>###【第六章】<br>　　谷神不死，是谓玄牝。玄牝之门，是谓天地根。绵绵若存，用之不勤。</p>
<p>###【第七章】<br>　　天长地久。天地所以能长且久者，以其不自生，故能长生。<br>　　是以圣人后其身而身先；外其身而身存。非以其无私邪？故能成其私。</p>
<p>###【第八章】<br>　　上善若水。水善利万物而不争，处众人之所恶，故几于道。<br>　　居善地，心善渊，与善仁，言善信，政善治，事善能，动善时。夫唯不争，故无尤。</p>
<p>###【第九章】<br>　　持而盈之，不如其已；<br>　　揣而锐之，不可长保。<br>　　金玉满堂，莫之能守；<br>　　富贵而骄，自遗其咎。<br>　　功遂身退，天之道也。</p>
<p>###【第十章】<br>　　载营魄抱一，能无离乎？<br>　　专气致柔，能如婴儿乎？<br>　　涤除玄鉴，能如疵乎？<br>　　爱国治民，能无为乎？<br>　　天门开阖，能为雌乎？<br>　　明白四达，能无知乎？<br>    生之蓄之，生而不有，为而不恃，长而不宰，是谓玄德。</p>
<p> ###【第十一章】<br>　　三十辐，共一毂，当其无，有车之用。<br>　　埏埴以为器，当其无，有器之用。<br>　　凿户牖以为室，当其无，有室之用。<br>　　故有之以为利，无之以为用。</p>
<p>###【第十二章】<br>　　五色令人目盲；<br>    五音令人耳聋；<br>    五味令人口爽；<br>    驰骋畋猎，令人心发狂；<br>    难得之货，令人行妨。<br>    是以圣人为腹不为目，故去彼取此。</p>
<p>###【第十三章】<br>　　宠辱若惊，贵大患若身。<br>　　何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。<br>　　何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患？<br>　　故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。</p>
<p>###【第十四章】<br>　　视之不见，名曰夷；听之不闻，名曰希；搏之不得，名曰微。此三者不可致诘[1]，故混而为一。其上不曒，其下不昧。绳绳兮不可名，复归于物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其后。<br>　　执古之道，以御今之有。能知古始，是谓道纪。</p>
<p>###【第十五章】<br>　　古之善为道者，微妙玄通，深不可识。夫唯不可识，故强为之容：<br>　　豫兮若冬涉川；<br>　　犹兮若畏四邻；<br>　　俨兮其若客；<br>　　涣兮若冰之将释；<br>　　敦兮其若朴；<br>　　旷兮其若谷；<br>　　混兮其若浊；<br>　　（澹兮其若海；<br>　　□兮若无止。）<br>　　孰能浊以静之？徐清；孰能安以动之？徐生。<br>　　保此道者，不欲盈。夫唯不盈，故能蔽而新成。</p>
</blockquote>
<p>###【第十六章】<br>　　致虚极，守静笃。万物并作，吾以观复。<br>　　夫物芸芸，各复归其根。归根曰静，静曰复命。复命曰常[1]，知常曰明。不知常，妄作凶。<br>　　知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。</p>
<p>###【第十七章】<br>　　太上，不知有之；其次，亲而誉之；其次，畏之；其次，侮之。信不足焉，有不信焉。<br>　　悠兮其贵言。功成事遂，百姓皆谓：「我自然」。</p>
<p>###【第十八章】<br>　　大道废，有仁义；智慧出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</p>
<p>###【第十九章】<br>　　绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。<br>　　　　此三者以为文，不足。故令有所属：见素抱朴，少思寡欲，绝学无忧。</p>
<p>###【第二十章】<br>　　唯之与阿，相去几何？美之与恶，相去若何？人之所畏，不可不畏。<br>　　荒兮，其未央哉！<br>　　众人熙熙，如享太牢，如春登台。<br>　　我独泊兮，其未兆；<br>　　沌沌兮，如婴儿之未孩；<br>　　累累兮，若无所归。<br>　　众人皆有馀，而我独若遗。我愚人之心也哉！<br>　　俗人昭昭，我独昏昏。<br>　　俗人察察，我独闷闷。<br>　　澹兮其若海，　兮若无止。<br>　　众人皆有以，而我独顽且鄙。<br>　　我独异于人，而贵食母。</p>
<p>###【第二十一章】<br>　　孔德之容，惟道是从。<br>　　道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。窈兮冥兮，其中有精；其精甚真，其中有信。<br>　　自今及古，其名不去，以阅众甫。吾何以知众甫之状哉？以此。</p>
<p>###【第二十二章】<br>　　曲则全，枉则直，洼则盈，敝则新，少则多，多则惑。<br>　　是以圣人抱一为天下式[1]。不自见，故明；不自是，故彰；不自伐，故有功；不自矜，故长。<br>　　夫唯不争，故天下莫能与之争。古之所谓「曲则全」者，岂虚言哉！诚全而归之。</p>
<p>###【第二十三章】<br>　　希言自然。<br>　　故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况于人乎？故从事于道者，同于道；德者，同于德；失者，同于失。同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。<br>　　信不足焉，有不信焉。</p>
<p>###【第二十四章】<br>　　企者不立；跨者不行；自见者不明；自是者不彰；自伐者无功；自矜者不长。<br>　　其在道也，曰：馀食赘形。物或恶之，故有道者不处。</p>
<p>###【第二十五章】<br>　　有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天地母。吾不知其名，强字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。<br>　　故道大，天大，地大，人亦大。域中有四大，而人居其一焉。<br>　　人法地，地法天，天法道，道法自然。</p>
<p>###【第二十六章】<br>　　重为轻根，静为躁君。<br>　　是以君子终日行不离辎重。虽有荣观，燕处超然。奈何万乘之主，而以身轻天下？<br>　　轻则失根，躁则失君。</p>
<p>###【第二十七章】<br>　　善行无辙迹，善言无瑕谪；善数不用筹策；善闭无关楗而不可开，善结无绳约而不可解。<br>　　是以圣人常善救人，故无弃人；常善救物，故无弃物。是谓袭明。<br>　　故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。</p>
<p>###【第二十八章】<br>　　知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。<br>　　知其白，知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。<br>　　知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。<br>　　朴散则为器，圣人用之，则为官长。<br>　　故大智不割。</p>
<p> ###【第二十九章】<br>　　将欲取天下而为之，吾见其不得已。天下神器，不可为也，不可执也。为者败之，执者失之。是以圣人无为，故无败；无执，故无失。<br>　　夫物或行或随；或嘘或吹；或强或羸；或载或隳。<br>　　是以圣人去甚，去奢，去泰。</p>
<p> ###【第三十章】<br>　　以道佐人主者，不以兵强天下。其事好远。师之所处，荆棘生焉。大军之后，必有凶年。<br>　　善有果而已，不以取强。果而勿矜，果而勿伐，果而勿骄。果而不得已，果而勿强。<br>　　物壮则老，是谓不道，不道早已。</p>
<p>###【第三十一章】<br>　　兵者不祥之器，非君子之器。不得已而用之，恬淡为上，胜而不美。而美 之者，是乐杀人。夫乐杀人者，则不可得志于天下矣。<br>　　夫兵者，不祥之器，物或恶之，故有道者不处。君子居则贵左，用兵则贵右。吉事尚左， 凶事尚右。偏将军居左，上将军居右，言以丧礼处之。杀人之众，以悲哀泣之，战胜以丧 礼处之。</p>
<p>###【第三十二章】<br>　　道常无名。朴虽小，天下莫能臣。侯王若能守之，万物将自宾。<br>　　天地相合，以降甘露，民莫之令而自均。<br>　　始制有名，名亦既有，夫亦将知止，知止可以不殆。<br>　　譬道之在天下，犹川谷之于江海。</p>
<p> ###【第三十三章】<br>　　知人者智，自知者明。<br>　　胜人者有力，自胜者强。<br>　　知足者富。<br>　　强行者有志。<br>　　不失其所者久。<br>　　死而不亡者寿。</p>
<p> ###【第三十四章】<br>　　大道泛兮，其可左右。万物恃之以生而不辞，功成而不有。衣养万物而不为主，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。</p>
<p>###【第三十五章】<br>　　执大象，天下往。往而不害，安平泰。<br>　　乐与饵，过客止。道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。</p>
<p> ###【第三十六章】<br>　　将欲歙之，必故张之；将欲弱之，必故强之；将欲废之，必故兴之；将欲取之，必故与之。是谓微明。<br>　　柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。</p>
<p>###【第三十七章】<br>　　道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。镇之以无名之朴，夫将不欲。不欲以静，天下将自正。</p>
<p>###【第三十八章】<br>　　上德不德，是以有德；下德不失德，是以无德。<br>　　上德无为而无以为；下德无为而有以为。<br>　　上仁为之而无以为；上义为之而有以为。<br>　　上礼为之而莫之应，则攘臂而扔之。<br>　　故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄，而乱之首。<br>　　前识者，道之华，而愚之始。是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。</p>
<p>###【第三十九章】<br>　　昔之得一者：天得一以清；地得一以宁；神得一以灵；谷得一以生；侯得一以为天下正。<br>　　其致之也，谓天无以清，将恐裂；地无以宁，将恐废；神无以灵，将恐歇；谷无以盈，将恐竭；万物无以生，将恐灭；侯王无以正，将恐蹶。<br>　　故贵以贱为本，高以下为基。是以侯王自称孤、寡、不谷。此非以贱为本邪？非乎？故致誉无誉。是故不欲琭琭如玉，珞珞如石。</p>
<p>###【第四十章】<br>　　反者道之动[1]；弱者道之用。<br>　　天下万物生于有，有生于无。</p>
<blockquote>
<p>反，有相反、返归二意。二意相通：反于世界，返归于道。详见第三部一章一则”反”。</p>
</blockquote>
<p>###【第四十一章】<br>　　上士闻道，勤而行之。中士闻道，若存若亡。下士闻道，大笑之。不笑不足以为道。故建言有之：<br>　　明道若昧，进道若退，夷道若类，<br>　　上德若谷，大白若辱，<br>　　广德若不足，建德若偷，质真若渝，<br>　　大方无隅，大器晚成，<br>　　大音希声，大象无形。<br>　　道隐无名。夫唯道，善贷且成。 </p>
<p> ###【第四十二章】<br>　　道生一，一生二，二生三，三生万物[1]。<br>　　万物负阴而抱阳，冲气以为和[2]。<br>　　人之所恶，唯孤、寡、不谷，而王公以为称。<br>　　故物或损之而益，或益之而损。<br>　　人之所教，我亦教之：强梁者不得其死，吾将以为教父。</p>
<blockquote>
<p>[1]后人的解释要么依据唯物辩证法，要么依据阴阳学说，均非本意，在《》其他任何一章中也找不到任何一节来证明。庄子对此早有精妙的解释，在通篇中都可以找到佐证。庄子说：”既然是｀一＇了，还有什么好说的呢？然而，既然称之为｀一＇了，岂不是已经说出口了吗？这个｀一＇，与我们对它的言说，就是｀二＇了。｀二＇，再加上｀一＇原本的存在，就是｀三＇。所以从无到有，到｀三＇为止（《大宗师》）”。庄子所说的三个”一”，很绕口，其实就是”道的表像、道的名份、道的实在”这三者。此处译文即根据庄子，以道解道。王弼亦明显参考了庄子。道的名、实、像及其三者的关系，在《》一、四、六、九、十四、二十一 、二十五、三十二、四十一和四十二章等，都有论及。详见第一部二章一节之三”辨析一二三”，五章三节之二”名实像、三合一”、之三”谈名实像”。<br>[2]道是「其上不　、其下不昧」的纯粹光明，是「一」。万物却有向光与背光的两面，故曰「抱阳而负阴」。向道与背道这两面相互激荡，靠「气」（灵？）而平和。</p>
<p>###【第四十三章】<br>　　天下之至柔，驰骋天下之至坚。无有入无间。<br>　　吾是以知无为之有益。<br>　　不言之教，无为之益，天下希及之。</p>
<p>###【第四十四章】<br>　　名与身孰亲？身与货孰多？得与亡孰病？<br>　　甚爱必大费；多藏必厚亡。<br>　　故知足不辱，知止不殆，可以长久。</p>
<p>###【第四十五章】<br>　　大成若缺，其用不弊。大盈若冲，其用不穷。<br>　　大直若屈，大巧若拙，大辩若讷。<br>　　静胜躁，寒胜热。清静，为天下正。</p>
<p>###【第四十六章】<br>　　天下有道，却走马以粪。天下无道，戎马生于郊。<br>　　祸莫大于不知足；咎莫大于欲得。故知足之足，常足矣。</p>
<p>###【第四十七章】<br>　　不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。<br>　　是以圣人不行而知，不见而明，不为而成。</p>
<p>###【第四十八章】<br>　　为学日益，为道日损。损之又损，以至于无为。<br>　　无为而无不为。取天下常以无事，及其有事，不足以取天下。</p>
<p>###【第四十九章】<br>　　圣人常无心[1]，以百姓心为心。<br>　　善者，吾善之；不善者，吾亦善之；德善。<br>　　信者，吾信之；不信者，吾亦信之；德信。<br>　　圣人在天下，歙歙焉[2]，为天下浑其心，百姓皆注其耳目，圣人皆孩之。<br>[1]「无常心」，有本作「常无心」、「无心」，即无私心。马王堆本「常」为「恒」，「无恒心」亦即不固执一己之心。<br>[2]「歙」，音「吸」，纳气入内。「歙歙焉」，有灵气运行、并非人意之状。</p>
<p>###【第五十章】<br>　　出生入死。生之徒，十有三；死之徒，十有三；人之生，动之于死地，亦十有三[1]。<br>　　夫何故？以其生之厚。盖闻善摄生者，路行不遇兕虎，入军不被甲兵；兕无所投其角，虎无所用其爪，兵无所容其刃。夫何故？以其无死地。<br>[1]从韩非子注。不论生死，人皆有四肢九窍；送生致死，亦以此四肢九窍。联系上句「出生入死」的总概括，以及后面的「夫何故？以其生生之厚」的总结论，此意顺达。有人将「十有三」译为「十分之三」，不和此章深意。</p>
<p>###【第五十一章】<br>　　道生之，德畜之[1]，物形之，势成之。<br>　　是以万物莫不尊道而贵德。<br>　　道之尊，德之贵，夫莫之命而常自然。<br>　　故道生之，德畜之；长之育之；成之熟之；养之覆之。生而不有，为而不恃，长而不宰。是谓玄德。<br>[1]「德」，有品德、恩德、得著、感德、属性等意。用于大道者，当是恩德。</p>
<p>###【第五十二章】<br>　　天下有始，以为天下母。既得其母，以知其子，复守其母，没身不殆。<br>　　塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。用其光，复归其明，无遗身殃；是为袭常。</p>
<p>###【第五十三章】<br>　　使我介然有知，行于大道，唯施是畏。<br>　　大道甚夷，而人好径。朝甚除，田甚芜，仓甚虚；服文采，带利剑，厌饮食，财货有馀；是为盗夸。非道也哉！</p>
<p>###【第五十四章】<br>　　善建者不拔，善抱者不脱，子孙以祭祀不辍。<br>　　修之于身，其德乃真；修之于家，其德乃馀；修之于乡，其德乃长；修之于邦，其德乃丰；修之于天下，其德乃普。<br>　　故以身观身，以家观家，以乡观乡，以邦观邦，以天下观天下。吾何以知天下然哉？以此。</p>
<p>###【第五十五章】<br>　　含「德」之厚，比于赤子。毒虫不螫，猛兽不据，玃鸟不搏。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄，和之至也。<br>　　知和曰「常」，知常曰「明」。益生曰祥。心使气曰强。物壮则老，谓之不道，不道早已。</p>
<p>###【第五十六章】<br>　　知者不言，言者不知。<br>　　塞其兑，闭其门，挫其锐，解其纷，和其光，同其尘，是谓玄同。<br>　　故不可得而亲，不可得而疏，不可得而利，不可得而害，不可得而贵，不可得而贱。故为 天下贵。</p>
<p>###【第五十七章】<br>　　以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此：<br>　　天下多忌讳，而民弥贫；人多利器，国家滋昏；人多伎巧，奇物滋起；法令滋彰，盗贼多有。<br>　　故圣人云：「我无为，而民自化；我好静，而民自正；我无事，而民自富；我无欲，而民自朴。」</p>
<p>###【第五十八章】<br>　　其政闷闷，其民淳淳。其政察察，其民缺缺。<br>　　祸兮福之所倚，福兮祸之所伏。孰知其极？<br>　　正复为奇，善复为妖。人之迷，其日固久。<br>　　是以圣人方而不割，廉而不刿，直而不肆，光而不耀。</p>
<p>###【第五十九章】<br>　　治人事天，莫若啬。<br>　　夫为啬，是谓早服；早服谓之重积德；重积德则无不克；无不克则莫知其极；莫知其极，可以有国；有国之母，可以长久；是谓深根固柢，长生久视之道。</p>
<p>###【第六十章】<br>　　治大国，若烹小鲜。<br>　　以道莅天下，其鬼不神；非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。</p>
<p>###【第六十一章】<br>　　大国者若下流，天下之交，天下之牝。牝常以静胜牡，以静为下。<br>　　故大国以下小国，则取小国。小国以下大国，则取大国。故或下以取，或下而取。大国不 过欲兼蓄人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。</p>
<p>###【第六十二章】<br>　　道者万物之奥[1]。善人之宝，不善人之所保[2]。<br>　　美言可以市尊，美行可以加人。人之不善，何弃之有？故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。<br>　　古之所以贵此道者何？不曰：求以得，有罪以免邪？故为天下贵。<br>[1]”奥”字，河上公注为”藏”，王弼注为”庇荫”，马王堆汉墓出土的帛书甲、乙本均作”注”，读作”主”。其实，道作为万物之”主”，已将”保藏、庇荫”万物的意思涵括进去了。<br>[2]”保”字,任继愈和陈鼓应的译文，均依河上公”道者，不善人之所宝倚也”，说”道也是恶人所要处处保持的”。</p>
<p>###【第六十三章】<br>　　为无为，事无事，味无味。<br>　　大小多少，抱怨以德。<br>　　图难于其易，为大于其细。天下难事，必作于易，天下大事，必作于细。<br>　　是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。</p>
<p>###【第六十四章】<br>　　其安易持，其未兆易谋。其脆易泮，其微易散。为之于未有，治之于未乱。<br>　　合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。<br>　　为者败之，执者失之。是以圣人无为故无败，无执故无失。<br>　　民之从事，常于几成而败之。慎终如始，则无败事。<br>　　是以圣人欲不欲，不贵难得之货；学不学，复众人之所过。以辅万物之自然，而不敢为。 </p>
<p> ###【第六十五章】<br>　　古之善为道者，非以明民，将以愚之。<br>　　民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。<br>　　知此两者亦稽式。常知稽式，是谓「玄德」。「玄德」深矣，远矣，与物反矣，然后乃至大顺。</p>
<p>###【第六十六章】<br>　　江海之所以能为百谷王者，以其善下之，故能为百谷王。<br>　　是以圣人欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。</p>
<p>###【第六十六章】<br>　　江海之所以能为百谷王者，以其善下之，故能为百谷王。<br>　　是以圣人欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。</p>
<p>###【第六十七章】<br>　　天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细也夫！<br>　　我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。<br>　　慈故能勇；俭故能广；不敢为天下先，故能成器长。<br>　　今舍慈且勇；舍俭且广；舍后且先；死矣！<br>　　夫慈以战则胜，以守则固。天将救之，以慈卫之。</p>
<p>###【第六十八章】<br>　　善为士者，不武；善战者，不怒；善胜敌者，不与；善用人者，为之下。是谓不争之德，是谓用人之力，是谓配天古之极。</p>
<p>###【第六十九章】<br>　　用兵有言：「吾不敢为主，而为客；不敢进寸，而退尺。」是谓行无行；攘无臂；扔无敌；执无兵。<br>　　祸莫大于轻敌，轻敌几丧吾宝。<br>　　故抗兵相若，哀者胜矣。</p>
<p>###【第七十章】<br>　　吾言甚易知，甚易行。天下莫能知，莫能行。<br>　　言有宗，事有君。夫唯无知，是以不我知。<br>　　知我者希，则我者贵。是以圣人被褐而怀玉。</p>
<p>###【第七十一章】<br>　　知不知，尚矣；不知知，病也。圣人不病，以其病病。夫唯病病，是以不病。</p>
<p>###【第七十二章】<br>　　民不畏威，则大威至。<br>　　无狎其所居，无厌其所生。夫唯不厌，是以不厌。<br>　　是以圣人自知不自见；自爱不自贵。故去彼取此。</p>
<p>###【第七十三章】<br>　　勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶，孰知其故？<br>　　天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。天网恢恢，疏而不失。</p>
<p>###【第七十四章】<br>　　民不畏死，奈何以死惧之？若使民常畏死，而为奇者，吾得执而杀之，孰敢？<br>　　常有司杀者杀。夫代司杀者杀，是谓代大匠斲，夫代大匠斲者，希有不伤其手矣。</p>
<p>###【第七十五章】<br>　　民之饥，以其上食税之多，是以饥。<br>　　民之难治，以其上之有为，是以难治。<br>　　民之轻死，以其上求生之厚，是以轻死。<br>　　夫唯无以生为者，是贤于贵生。</p>
<p>###【第七十六章】<br>　　人之生也柔弱，其死也坚强。<br>　　草木之生也柔脆，其死也枯槁。<br>　　故坚强者死之徒，柔弱者生之徒。<br>　　是以兵强则灭，木强则折。<br>　　强大处下，柔弱处上。</p>
<p>###【第七十七章】<br>　　天之道，其犹张弓欤？高者抑之，下者举之；有馀者损之，不足者补之。<br>　　天之道，损有馀而补不足。人之道，则不然，损不足以奉有馀。<br>　　孰能有馀以奉天下？唯有道者。<br>　　是以圣人为而不恃，功成而不处，其不欲见贤。</p>
<p>###【第七十八章】<br>　　天下莫柔弱于水，而攻坚强者莫之能胜，以其无以易之。<br>　　弱之胜强，柔之胜刚，天下莫不知，莫能行。<br>　　是以圣人云：「受国之垢，是谓社稷主；受国不祥，是为天下王[1]。」正言若反。</p>
<p>###【第七十九章】<br>　　和大怨，必有馀怨；报怨以德，安可以为善？<br>　　是以圣人执左契，而不责于人。有德司契，无德司彻[1]。<br>　　天道无亲，常与善人。</p>
<p>###【第八十章】<br>　　小国寡民。使有什伯之器而不用；使民重死而不远徙。虽有舟舆，无所乘之，虽有甲兵，无所陈之。<br>　　使民复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬之声相闻，民至老死，不相往来。</p>
<p> ###【第八十一章】<br>　　信言不美，美言不信。<br>　　善者不辩，辩者不善。<br>　　知者不博，博者不知。<br>　　圣人不积，既以为人己愈有，既以与人己愈多。<br>　　天之道，利而不害；圣人之道，为而不争。<br>老子：<br>　　中国先秦时期思想家，道家学派创始人。关于的姓字，历来说法不一。《庄子》称他为老聃，书中的内篇《德充符》，外篇《天地》、《天运》、《田子方》、《知北游》等都把视为前辈，这是战国中晚期道家学派笔下的。秦汉之际成书的《礼记》中《曾子问》篇也把视为与孔子同时代的知礼守礼的长者。《史记韩非列传》大体上把描写为道家，其中搀入老莱子和太史儋两个名字。也有学者认为可能「老」是的姓或氏，其名为聃，故称老聃。但其他一些学者对《》一书是否为老聃所作也有疑问。当今学术界不少人认为其人可能生活于春秋末年，《》一书却是战国时期的作品。但探讨哲学，只能以《》一书为依据。<br>　　哲学思想<br>　　道是思想体系的核心，他说：「道生一，一生二，二生三，三生万物」（《》四十二章），认为一切由道生出。关于道，《》有多种解释。①道的特征是「无状之状，无象之象」。《》第二十一章说：「道之为物，惟恍惟惚，惚兮恍兮，其中有象；恍兮惚兮，其中有物。」第十四章又说：「无状之状，无象之象，是谓惚恍。」②道是世界万物的本原。第二十五章说：「有物混成，先天地生，寂兮寥兮，独立而不改，周行而不殆，可以为天下母。」③道是无。第四十章说：「天下万物生于有，有生于无。」在这里生于「无」即是生于「道」，「道」就是「无」。<br>　　朴素辩证法思想<br>　　认为自然界和人类社会都是变动不居的。他观察到天地间万物万事存在着互相矛盾的两个对立面，例如有无、刚柔、强弱、祸福、兴废等等，它们都是互相依存、互相联结的。所以说：「有无相生，难易相成，长短相形。」还说：「贵以贱为本，高以下为基」，「祸兮福所倚，福兮祸所伏」，表明了对立面双方的同一性。还认识到对立面不是一成不变的，它们在向相反的一面转化，他说：「正复为奇，善复为妖」，「曲则全，枉则直，洼则盈，敝则新，少则得，多则惑」。承认转化，但强调「圣人之道，为而不争」，「以其不争，故天下莫能与之争」。<br>　　的辩证法思想在军事战略战术的运用方面也很突出。在战术上，他主张「以奇用兵」，还要注意「将欲弱之，以固强之」，「将欲夺之，必固与之」。在战略上，他提出「柔弱胜刚强」的指导思想，他说天下没有比水更柔弱的东西，但攻坚的力量莫过于它。这种战略思想有防止盲目骄傲的一面，但也具有极大的片面性。<br>　　认识论<br>　　否认人的认识来源于感觉经验，「不出户，知天下；不窥牖，知天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成」。他还宣扬「涤除玄览」的直观方法，教人们洗心内照。他站在统治者的立场上，反对启迪民智，要人们做到「绝圣弃智」，「绝学无忧」。他认为，「古之善为道者，非以明民，将以愚之。民之难治，以其智多」。因此，主张「常使民无知无欲」。<br>　　社会历史观<br>　　主张「小国寡民，使民有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；使人复结绳而用之」，「邻国相望，鸡犬之声相闻，民至老死不相往来」。他向往结绳记事的原始社会，认为在这种社会中人民会「甘其食，美其服，安其居，乐其俗」，表现出复古倒退的消极思想。<br>　　对中国哲学的影响<br>　　首先提出了「道」这一最高的哲学概念，以「道」为天地万物存在的本原，对于历代的思想家曾产生过深刻的影响。战国末年的韩非，利用并改造了关于「道」的学说，认为「道」是万事万物的总法则。战国时期形成到汉初盛行的道家学派的黄老之学，也利用的「道」缔造自己的学说体系。将「道」和法家思想直接联系起来。导源于的黄老自然主义对无神论思想产生了很大的影响。东汉唯物主义者王充著《论衡》，亦取道家自然之说。<br>　　东汉时，道教形成，五斗米道规定信徒诵习《》五千文。道教发挥《》原有长生久视之说，河上公《章句》着重宣扬「自然长生之道」。《想尔注》亦言「不知长生之道，身皆尸行耳」。练形长生，成为道教哲学的中心思想。魏晋玄学盛行时，《》为三玄之一，何晏作《道德论》，王弼撰《注》，发挥唯心主义本体论。</p>
<h2 id="魏晋以后，引道入儒，儒、道合流，思想对后世儒家特别是革新派改良派如王安石、魏源、严复等产生一定影响。2000多年来，对哲学历代有各种各样的解说和注评，有的接近原著本义，有的不拘原著，肆意发挥。哲学作为中国古代思想的重要遗产，它在哲学、政治、人生诸方面，都曾发生过积极的或消极的重大影响。"><a href="#魏晋以后，引道入儒，儒、道合流，思想对后世儒家特别是革新派改良派如王安石、魏源、严复等产生一定影响。2000多年来，对哲学历代有各种各样的解说和注评，有的接近原著本义，有的不拘原著，肆意发挥。哲学作为中国古代思想的重要遗产，它在哲学、政治、人生诸方面，都曾发生过积极的或消极的重大影响。" class="headerlink" title="　　魏晋以后，引道入儒，儒、道合流，思想对后世儒家特别是革新派改良派如王安石、魏源、严复等产生一定影响。2000多年来，对哲学历代有各种各样的解说和注评，有的接近原著本义，有的不拘原著，肆意发挥。哲学作为中国古代思想的重要遗产，它在哲学、政治、人生诸方面，都曾发生过积极的或消极的重大影响。"></a>　　魏晋以后，引道入儒，儒、道合流，思想对后世儒家特别是革新派改良派如王安石、魏源、严复等产生一定影响。2000多年来，对哲学历代有各种各样的解说和注评，有的接近原著本义，有的不拘原著，肆意发挥。哲学作为中国古代思想的重要遗产，它在哲学、政治、人生诸方面，都曾发生过积极的或消极的重大影响。</h2><p>【《老子》：”祸兮福之所倚，福兮祸之所伏”】<br>　　“祸兮福之所倚，福兮祸之所伏。”意思是，祸是造成福的前提，而福又含有祸的因素。也就是说，好事和坏事是可以互相转化的，在一定的条件下，福就会变成祸，祸也能变成福。说的这句名言，是很有道理的。<br>　　是中国，也是全世界最早具有辩证法思想的哲学家之一。关于其人、其书及其”道论”历来有争论。根据司马迁在《史记》一书中给他写的一个简单的传记来看，他是春秋时著名的思想家、道家学派的创始人。，姓李名耳，字聃，楚国苦县（今河南鹿邑县）厉乡曲仁里人。””是人们对他的称呼，”老”是年高德重的意思，”子”是古代对男子的美称。他的生卒年月不详。<br>　　做过周朝的”守藏室史”（相当于现在的国家图书馆馆长或历史博物馆馆长），所以他谙于掌故，熟于礼制，不仅有丰富的历史知识，并有广泛的自然科学知识。<br>　　公元前520年，周王室发生争夺王位的内战，这年4月，周景王卒，大夫刘耿立王子猛为悼王。王子朝杀悼王自立。晋人攻王子朝，立王子匄为敬王。这次内战达5年之久，公元前516年，王子朝失败，席卷周室典籍，逃奔楚国；所掌握的图书亦被带走。于是，遂被罢免而归居。形势的变化，使的地位发生变化，使他的思想起了大转变，由守礼转向反礼。<br>　　由于身受奴隶主贵族当权者的迫害，为了避免祸害，不得不”自隐无名”，流落四方，后来，他西行去秦国。经过函谷关（今河南灵宝县西南）时，关令尹喜知道将远走隐去，便请留言。于是写下了5000字的《》。相传出关时，骑着青牛飘然而去。<br>　　的思想主张，大都保存在《》一书中。《》共81章，分上下两篇，共5000多字。因为它所讲的是道与德的问题，后来人们又称它为《道德经》。现在我们所见到的《》一书，并不是的原著，因有战国时人增益的文字，但其中的主要思想却是属于的。<br>　　《》一书，文词简短，艰深难懂，因此后人作了许多注解。最通行的有西汉时道学家河上公（姓名不详）注，三国时魏国哲学家王弼注，还有清朝时魏源的《本义》，等等。下面我们就通过《》这本书，来了解的哲学和政治思想。<br>　　“道”是天地万物的本源。是我国第一个力图从自然本身来解释世界，而不求助于超自然的主宰──天帝的意志的哲学家。在之前，人们以为宇宙间的万物都有神在统治着，最高的神就是天，又称天帝。这种观念，到了社会大变革的春秋时期才开始了变化。就是较早的从哲学方面有意识地、明确地否认天帝的思想家。他在《周易》的基础上，进一步阐明”道”是天地万物的本源。”道论”的中心思想是：”道即自然，自然即道”。他说，”道”是万物之母：”道可道，非常道。名可名，非常名。无，名天地之始。<br>　　有，名万物之母。”（《第一章》）这就是说，作为宇宙的本源就是道，它是永远存在的。道的运行是自由的、必然的，即按其自身的规律而运行。天地万物都是由它产生的，它是宇宙的母体。<br>　　认为，道产生了天地，德是道的性能，天地生养着万物，万物各成其形，各备其用。所以万物没有不尊道而贵德的。道的尊崇，德的贵重，不是有谁给它爵位，而是自然而然的。所以道产生天地，德畜养万物，长育万物，成熟万物，覆盖万物。他说：”道生之，德畜之，物形之，器成之。<br>　　是以万物莫不尊道而贵德。道之尊，德之贵，夫莫之爵，而常自然。故道生之，德畜之，长之育之，亭之毒之，盖之覆之。”（《第五十一章》）这样，遂把自然创造的根源归于自然本身，从而摧毁了一切超自然的主宰，一切宗教和唯心论的基础。因此，的天道自然观，在当时有很大的进步意义，它打倒了宗教的天帝，否认了鬼神的威灵。当然，的”道论”刚从传统的宗教解放出来，还未能完全摆脱宗教的影响；他的自然决定论，使人完全听命于自然，轻视了人对自然界的反作用。后来有的哲学家把它发展为定命论，为害颇大。<br>　　“无为而治”。的”道论”，基本上可概括为”天道自然观”。所以的人生哲学和政治哲学基本上是人当法道，顺其自然。至于如何治理国家呢？他认为最好是采取”无为而治”的办法，让人民去过自由自在的生活，用无所作为听其自然发展的办法，来达到治理好国家的目的。在看来，无为正是有所作为，”无为而无不为”，就是这个意思。反对用刑、礼、智这些来治理国家，他反对加重人民税收，反对拥有强大的兵力，他说过：”乐杀人者，则不可以得志于天下。”（《第三十一章》）他同时也反对工商业，反对知识和文化。他说：”绝圣弃智，民利百倍。绝仁弃义，民复孝慈。绝巧弃利，盗贼无有。此三者以为文不足。故令有所属。见素抱扑，少私寡欲，绝学无忧。”（《第十九章》）在看来，人类社会不要”圣智”、”仁义”、”巧利”，国家就大治了。这三种东西不足以治国，最好的办法是，使人们着意于”朴素”，少有”私欲”，不求知识，就可以没有忧患了。<br>　　的社会历史观是不现实的，他为了反对当时的剥削制度，从而反对一切社会制度。为了反对剥削阶级的文化，从而反对一切文化。为了反对欺诈，从而反对一切知识。这是他消极的一面。他以为只有抛弃了智慧，人民才有百倍的利益，只有抛弃了文化学问，才能免于忧虑，这种愚民政策，也被后世的统治阶级所利用。<br>　　那么，所向往的理想世界是什么呢？是小国寡民的原始社会。他说：”小国寡民，使民有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之。虽有甲兵，无所陈之。<br>　　使民复结绳而用之。甘其食，美其服，安其居，乐其俗，邻国相望，鸡犬之声闻，民至老死不相往来。”（《第八十章》）<br>　　这一设想，在一定程度上反映了当时人民迫切要求休养生息和减轻剥削的愿望。说过，人民为什么过着饥寒的生活呢？是因为他们的君主取赋税多的缘故。”民之饥，以其上食税之多”（《第七十五章》）。又说”民不畏死，奈何以死惧之？”（《第七十四章》）这反映了政治思想中的进步因素。但是，小国寡民的理想，却是幻想，它是违反社会历史发展规律的。但我们应当看到，的这一举动是抨击奴隶社会制度的不合理，它对后世的进步思想家、空想的社会改革家却有着深远的影响。<br>　　相反相成。学说的精髓，是他光辉的辩证法思想。观察了自然界的变化，生与死、新与旧的相互关系，观察了社会历史与政治的成与败、福与祸等对立的双方的相互关系，发现了事物内部所具有的一些辩证规律。《》一书中，还深刻地论证了相反相成和物极必反的道理。说过，有和无是彼此相生的，难和易是彼此相成的，长和短只有彼此比较才能显现出来，不同的声音产生谐和，前后互相对立而有了顺序。总之，承认事物是在矛盾中发展的。<br>　　物极必反，是说事物在变化中向它相反的方面过渡，到了一定的时候就完全成为相反的东西。因此，一再告诫统治者，必须去掉那些极端的、过分的措施，否则，就会使事物走向另一个极端，结果就会丧失天下。他认为，高明的统治者必须懂得以柔弱胜刚强的道理。为了证明以弱胜强，以柔胜刚的道理，他举了许多的例子。他经常用水来比喻自然力量的伟大，比喻人类高尚的品质。他说：”天下莫柔弱于水，而攻坚强者莫之能胜。其无以易之。柔之胜刚，弱之胜强，天下莫不知，莫能行。”（《第七十八章》）意思是说，天下万物没有比水更柔弱的了，而攻击坚强的力量没有能胜过水的，这个事实是无法改变的。柔的战胜刚的，弱的战胜强的，天下没有人不懂的，可是没有人能做到。又举军队强大了就会破灭，树木强大就会摧折的例子。但他把弱能胜强，柔能胜刚，当作绝对的规律，没能认识到这种互相转化不是无条件的，而是有条件的。尽管如此，认为在发展过程中柔弱的是不可战胜的，这对于促使人们认识新生的力量是不可战胜的道理是有着积极意义的。所处的时代，是动荡不安、战争频繁的春秋末期，正是由奴隶社会向封建社会过渡的时代，他提出这一观点，也具有积极的现实意义。<br>　　还初步意识到量的积累可以引起质的变化。他说过，大树是由细小的萌芽产生的；九层的高台，是由一堆泥土筑起的；千里的远行，必须从脚下的第一步开始。（见《第六十四章》）<br>　　当然，的自然辩证观是直观的、原始的、朴素的、缺乏科学的论证。同时，他的辩证观还缺乏不可调和的斗争精神。这是他受了时代和阶级的限制。尽管如此，《》一书中上述的这些光辉的思想火花，是很值得我们珍视的一份历史遗产。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【道德经】&quot;&gt;&lt;a href=&quot;#【道德经】&quot; class=&quot;headerlink&quot; title=&quot;【道德经】&quot;&gt;&lt;/a&gt;&lt;center&gt;【道德经】&lt;/center&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;老子&lt;/p&gt;
&lt;p&gt;###【第一章】&lt;br&gt;　　道可道，
    
    </summary>
    
      <category term="经典" scheme="https://yanlee26.github.io/categories/%E7%BB%8F%E5%85%B8/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Events</title>
    <link href="https://yanlee26.github.io/2016/03/03/events/"/>
    <id>https://yanlee26.github.io/2016/03/03/events/</id>
    <published>2016-03-03T12:11:38.000Z</published>
    <updated>2017-07-31T14:25:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-events-值均为script"><a href="#web-events-值均为script" class="headerlink" title="web events(值均为script)"></a>web events(值均为script)</h1><h3 id="事件类型（DOM3级）"><a href="#事件类型（DOM3级）" class="headerlink" title="事件类型（DOM3级）"></a>事件类型（DOM3级）</h3><table>
<thead>
<tr>
<th style="text-align:left">type</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">UI事件</td>
<td style="text-align:center">用户与页面上元素交互</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">焦点事件</td>
<td style="text-align:center">元素得失焦点触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">鼠标事件</td>
<td style="text-align:center">用户用鼠标与页面交互</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">滚轮事件</td>
<td style="text-align:center">用户用鼠标滚轮与页面交互</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">文本事件</td>
<td style="text-align:center">用户在文档中输入文本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">键盘事件</td>
<td style="text-align:center">用户用键盘与页面交互</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">合成事件</td>
<td style="text-align:center">当为IME(输入法编辑器)输入字符时触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">变动事件</td>
<td style="text-align:center">底层DOM结构变动时触发</td>
</tr>
</tbody>
</table>
<h3 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h3><ol>
<li>window事件属性（适用于body标签）</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onafterprint</td>
<td style="text-align:center">在打印文档之后运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onbeforeprint</td>
<td style="text-align:center">在文档打印之前运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onbeforeonload</td>
<td style="text-align:center">在文档加载之前运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onblur</td>
<td style="text-align:center">当窗口失去焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onerror</td>
<td style="text-align:center">当错误发生时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onfocus</td>
<td style="text-align:center">当窗口获得焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onhaschange</td>
<td style="text-align:center">当文档改变时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onload</td>
<td style="text-align:center">当文档加载时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmessage</td>
<td style="text-align:center">当触发消息时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onoffline</td>
<td style="text-align:center">当文档离线时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ononline</td>
<td style="text-align:center">当文档上线时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onpagehide</td>
<td style="text-align:center">当窗口隐藏时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onpageshow</td>
<td style="text-align:center">当窗口可见时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onpopstate</td>
<td style="text-align:center">当文档执行再执行操作（redo）时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onresize</td>
<td style="text-align:center">当调整窗口大小时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onstorage</td>
<td style="text-align:center">当文档加载加载时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onundo</td>
<td style="text-align:center">当 Web Storage 区域更新时（存储空间中的数据发生变化时）</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onunload</td>
<td style="text-align:center">当用户离开文档时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ol>
<li>form事件属性(适用于所有h5元素，常用于表单)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onblur</td>
<td style="text-align:center">当元素失去焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onchange</td>
<td style="text-align:center">当元素改变时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">oncontextmenu</td>
<td style="text-align:center">当触发上下文菜单时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onfocus</td>
<td style="text-align:center">当元素获得焦点时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onformchange</td>
<td style="text-align:center">当表单改变时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onforminput</td>
<td style="text-align:center">当表单获得用户输入时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">oninput</td>
<td style="text-align:center">当元素获得用户输入时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">oninvalid</td>
<td style="text-align:center">当元素无效时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onreset</td>
<td style="text-align:center">当表单重置时运行脚本。HTML 5 不支持</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onselect</td>
<td style="text-align:center">当选取元素时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onsubmit</td>
<td style="text-align:center">当提交表单时运行脚本</td>
</tr>
</tbody>
</table>
<ol>
<li>keyboard事件(适用于所有h5元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onkeydown</td>
<td style="text-align:center">当按下按键时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onkeypress</td>
<td style="text-align:center">当按下并松开按键时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onkeyup</td>
<td style="text-align:center">当松开按键时运行脚本</td>
</tr>
</tbody>
</table>
<ol>
<li>mouse事件(适用于所有h5元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onclick</td>
<td style="text-align:center">当单击鼠标时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">ondblclick</td>
<td style="text-align:center">当双击鼠标时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">ondrag</td>
<td style="text-align:center">当拖动元素时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragend</td>
<td style="text-align:center">当拖动操作结束时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragenter</td>
<td style="text-align:center">当元素被拖动至有效的拖放目标时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragleave</td>
<td style="text-align:center">当元素离开有效拖放目标时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragover</td>
<td style="text-align:center">当元素被拖动至有效拖放目标上方时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragstart</td>
<td style="text-align:center">当拖动操作开始时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondrop</td>
<td style="text-align:center">当被拖动元素正在被拖放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onmousedown</td>
<td style="text-align:center">当按下鼠标按钮时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmousemove</td>
<td style="text-align:center">当鼠标指针移动时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseout</td>
<td style="text-align:center">当鼠标指针移出元素时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseover</td>
<td style="text-align:center">当鼠标指针移至元素之上时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseup</td>
<td style="text-align:center">当松开鼠标按钮时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmousewheel</td>
<td style="text-align:center">当转动鼠标滚轮时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onscroll</td>
<td style="text-align:center">当滚动元素滚动元素的滚动条时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ol>
<li>media事件(适用于所有h5元素,常用于媒体元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onabort</td>
<td style="text-align:center">当发生中止事件时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">oncanplay</td>
<td style="text-align:center">当媒介能够开始播放但可能因缓冲而需要停止时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">oncanplaythrough</td>
<td style="text-align:center">当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondurationchange</td>
<td style="text-align:center">当媒介长度改变时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onemptied</td>
<td style="text-align:center">当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onended</td>
<td style="text-align:center">当媒介已抵达结尾时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onerror</td>
<td style="text-align:center">当在元素加载期间发生错误时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onloadeddata</td>
<td style="text-align:center">当加载媒介数据时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onloadedmetadata</td>
<td style="text-align:center">当媒介元素的持续时间以及其他媒介数据已加载时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onloadstart</td>
<td style="text-align:center">当浏览器开始加载媒介数据时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onpause</td>
<td style="text-align:center">当媒介数据暂停时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onplay</td>
<td style="text-align:center">当媒介数据将要开始播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onplaying</td>
<td style="text-align:center">当媒介数据已开始播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onprogress</td>
<td style="text-align:center">当浏览器正在取媒介数据时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onratechange</td>
<td style="text-align:center">当媒介数据的播放速率改变时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onreadystatechange</td>
<td style="text-align:center">当就绪状态（ready-state）改变时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onseeked</td>
<td style="text-align:center">当媒介元素的定位属性 [1] 不再为真且定位已结束时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onseeking</td>
<td style="text-align:center">当媒介元素的定位属性为真且定位已开始时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onstalled</td>
<td style="text-align:center">当取回媒介数据过程中（延迟）存在错误时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onsuspend</td>
<td style="text-align:center">当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ontimeupdate</td>
<td style="text-align:center">当媒介改变其播放位置时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onvolumechange</td>
<td style="text-align:center">当媒介改变音量亦或当音量被设置为静音时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onwaiting</td>
<td style="text-align:center">当媒介已停止播放但打算继续播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ol>
<li>其它事件</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onshow</td>
<td style="text-align:center">当 <menu> 元素在上下文显示时触发</menu></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">ontoggle</td>
<td style="text-align:center">当用户打开或关闭 <details> 元素时触发</details></td>
</tr>
</tbody>
</table>
<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><blockquote>
<p> 理解click的300ms的延迟响应<br>   Click事件在移动手机开发中有300ms的延迟，因为在手机早期，浏览器系统有放大和缩放功能，用户在屏幕上点击两次之后，<br>   系统会触发放大或者缩放功能，因此系统做了一个处理，当触摸一次后，在300ms这段时间内有没有触摸第二次，<br>   如果触摸了第二次的话，说明是触发放大或缩放功能，否则的话是click事件。因此当click时候，所有用户必须等待于300ms后才<br>   会触发click事件。所以当在移动端使用click事件的时候，会感觉到有300ms的迟钝。</p>
</blockquote>
<ol>
<li>touch事件</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">touchstart</td>
<td style="text-align:center">当手指放在屏幕上触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchmove</td>
<td style="text-align:center">当手指在屏幕上滑动时，连续地触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchend</td>
<td style="text-align:center">当手指从屏幕上离开时触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchcancel</td>
<td style="text-align:center">当系统停止跟踪时触发; 该事件暂时使用不到</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touches</td>
<td style="text-align:center">表示当前跟踪的触摸操作的touch对象的数组</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">targetTouches</td>
<td style="text-align:center">特定于事件目标的touch对象的数组</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">changedTouches</td>
<td style="text-align:center">上次触摸以来发生了什么改变的touch对象的数组</td>
</tr>
</tbody>
</table>
<ol>
<li>gesture事件</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">gesturestart</td>
<td style="text-align:center">当一个手指已经按在屏幕上，而另一个手指又触摸在屏幕时触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">gesturechange</td>
<td style="text-align:center">当触摸屏幕的任何一个手指的位置发生改变的时候触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">gestureend</td>
<td style="text-align:center">当任何一个手指从屏幕上面移开时触发</td>
</tr>
</tbody>
</table>
<blockquote>
<p>触摸事件和手势事件的之间关系：<br>当一个手指放在屏幕上时，会触发touchstart事件，而另一个手指触摸在屏幕上时<br>触发gesturestart事件，随后触发基于该手指的touchstart事件。<br>如果一个或两个手指在屏幕上滑动时，将会触发gesturechange事件，但是只要有一个手指移开时候，则会触发gestureend事件，<br>紧接着会触发touchend事件。<br>手势的专有属性:<br>rotation: 表示手指变化引起的旋转角度，负值表示逆时针，正值表示顺时针，从0开始；<br>scale: 表示2个手指之间的距离情况，向内收缩会缩短距离，这个值从1开始的，并随距离拉大而增长。</p>
</blockquote>
<h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><ul>
<li>PC端</li>
</ul>
<ol>
<li>window事件属性（适用于body标签）</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onblur</td>
<td style="text-align:center">当窗口失去焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onerror</td>
<td style="text-align:center">当错误发生时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onfocus</td>
<td style="text-align:center">当窗口获得焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onload</td>
<td style="text-align:center">当文档加载时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onresize</td>
<td style="text-align:center">当调整窗口大小时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ol>
<li>form事件属性(适用于所有h5元素，常用于表单)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onblur</td>
<td style="text-align:center">当元素失去焦点时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onchange</td>
<td style="text-align:center">当元素改变时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onfocus</td>
<td style="text-align:center">当元素获得焦点时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">oninput</td>
<td style="text-align:center">当元素获得用户输入时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onreset</td>
<td style="text-align:center">当表单重置时运行脚本。HTML 5 不支持</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onselect</td>
<td style="text-align:center">当选取元素时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onsubmit</td>
<td style="text-align:center">当提交表单时运行脚本</td>
</tr>
</tbody>
</table>
<ol>
<li>keyboard事件(适用于所有h5元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onkeydown</td>
<td style="text-align:center">当按下按键时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onkeypress</td>
<td style="text-align:center">当按下并松开按键时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onkeyup</td>
<td style="text-align:center">当松开按键时运行脚本</td>
</tr>
</tbody>
</table>
<ol>
<li>mouse事件(适用于所有h5元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onclick</td>
<td style="text-align:center">当单击鼠标时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">ondblclick</td>
<td style="text-align:center">当双击鼠标时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">ondrag</td>
<td style="text-align:center">当拖动元素时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragend</td>
<td style="text-align:center">当拖动操作结束时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragenter</td>
<td style="text-align:center">当元素被拖动至有效的拖放目标时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragleave</td>
<td style="text-align:center">当元素离开有效拖放目标时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragover</td>
<td style="text-align:center">当元素被拖动至有效拖放目标上方时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondragstart</td>
<td style="text-align:center">当拖动操作开始时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">ondrop</td>
<td style="text-align:center">当被拖动元素正在被拖放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onmousedown</td>
<td style="text-align:center">当按下鼠标按钮时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmousemove</td>
<td style="text-align:center">当鼠标指针移动时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseout</td>
<td style="text-align:center">当鼠标指针移出元素时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseover</td>
<td style="text-align:center">当鼠标指针移至元素之上时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmouseup</td>
<td style="text-align:center">当松开鼠标按钮时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onmousewheel</td>
<td style="text-align:center">当转动鼠标滚轮时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onscroll</td>
<td style="text-align:center">当滚动元素滚动元素的滚动条时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ol>
<li>media事件(适用于所有h5元素,常用于媒体元素)</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">onabort</td>
<td style="text-align:center">当发生中止事件时运行脚本</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">onerror</td>
<td style="text-align:center">当在元素加载期间发生错误时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onloadeddata</td>
<td style="text-align:center">当加载媒介数据时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onpause</td>
<td style="text-align:center">当媒介数据暂停时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onplay</td>
<td style="text-align:center">当媒介数据将要开始播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onplaying</td>
<td style="text-align:center">当媒介数据已开始播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
<tr>
<td style="text-align:left">onwaiting</td>
<td style="text-align:center">当媒介已停止播放但打算继续播放时运行脚本</td>
<td style="text-align:right">New</td>
</tr>
</tbody>
</table>
<ul>
<li>移动端<blockquote>
<p> 理解click的300ms的延迟响应<br> Click事件在移动手机开发中有300ms的延迟，因为在手机早期，浏览器系统有放大和缩放功能，用户在屏幕上点击两次之后，<br> 系统会触发放大或者缩放功能，因此系统做了一个处理，当触摸一次后，在300ms这段时间内有没有触摸第二次，<br> 如果触摸了第二次的话，说明是触发放大或缩放功能，否则的话是click事件。因此当click时候，所有用户必须等待于300ms后才<br> 会触发click事件。所以当在移动端使用click事件的时候，会感觉到有300ms的迟钝。</p>
</blockquote>
</li>
</ul>
<ol>
<li>touch事件</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">touchstart</td>
<td style="text-align:center">当手指放在屏幕上触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchmove</td>
<td style="text-align:center">当手指在屏幕上滑动时，连续地触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchend</td>
<td style="text-align:center">当手指从屏幕上离开时触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touchcancel</td>
<td style="text-align:center">当系统停止跟踪时触发; 该事件暂时使用不到</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">touches</td>
<td style="text-align:center">表示当前跟踪的触摸操作的touch对象的数组</td>
</tr>
</tbody>
</table>
<ol>
<li>gesture事件</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">Properties</th>
<th style="text-align:center">Description</th>
<th style="text-align:right">Mark</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">gesturestart</td>
<td style="text-align:center">当一个手指已经按在屏幕上，而另一个手指又触摸在屏幕时触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">gesturechange</td>
<td style="text-align:center">当触摸屏幕的任何一个手指的位置发生改变的时候触发</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">gestureend</td>
<td style="text-align:center">当任何一个手指从屏幕上面移开时触发</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web-events-值均为script&quot;&gt;&lt;a href=&quot;#web-events-值均为script&quot; class=&quot;headerlink&quot; title=&quot;web events(值均为script)&quot;&gt;&lt;/a&gt;web events(值均为script)&lt;/h1
    
    </summary>
    
      <category term="JS" scheme="https://yanlee26.github.io/categories/JS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>放飞希望：勇敢地再次梦想</title>
    <link href="https://yanlee26.github.io/2016/01/04/dave-to-dream/"/>
    <id>https://yanlee26.github.io/2016/01/04/dave-to-dream/</id>
    <published>2016-01-03T18:29:22.000Z</published>
    <updated>2017-07-31T14:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dave-to-Dream-Again"><a href="#Dave-to-Dream-Again" class="headerlink" title=" Dave to Dream Again"></a><center> Dave to Dream Again</center></h1><blockquote>
<p>最早接触此篇文章在高中，当时花了两块钱买了本喜欢看的《英语沙龙》，当读第一遍的时候<br>就爱不释手并背了下来。在我今后的人生征途中，每每想到其铿锵有力的措辞，时刻迸发出掷地<br>有声的回响。实在是值得收藏与分享的枕边书，只不过要早起的时候看，开启激情燃烧的时刻。。。</p>
</blockquote>
<h4 id="Successful-people-always-have-a-dream-They-dream-big-dreams-and-then-display-great-courage-to-do-things-that-others-say-cannot-be-done"><a href="#Successful-people-always-have-a-dream-They-dream-big-dreams-and-then-display-great-courage-to-do-things-that-others-say-cannot-be-done" class="headerlink" title="Successful people always have a dream.They dream big dreams and then display great courage to do things that others say cannot be done."></a>Successful people always have a dream.They dream big dreams and then display great courage to do things that others say cannot be done.</h4><p>Your dreams form the foundation of success.Many people have long forgotten the dreams they used to have when they were kids.<br>As they grow older,theyare simply too caught up with their work activities that they fail to discover<br>what they really want to pursue in life.<br>They find themselves trapped in a routine work system that can potentially rob them of their dreams.</p>
<h3 id="To-get-you-back-to-pursue-your-dreams-follow-these-step"><a href="#To-get-you-back-to-pursue-your-dreams-follow-these-step" class="headerlink" title="To get you back to pursue your dreams,follow these step:"></a>To get you back to pursue your dreams,follow these step:</h3><h4 id="Learn-to-dream-again"><a href="#Learn-to-dream-again" class="headerlink" title="Learn to dream again:"></a>Learn to dream again:</h4><p>We are born to dream.Children often share their dreams and what they want to be when they grow up.<br>But we hear of teachers yelling in school:”Stop dreaming and pay attention in class!”<br>Parents,too,have shrieked:”Stop dreaming and get on with your homework!”<br>Learning and growing up in such an environment,one may regard dreaming as an unproductive act.<br>As children grow up,they are told to forget their dreams.and be practical because they are living in a “real” world.<br>In the end,many do g”realistic” and give up their dreams eventually.</p>
<h4 id="Dream-big-dreams"><a href="#Dream-big-dreams" class="headerlink" title="Dream big dreams:"></a>Dream big dreams:</h4><p>Never set mental boundaries on what you are capable of achieving.<br>Dreams are free anyway,so a long as you are dreaming,you might as well dream big.<br>Many people cannot realize their dreams and achieve greater success because they limit their own beliefs.</p>
<h4 id="Free-from-dream-killers"><a href="#Free-from-dream-killers" class="headerlink" title="Free from dream killers:"></a>Free from dream killers:</h4><p>Dream killers are devastating to your success.<br>Your friends,colleagues,and even loved ones can be one of your dream killers.<br>There are people who will try to distract,confuse,or persuade you to build the life they want,not the life that you want.<br>Stop listening to the people who tell you why you will not achieve your dreams.<br>You just need to believe you can do whatever it is you want to do.<br>Other people can only discourage us temporarily,but you are the only one who can prevent yourself<br>from being discouraged premanently.</p>
<h4 id="Stop-giving-excused"><a href="#Stop-giving-excused" class="headerlink" title="Stop giving excused:"></a>Stop giving excused:</h4><p>Kids talk frequently about what they can do,whereas many adults do the opposite.<br>Adults tend to talk about what they cannot do and why.<br>You should stop giving reasons why you cannot achieve your dreams.<br>Many so-called reasons are merely excuses.If you continue giving excuses for not achieving,<br>it will not take long before you convince yourself that you really cannot accomplish what you originally set out to achieve.<br>As Henry Ford wisely put it:”Whether you think you can or cannot,you’re absolutely right.”</p>
<h4 id="Take-action-immediately"><a href="#Take-action-immediately" class="headerlink" title="Take action immediately:"></a>Take action immediately:</h4><p>Once you have big and clear dreams,take immediate action to work towards making them come true.<br>Very often,if people do not translate their intention into action soon,their passion will begin to diminish.<br>Weeks later,the passion will grow cold and months later,that passion may be gone forever.</p>
<h4 id="Think-about-this"><a href="#Think-about-this" class="headerlink" title="Think about this:"></a>Think about this:</h4><p>Five birds are resting on the fence and minutes later;three birds decide to fly off to search for food.<br>How many birds are left on the fence?<br>Two?Wrong!There should still be five birds on the fence because deciding to fly off is not the same as the actual<br>act of flying off.The birds would not be able to find food until they start to take action and fly<br>out of their comfort zone.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dave-to-Dream-Again&quot;&gt;&lt;a href=&quot;#Dave-to-Dream-Again&quot; class=&quot;headerlink&quot; title=&quot; Dave to Dream Again&quot;&gt;&lt;/a&gt;&lt;center&gt; Dave to Dream Again
    
    </summary>
    
      <category term="经典" scheme="https://yanlee26.github.io/categories/%E7%BB%8F%E5%85%B8/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>CSS skills</title>
    <link href="https://yanlee26.github.io/2015/12/01/cssskills/"/>
    <id>https://yanlee26.github.io/2015/12/01/cssskills/</id>
    <published>2015-12-01T11:31:20.000Z</published>
    <updated>2017-07-31T14:25:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-使用技巧"><a href="#CSS-使用技巧" class="headerlink" title="CSS 使用技巧"></a>CSS 使用技巧</h1><ul>
<li>文字<ol>
<li>水平居中<br><code>text-aligh:center</code></li>
<li>垂直居中<br><code>div{height:35px;line-height:35px}//1/n容器高度</code></li>
</ol>
</li>
<li>容器<ol>
<li>水平居中<br><code>div{width:760px;margin:0 auto}</code></li>
<li>垂直居中<br><code>.outer{
 position:relative;
 height:480px;
}
.inner{
position:absolute;
top:50%;
height:240px;
margin-top:-120px;
//然后，将小容器定位为absolute，再将它的左上角沿y轴下移50%，最后将它margin-top上移本身高度的50%即可。
}</code></li>
</ol>
</li>
<li>图片宽度自适应<br>  <code>img{max-width:100%}</code></li>
<li>3D按钮<br>  <code>button {
　　　　background: #888;
　　　　border: 1px solid;
　　　　border-color: #999 #777 #777 #999;
　　}</code></li>
<li>font属性</li>
</ul>
<p><code>body { 
　　　　font-family: Arial, Helvetica, sans-serif; 
　　　　font-size: 13px; 
　　　　font-weight: normal; 
　　　　font-variant: small-caps; 
　　　　font-style: italic; 
　　　　line-height: 150%; 
　　}
body { 
　　　　font: italic small-caps normal 13px/150% Arial, Helvetica, sans-serif; 
　　}</code></p>
<ul>
<li>link状态设置顺序<br>  <code>a:link 
　　a:visited 
　　a:hover 
　　a:active</code></li>
<li><p>IE条件注释<br><code>&lt;!--[if IE]&gt; 
　　　　&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie-stylesheet.css&quot; /&gt; 
　　&lt; ![endif]--&gt;</code></p>
</li>
<li><p>CSS 优先级<br>`<br>　　行内样式 &gt; id样式 &gt; class样式 &gt; 标签名样式</p>
</li>
</ul>
<p>`</p>
<ul>
<li>font-size基准<br><code>body {font-size:62.5%;}
//浏览器的缺省字体大小是16px，你可以先将基准字体大小设为10px：</code></li>
<li>Text-transform和Font Variant<br><code>p {text-transform: uppercase} 
　　p {text-transform: lowercase} 
　　p {text-transform: capitalize}</code></li>
<li>reset<br>`</li>
</ul>
<p>`</p>
<ul>
<li>图片列表<br><code>ul {list-style: none}
　　ul li { 
　　　　background-image: url(&quot;path-to-your-image&quot;); 
　　　　background-repeat: none; 
　　　　background-position: 0 0.5em; 
　　}</code></li>
<li>三角形<br><code>.triangle { 
　　　　border-color: transparent transparent green transparent;
　　　　border-style: solid; 
　　　　border-width: 0px 300px 300px 300px; 
　　　　height: 0px; 
　　　　width: 0px; 
　　}</code></li>
<li>禁止自动换行<br><code>p { white-space:nowrap; }</code></li>
<li>用图片替换文字—有时我们需要在标题栏中使用图片，但是又必须保证搜索引擎能够读到标题<br><code>h1 { 
　　　　text-indent:-9999px; 
　　　　background:url(&quot;h1-image.jpg&quot;) no-repeat; 
　　　　width:200px; 
　　　　height:50px; 
　　}</code></li>
<li>焦点突出<br><code>input:focus { border: 2px solid green; }</code></li>
<li>CSS 提示框<br><code>&lt;a class=&quot;tooltip&quot; href=&quot;#&quot;&gt;链接文字 &lt;span&gt;提示文字&lt;/span&gt;&lt;/a&gt;
a.tooltip {position: relative} 
　　a.tooltip span {display:none; padding:5px; width:200px;} 
　　a:hover {background:#fff;} /*background-color is a must for IE6*/ 
　　a.tooltip:hover span{display:inline; position:absolute;}</code></li>
<li>固定位置<br><code>body{ margin:0;padding:100px 0 0 0;}
　　div#header{
　　　　position:absolute;
　　　　top:0;
　　　　left:0;
　　　　width:100%;
　　　　height:&lt;length&gt;;
　　}
　　@media screen{
　　　　body&gt;div#header{position: fixed;}
　　}
　　* html body{overflow:hidden;}
　　* html div#content{height:100%;overflow:auto;}</code></li>
<li>图片预加载<br><a href="https://perishablepress.com/3-ways-preload-images-css-javascript-ajax/" target="_blank" rel="external">预加载</a></li>
<li>CSS选择器<br><a href="http://www.ruanyifeng.com/blog/2009/03/css_selectors.html" target="_blank" rel="external">CSS选择器</a></li>
<li>背景图定位<br><a href="http://www.ruanyifeng.com/blog/2008/05/css_background_image_positioning.html" target="_blank" rel="external">定位</a></li>
</ul>
<h3 id="3D旋转视频展示区"><a href="#3D旋转视频展示区" class="headerlink" title="3D旋转视频展示区"></a>3D旋转视频展示区</h3><p>`</p>
<p><style><br>body {<br>    margin-top: 5em;<br>    text-align: center;<br>    color: #414142;<br>    background: rgb(246,241,232);<br>    /<em>制作多背景</em>/<br>    background-image: -ms-radial-gradient(farthest-side ellipse at center,  rgba(246,241,232,.85) 39%,rgba(212,204,186,.5) 100%), url(“<a href="http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg">http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg</a>“);<br>    background-image: -webkit-radial-gradient(farthest-side ellipse at center,  rgba(246,241,232,.85) 39%,rgba(212,204,186,.5) 100%), url(“<a href="http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg">http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg</a>“);<br>    background-image: radial-gradient( farthest-side ellipse at center,  rgba(246,241,232,.85) 39%,rgba(212,204,186,.5) 100%), url(“<a href="http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg">http://fs0.139js.com/file/s_jpg_857b081bjw1du3kveu19sj.jpg</a>“);<br>    /<em>控制背景图像尺寸</em>/<br>    background-size: cover;<br>}</p>
<p>h1, em, #information {<br>    display: block;<br>    font-size: 25px;<br>    font-weight: normal;<br>    margin: 2em auto;<br>}</p>
<p>a {<br>    color: #414142;<br>    font-style: normal;<br>    text-decoration: none;<br>    font-size: 20px;<br>}</p>
<p>a:hover {<br>    text-decoration: underline;<br>}</p>
<p>#container {<br>    margin: 0 auto;<br>    width: 1024px;<br>}</p>
<p>.wrapper {<br>    display: inline-block;<br>    width: 310px;<br>    height: 100px;<br>    vertical-align: top;<br>    margin: 1em 1.5em 2em 0;<br>    cursor: pointer;<br>    position: relative;<br>    font-family: Tahoma, Arial;<br>    -webkit-perspective: 4000px;<br>    -moz-perspective: 4000px;<br>    -ms-perspective: 4000px;<br>    -o-perspective: 4000px;<br>    perspective: 4000px;<br>}</p>
<p>.item {<br>    height: 100px;<br>    -webkit-transform-style: preserve-3d;<br>    -moz-transform-style: preserve-3d;<br>    -ms-transform-style: preserve-3d;<br>    -o-transform-style: preserve-3d;<br>    transform-style: preserve-3d;<br>    /<em>给每个列表项添加过渡动画效果</em>/<br>    -webkit-transition: -webkit-transform .6s;<br>    -moz-transition: -moz-transform .6s;<br>    -ms-transition: -ms-transform .6s;<br>    -o-transition: -o-transform .6s;<br>    transition: transform .6s;<br>}</p>
<p>.item:hover {<br>    /<em>悬浮状态改变每个列表项的transform效果</em>/<br>    -webkit-transform: translateZ(-50px) rotateX(95deg);<br>    -moz-transform: translateZ(-50px) rotateX(95deg);<br>    -ms-transform: translateZ(-50px) rotateX(95deg);<br>    -o-transform: translateZ(-50px) rotateX(95deg);<br>    transform: translateZ(-50px) rotateX(95deg);<br>}<br>.itemimg {<br>    display: block;<br>    position: absolute;<br>    top: 0;<br>    /<em>设置列表项图片的圆角和阴影效果</em>/<br>    border-radius: 3px;<br>    box-shadow: 0px 3px 8px rgba(0,0,0,0.3);<br>   -webkit-transform: translateZ(50px);<br>   -moz-transform: translateZ(50px);<br>   -ms-transform: translateZ(50px);<br>   -o-transform: translateZ(50px);<br>    transform: translateZ(50px);<br>   -webkit-transition: all .6s;<br>   -moz-transition: all .6s;<br>   -ms-transition: all .6s;<br>   -o-transition: all .6s;<br>    transition: all .6s;<br>    width: 310px;<br>    height: 100px;<br> }</p>
<p>.item .information {<br>    display: block;<br>    position: absolute;<br>    top: 0;<br>    height: 80px;<br>    width: 290px;<br>    text-align: left;<br>    border-radius: 15px;<br>    padding: 10px;<br>    font-size: 12px;<br>    text-shadow: 1px 1px1pxrgba(255,255,255,0.5);<br>    box-shadow: none;<br>    background: rgb(236,241,244);<br>    /<em>给底层显示文本的层级设置渐变效果</em>/<br>    background: -webkit-linear-gradient(to bottom,  rgba(236,241,244,1) 0%,rgba(190,202,217,1) 100%);<br>    background: -ms-linear-gradient(to bottom,  rgba(236,241,244,1) 0%,rgba(190,202,217,1) 100%);<br>    background: linear-gradient(to bottom,  rgba(236,241,244,1) 0%,rgba(190,202,217,1) 100%);<br>    -webkit-transform: rotateX(-90deg) translateZ(50px);<br>    -moz-transform: rotateX(-90deg) translateZ(50px);<br>    -ms-transform: rotateX(-90deg) translateZ(50px);<br>    -o-transform: rotateX(-90deg) translateZ(50px);<br>    transform: rotateX(-90deg) translateZ(50px);<br>    -webkit-transition: all .6s;<br>    -moz-transition: all .6s;<br>    -ms-transition: all .6s;<br>    -o-transition: all .6s;<br>    transition: all .6s;<br> }</p>
<p>.information strong {<br>    display: block;<br>    margin: .2em 0 .5em 0;<br>    font-size: 20px;<br>    font-family: “Oleo Script”;<br>  }<br>.item:hoverimg {<br>    /<em>列表项悬浮状态时，去掉图片的阴影效果</em>/<br>    box-shadow: none;<br>    border-radius: 15px;<br>}</p>
<p>.item:hover .information {<br>    box-shadow: 0px 3px 8px rgba(0,0,0,0.3);<br>    border-radius: 3px;<br> }<br></style></p>
<div id="container"><br>        <h1>CSS3 3D变形制作视频展示区</h1><br>        <div class="wrapper"><br>            <div class="item"><br>                <img src="http://pic2.qiyipic.com/image/20140415/4e/32/5f/v_105669963_m_601_180_101.jpg"><br>                <span class="information"><br>                    <strong>澳门风云</strong>闻名中外，曾担任美国赌场保安总顾问的魔术手石一坚，终回流澳门退休，更宴请各方朋友到来庆祝生日宴.<br>                </span><br>            </div><br>        </div>

<pre><code>    &lt;div class=&quot;wrapper&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;img src=&quot;http://pic4.qiyipic.com/image/20140417/b5/01/81/a_100003950_m_601_m2_180_101.jpg&quot; /&gt;
            &lt;span class=&quot;information&quot;&gt;
            &lt;strong&gt;改过迁善&lt;/strong&gt;该剧讲述了金明民饰演的律师在失忆后回顾自己以往的所作所为心生忏悔，为弥补自己犯下的错误而与自己曾经工作过的律师事务所对簿公堂的故事。
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;wrapper&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;img src=&quot;http://pic1.qiyipic.com/common/lego/20140521/4515581d06cc4d5b8ab320da2cf3778d.jpg&quot; /&gt;
            &lt;span class=&quot;information&quot;&gt;
            &lt;strong&gt;父子刑警&lt;/strong&gt;本剧改编自雫井修介小说《Bitter Blood》。剧中，新晋刑警•佐原夏辉（佐藤健饰）被分配到银座警察
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;wrapper&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;img src=&quot;http://pic5.qiyipic.com/image/20140319/7a/8d/4f/a_100003478_m_601_m1_180_101.jpg&quot; /&gt;
            &lt;span class=&quot;information&quot;&gt;
            &lt;strong&gt;果宝特攻3&lt;/strong&gt;果宝特攻3,顾名思义是果宝特攻的第二部续集,已在国家广播电影电视总局备案.暂定剧情为:菠萝吹雪偶然间穿越到了古代的水果世界
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;wrapper&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;img src=&quot;http://pic0.qiyipic.com/image/20140517/ce/e8/42/v_106167752_m_601_180_101.jpg&quot; /&gt;
            &lt;span class=&quot;information&quot;&gt;
            &lt;strong&gt;红眼&lt;/strong&gt;1988年7月16日，从汉城始发的列车发生了一起严重的交通事故，造成100多人死亡。
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;wrapper&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;img src=&quot;http://pic6.qiyipic.com/image/20140303/da/e9/aa/v_105073913_m_601_180_101.jpg&quot; /&gt;
            &lt;span class=&quot;information&quot;&gt;
            &lt;strong&gt;熊出没之夺宝熊兵&lt;/strong&gt;一场漆黑雨夜的意外事故，一段笑料十足的误打误撞，将两个外表相似却内容各异的箱子调换。
            &lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>`</p>
<ul>
<li>分页<br>`<br>ul.pagination {<br>  display: inline-block;<br>  padding: 0;<br>  margin: 0;<br>}</li>
</ul>
<p>ul.pagination li {display: inline;}</p>
<p>ul.pagination li a {<br>    color: black;<br>    float: left;<br>    padding: 8px 16px;<br>    text-decoration: none;<br>}</p>
<p>ul.pagination li a.active {<br>    background-color: #4CAF50;<br>    color: white;<br>}</p>
<p>ul.pagination li a:hover:not(.active) {background-color: #ddd;}<br>//html<br>ul.pagination&gt;li&gt;a<em>8<br>//面包屑导航<br>ul.breadcrumb {<br>    padding: 8px 16px;<br>    list-style: none;<br>    background-color: #eee;<br>}<br>ul.breadcrumb li {display: inline;}<br>ul.breadcrumb li+li:before {<br>    padding: 8px;<br>    color: black;<br>    content: “/\00a0”;<br>}<br>ul.breadcrumb li a {color: green;}<br>//html<br>ul&gt;li&gt;a</em>5<br>`</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS-使用技巧&quot;&gt;&lt;a href=&quot;#CSS-使用技巧&quot; class=&quot;headerlink&quot; title=&quot;CSS 使用技巧&quot;&gt;&lt;/a&gt;CSS 使用技巧&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;文字&lt;ol&gt;
&lt;li&gt;水平居中&lt;br&gt;&lt;code&gt;text-aligh:cent
    
    </summary>
    
      <category term="CSS" scheme="https://yanlee26.github.io/categories/CSS/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="https://yanlee26.github.io/2015/10/01/design-pattern/"/>
    <id>https://yanlee26.github.io/2015/10/01/design-pattern/</id>
    <published>2015-10-01T11:31:20.000Z</published>
    <updated>2017-08-23T23:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>了解一下经典的设计模式，总之一句话：大道至简，要言不繁！</p>
</blockquote>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote>
<p>代表了最佳实践，是软件开发过程中面临的一般问题解决方案。<br>两大原则：</p>
<ul>
<li>对接口而非实现编程</li>
<li>首选对象而非继承</li>
</ul>
</blockquote>
<h3 id="设计模式类型：创建型-Creational-，结构型-Structural-，行为型-Behavoral"><a href="#设计模式类型：创建型-Creational-，结构型-Structural-，行为型-Behavoral" class="headerlink" title="设计模式类型：创建型(Creational)，结构型(Structural)，行为型(Behavoral)"></a>设计模式类型：创建型(Creational)，结构型(Structural)，行为型(Behavoral)</h3><table>
<thead>
<tr>
<th style="text-align:left">模式&amp;描述</th>
<th style="text-align:right">子类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">创建型</td>
<td style="text-align:right">工厂模式（Factory Pattern）抽象工厂模式（Abstract Factory Pattern）单例模式（Singleton Pattern）建造者模式（Builder Pattern）原型模式（Prototype Pattern）</td>
</tr>
<tr>
<td style="text-align:left">结构型</td>
<td style="text-align:right">适配器模式（Adapter Pattern）桥接模式（Bridge Pattern）过滤器模式（Filter、Criteria Pattern）组合模式（Composite Pattern）装饰器模式（Decorator Pattern）外观模式（Facade Pattern）享元模式（Flyweight Pattern）代理模式（Proxy Pattern）</td>
</tr>
<tr>
<td style="text-align:left">行为型</td>
<td style="text-align:right">责任链模式（Chain of Responsibility Pattern）命令模式（Command Pattern）解释器模式（Interpreter Pattern）迭代器模式（Iterator Pattern）中介者模式（Mediator Pattern）备忘录模式（Memento Pattern）观察者模式（Observer Pattern）状态模式（State Pattern）空对象模式（Null Object Pattern）策略模式（Strategy Pattern）模板模式（Template Pattern）访问者模式（Visitor Pattern）</td>
</tr>
<tr>
<td style="text-align:left">J2EE 模式</td>
<td style="text-align:right">MVC 模式（MVC Pattern）业务代表模式（Business Delegate Pattern）组合实体模式（Composite Entity Pattern）数据访问对象模式（Data Access Object Pattern）前端控制器模式（Front Controller Pattern）拦截过滤器模式（Intercepting Filter Pattern）服务定位器模式（Service Locator Pattern）传输对象模式（Transfer Object Pattern）</td>
</tr>
</tbody>
</table>
<h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3><ul>
<li>开闭:对扩展开发，对修改关闭</li>
<li>里氏替换：任何基类可以出现的地方，子类一定可以出现</li>
<li>依赖倒转：针对接口编程，依赖于抽象而不依赖于具体</li>
<li>接口隔离：使用多个隔离的接口，比使用单个接口要好</li>
<li>最少知道：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li>
<li>合成复用：尽量使用合成/聚合的方式，而不是使用继承</li>
</ul>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</p>
</blockquote>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><blockquote>
<p>围绕一个超级工厂创建其他工厂.接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
</blockquote>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
</blockquote>
<ul>
<li>注意<ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
</li>
</ul>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><blockquote>
<p>使用多个简单的对象一步一步构建成一个复杂的对象</p>
</blockquote>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote>
<p>用于创建重复的对象，同时又能保证性能。实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式</p>
</blockquote>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote>
<p>作为两个不兼容的接口之间的桥梁.这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。</p>
</blockquote>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><blockquote>
<p>把抽象化与实现化解耦，使得二者可以独立变化。<br>涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>
</blockquote>
<h2 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h2><blockquote>
<p>允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。</p>
</blockquote>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote>
<p>把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>
</blockquote>
<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote>
<p>允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>
</blockquote>
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><blockquote>
<p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>
</blockquote>
<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote>
<p>主要用于减少创建对象的数量，以减少内存占用和提高性能。</p>
</blockquote>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>一个类代表另一个类的功能</p>
</blockquote>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><blockquote>
<p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>
</blockquote>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote>
<p>种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命<br>令。</p>
</blockquote>
<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><blockquote>
<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
</blockquote>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote>
<p>是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p>
</blockquote>
<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><blockquote>
<p>用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</p>
</blockquote>
<p>##备忘录模式</p>
<blockquote>
<p>保存一个对象的某个状态，以便在适当的时候恢复对象。</p>
</blockquote>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote>
<p>针对一对多的对象关系。当一个对象被修改时自动通知它的依赖对象。</p>
</blockquote>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><blockquote>
<p>类的行为基于其状态而变。创建表示各种状态的对象和一个行为随着状态改变而改变的context对象。</p>
</blockquote>
<h2 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h2><blockquote>
<p>一个空对象取代NULL对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>
</blockquote>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote>
<p>一个类的行为或算法可以在运行时更改。</p>
</blockquote>
<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><blockquote>
<p>一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p>
</blockquote>
<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><blockquote>
<p>改变元素类的执行算法，据此执行算法可以随着访问者而变。</p>
</blockquote>
<h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><blockquote>
<p>Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p>
<ul>
<li>Model（模型）模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li>
<li>View（视图）视图代表模型包含的数据的可视化。</li>
<li>Controller（控制器）控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li>
</ul>
</blockquote>
<h2 id="业务代表模式"><a href="#业务代表模式" class="headerlink" title="业务代表模式"></a>业务代表模式</h2><blockquote>
<p>对表示层和业务层解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。在业务层中我们有以下实体。</p>
<ul>
<li>客户端（Client）表示层代码可以是 JSP、servlet 或 UI java 代码。</li>
<li>业务代表（Business Delegate）一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。</li>
<li>查询服务（LookUp Service）查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。</li>
<li>业务服务（Business Service）业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。</li>
</ul>
</blockquote>
<h2 id="组合实体模式"><a href="#组合实体模式" class="headerlink" title="组合实体模式"></a>组合实体模式</h2><blockquote>
<p>用在 EJB 持久化机制中。</p>
</blockquote>
<h2 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h2><h2 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h2><h2 id="拦截过滤器模式"><a href="#拦截过滤器模式" class="headerlink" title="拦截过滤器模式"></a>拦截过滤器模式</h2><h2 id="服务定位器模式"><a href="#服务定位器模式" class="headerlink" title="服务定位器模式"></a>服务定位器模式</h2><h2 id="传输对象模式"><a href="#传输对象模式" class="headerlink" title="传输对象模式"></a>传输对象模式</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;了解一下经典的设计模式，总之一句话：大道至简，要言不繁！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;b
    
    </summary>
    
      <category term="综合" scheme="https://yanlee26.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="Hexo" scheme="https://yanlee26.github.io/tags/Hexo/"/>
    
      <category term="clean_blog" scheme="https://yanlee26.github.io/tags/clean-blog/"/>
    
  </entry>
  
</feed>
